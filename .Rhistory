drop_na(lineage)
gg.treat.lin.sh <- ggplot(df.div.treat.lin, aes(x=treat, y=Shannon,color=treat))+
geom_boxplot(outlier.shape=NA)+
scale_colour_manual(values=cols_treat_reds)+
geom_jitter(alpha=0.5)+
xlab("Treatment")+
ylab("Shannon index")+
theme_bw()+
#guides(color=guide_legend(title="Reef zone"),shape=guide_legend(title="Reef zone"))+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1), axis.title.x = element_blank(), legend.position = "none")+
facet_wrap(~lineage)
gg.treat.lin.sh
#Shannon
shapiro.test(df.div$Shannon) # fine
leveneTest(df.div$Shannon~treat,data=df.div) #fine
a.div <- aov(Shannon~treat+lineage,data=df.div)
summary(a.div) #p=0.449
TukeyHSD(a.div) #ns for raw, rarefied, trimmed, or not
summary(a.div) #p=0.449
TukeyHSD(a.div) #ns for raw, rarefied, trimmed, or not
gg.site.sim <- ggplot(df.div,aes(x=sitename,y=InvSimpson,color=sitename))+
geom_boxplot(outlier.shape=NA)+
scale_color_manual(values=cols_site_diverging)+
geom_jitter(alpha=0.5)+
ylab("Inv. Simpson index")+
xlab("Site")+
theme_bw()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1), axis.title.x = element_blank(), legend.position = "none")
gg.site.sim
df.div.lin = df.div %>%
drop_na(lineage)
gg.lin.sim <- ggplot(df.div.lin, aes(x=lineage, y=InvSimpson,color=lineage))+
geom_boxplot(outlier.shape=NA)+
scale_colour_manual(values=cols_lineage)+
geom_jitter(alpha=0.5)+
xlab("Lineage")+
ylab("Inv. Simpson index")+
theme_bw()+
#guides(color=guide_legend(title="Reef zone"),shape=guide_legend(title="Reef zone"))+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1), axis.title.x = element_blank(), legend.position = "none")
gg.lin.sim
#plotting treatment
gg.treat.sim <- ggplot(df.div.treat, aes(x=treat, y=InvSimpson,color=treat))+
geom_boxplot(outlier.shape=NA)+
scale_colour_manual(values=cols_treat_reds)+
geom_jitter(alpha=0.5)+
xlab("Treatment")+
ylab("Inv. Simpson index")+
theme_bw()+
#guides(color=guide_legend(title="Reef zone"),shape=guide_legend(title="Reef zone"))+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1), axis.title.x = element_blank(), legend.position = "none")
gg.treat.sim
gg.treat.lin.sim <- ggplot(df.div.treat.lin, aes(x=treat, y=InvSimpson,color=treat))+
geom_boxplot(outlier.shape=NA)+
scale_colour_manual(values=cols_treat_reds)+
geom_jitter(alpha=0.5)+
xlab("Treatment")+
ylab("Inv. Simpson index")+
theme_bw()+
#guides(color=guide_legend(title="Reef zone"),shape=guide_legend(title="Reef zone"))+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1), axis.title.x = element_blank(), legend.position = "none")+
facet_wrap(~lineage)
gg.treat.lin.sim
#simpson
shapiro.test(df.div$InvSimpson) #not normal
df.div$si.log <- log(df.div$InvSimpson)
shapiro.test(df.div$si.log) #fine
leveneTest(df.div$si.log~treat,data=df.div) #fine
a.div <- aov(si.log~treat+lineage,data=df.div)
summary(a.div) #p=0.603
TukeyHSD(a.div) #nothing, rarefied or not
TukeyHSD(a.div) #nothing, rarefied or not
gg.site.obs <- ggplot(df.div,aes(x=sitename,y=Observed,color=sitename))+
geom_boxplot(outlier.shape=NA)+
scale_color_manual(values=cols_site_diverging)+
geom_jitter(alpha=0.5)+
ylab("ASV richness")+
xlab("Site")+
theme_bw()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1), axis.title.x = element_blank(), legend.position = "none")
gg.site.obs
#otu richness
shapiro.test(df.div$Observed) #nope
df.div$obs.log <- log(df.div$Observed)
shapiro.test(df.div$obs.log) #still no...
leveneTest(df.div$obs.log~treat,data=df.div) #fine
a.div <- aov(obs.log~treat+lineage,data=df.div)
summary(a.div) #ptreat=0.0918, plineage=0.7766
TukeyHSD(a.div) #no differences
#evenness
shapiro.test(df.div$even) #nope
leveneTest(df.div$even~treat,data=df.div) #fine
a.div <- aov(even~treat+lineage,data=df.div)
summary(a.div) #ptreat=0.337, plineage=0.509
TukeyHSD(a.div) #no differences, rarefied or not
## Raw (cleaned)
ps = readRDS("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/ps.its2.RDS")
seq.ps <- data.frame(ps@otu_table)
samdf.ps <- data.frame(ps@sam_data)
dist.ps <- vegdist(seq.ps)
## Relative abundance
# Report this since it is the data used for making the PCA's
ps.cleanest.rel = readRDS("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/ps.its2.rel.RDS")
# dispersion by treatment
seq.ps <- data.frame(ps.cleanest.rel@otu_table)
samdf.ps <- data.frame(ps.cleanest.rel@sam_data)
dist.ps <- vegdist(seq.ps)
bet.ps <- betadisper(dist.ps,samdf.ps$treat)
anova(bet.ps) #p=0.8568
#             Df  Sum Sq   Mean Sq F value Pr(>F)
# Groups      3 0.00413 0.0013761  0.2562 0.8568
# Residuals 152 0.81649 0.0053716
permutest(bet.ps,pairwise=TRUE,permutations=999) # all ns
plot(bet.ps)
# by sitename
bet.ps <- betadisper(dist.ps,samdf.ps$sitename)
anova(bet.ps) #p=0.1152
#             Df  Sum Sq Mean Sq F value Pr(>F)
# Groups      5  1.3691 0.27382  1.8048 0.1152
# Residuals 150 22.7571 0.15171
permutest(bet.ps,pairwise=TRUE,permutations=999) # CI-BS, CI-CA, PD-CA significant differences
plot(bet.ps)
# by lineage
bet.ps <- betadisper(dist.ps,samdf.ps$lineage)
anova(bet.ps) #p=0.3339
#             Df Sum Sq  Mean Sq F value Pr(>F)
# Groups      1 0.0356 0.035633  0.9397 0.3339
# Residuals 154 5.8397 0.037920
plot(bet.ps)
adonis2(formula = seq.ps ~ treat + sitename + lineage, data = samdf.ps, permutations = 999)
# read in data and set working directory
library(dplyr)
library(gridExtra)
library(ggplot2)
library(scales)
library(psych)
library(tidyverse)
library(ggpubr)
setwd("/Users/hannahaichelman/Documents/BU/TVE/TemperatureData/TankTemps/")
#### Apex Temperature Data ####
# using the master doc that doesn't have the first few days of data, the probes were mis-labeled and didn't match later measurements
apex <- read.csv("/Users/hannahaichelman/Documents/BU/TVE/TemperatureData/TankTemps/Apex/Apex_Master_Doc.csv")
head(apex)
tail(apex)
str(apex)
apex <- apex %>%
dplyr::rename(HighVarTemp = Temp4, HighVarpH = pH.4, ControlpH = pH.1, ControlTemp = Temp1, LowVarpH = pH.2,
LowVarTemp = Temp2, ModVarpH = pH.3, ModVarTemp = Temp3, Control2pH = pHx8, Control2Temp = Tmpx8,
datetime = Date)
head(apex)
apex$datetime<-strptime(apex$datetime, format="%m/%d/%y %H:%M")
apex$datetime_ct <- as.POSIXct(apex$datetime, format="%Y-%m-%dT%H:%M:%S")
# transform the data to long format so treatment is its own column
apex_long = apex %>%
select(datetime_ct, HighVarTemp, ControlTemp, LowVarTemp, ModVarTemp, Control2Temp) %>%
gather(treatment, Temp, HighVarTemp, ControlTemp, LowVarTemp, ModVarTemp, Control2Temp) %>%
filter(Temp > 10) # remove strange value near 0 in High Var treatment that seems to be when probe came out of water
apex_long$treatment <- factor(apex_long$treatment, levels = c("ControlTemp", "Control2Temp", "LowVarTemp", "ModVarTemp", "HighVarTemp"))
apex_long$Day<-format(apex_long$datetime_ct,"%D")
apex_long$Day<-as.POSIXct(apex_long$Day, format="%m/%d/%y")
head(apex_long)
str(apex_long)
#### Plot Apex Temps ####
cols_treat_reds <- c("darkgrey", "#FF9966","#CC3300","#7f0000")
cols_treat_old <- c("cornflowerblue","darkolivegreen3","darkgoldenrod1","coral2")
apex_plot <- apex_long %>%
filter(treatment != "Control2Temp") %>% # ignore this, and add it back in to scale_color_manual with color blue to include this treatment
ggplot(aes(x = datetime_ct, y = Temp, color = treatment)) +
geom_line() +
scale_color_manual(name = "Treatment",
labels = c("Control","Low Var","Mod Var","High Var"),
values = cols_treat_reds) +
xlab('DateTime') +
ylab(expression(paste("Temp (",degree,"C)")))+
scale_x_datetime(breaks = as.POSIXct(c("2016-11-09 00:00:00","2016-11-14 00:00:00","2016-11-21 00:00:00","2016-12-13 00:00:00")),
date_labels = "%m/%d/%y")+ # to plot x axis labels at important dates, same as hobo loggers
geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
#ylim(26,34) +
ggtitle("Tank Temperatures - Apex") +
theme_classic()
apex_plot
# plot a subset of dates that look nice as an example of what we were going for
apex_clipped <- apex_long %>%
filter(datetime_ct > "2016-10-30 00:00:00", datetime_ct < "2016-11-02 00:00:00") %>%
filter(treatment != "Control2Temp")
apex_clipped_plot <- ggplot(apex_clipped, aes(x = datetime_ct, y = Temp, color = treatment)) +
geom_line() +
scale_color_manual(name = "Treatment",
labels = c("Control","Low Var","Mod Var","High Var"),
values = cols_treat_reds) +
xlab('DateTime') +
ylab(expression(paste("Temp (",degree,"C)")))+
scale_y_continuous(breaks = seq(28,33,by = 0.5))+
scale_x_datetime(breaks = as.POSIXct(c("2016-10-30 00:00:00","2016-10-31 00:00:00","2016-11-01 00:00:00","2016-11-02 00:00:00")),
labels = c("10/30/16 00:00","10/31/16 00:00","11/1/16 00:00","11/2/16 00:00")) +
#geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
#ylim(26,34) +
ggtitle("Tank Temperatures - Apex") +
theme_classic()
apex_clipped_plot
#### Hobo Logger Temperature Data ####
Tank1.1 <- read.csv("Tank_Hobo_Loggers/TVE_1_1_clean.csv") # log every 5 mins, 9/5/16 17:00 to 12/16/16 14:15
str(Tank1.1)
head(Tank1.1)
Tank2.1 <- read.csv("Tank_Hobo_Loggers/TVE_2_1_clean.csv") # log every 5 mins, 9/5/16 17:00 to 12/16/16 14:30
str(Tank2.1)
head(Tank2.1)
Tank3.1 <- read.csv("Tank_Hobo_Loggers/TVE_3_1_clean.csv") # log every 5 mins, 9/5/16 17:00 to 11/15/16, but
# starts logging at odd intervals and eventually 1 minute starting 11/14/16 12:30, so trim here.
str(Tank3.1)
head(Tank3.1)
Tank4.2 <- read.csv("Tank_Hobo_Loggers/TVE_4_2_clean.csv") # log every 5 mins, 9/5/16 17:00 to 12/16/16 14:50
str(Tank4.2)
head(Tank4.2)
Tank5.3 <- read.csv("Tank_Hobo_Loggers/TVE_5_3_clean.csv") # log every 5 mins, 9/5/16 17:00 to 12/16/16 14:50
str(Tank5.3)
head(Tank5.3)
Tank1.1$DateTime<-strptime(Tank1.1$DateTime, format="%m/%d/%y %H:%M")
Tank1.1$DateTime_ct <- as.POSIXct(Tank1.1$DateTime, format="%Y-%m-%dT%H:%M:%S")
Tank1.1$Day<-format(Tank1.1$DateTime,"%D")
Tank1.1$Day<-as.POSIXct(Tank1.1$Day, format="%m/%d/%y")
head(Tank1.1)
Tank2.1$DateTime<-strptime(Tank2.1$DateTime, format="%m/%d/%y %H:%M")
Tank2.1$DateTime_ct <- as.POSIXct(Tank2.1$DateTime, format="%Y-%m-%dT%H:%M:%S")
Tank2.1$Day<-format(Tank2.1$DateTime,"%D")
Tank2.1$Day<-as.POSIXct(Tank2.1$Day, format="%m/%d/%y")
head(Tank2.1)
Tank3.1$DateTime<-strptime(Tank3.1$DateTime, format="%m/%d/%y %H:%M")
Tank3.1$DateTime_ct <- as.POSIXct(Tank3.1$DateTime, format="%Y-%m-%dT%H:%M:%S")
Tank3.1$Day<-format(Tank3.1$DateTime,"%D")
Tank3.1$Day<-as.POSIXct(Tank3.1$Day, format="%m/%d/%y")
head(Tank3.1)
Tank4.2$DateTime<-strptime(Tank4.2$DateTime, format="%m/%d/%y %H:%M")
Tank4.2$DateTime_ct <- as.POSIXct(Tank4.2$DateTime, format="%Y-%m-%dT%H:%M:%S")
Tank4.2$Day<-format(Tank4.2$DateTime,"%D")
Tank4.2$Day<-as.POSIXct(Tank4.2$Day, format="%m/%d/%y")
head(Tank4.2)
Tank5.3$DateTime<-strptime(Tank5.3$DateTime, format="%m/%d/%y %H:%M")
Tank5.3$DateTime_ct <- as.POSIXct(Tank5.3$DateTime, format="%Y-%m-%dT%H:%M:%S")
Tank5.3$Day<-format(Tank5.3$DateTime,"%D")
Tank5.3$Day<-as.POSIXct(Tank5.3$Day, format="%m/%d/%y")
head(Tank5.3)
# Hobo data:
Tank1.1_dayavg <- Tank1.1 %>%
dplyr::filter(DateTime >= "2016-10-06 00:00:00", DateTime <= "2016-11-15 23:50:00") %>%
group_by(Day) %>%
summarise_at(vars(Temp), list(mean_temp = mean), na.rm=TRUE)
Tank2.1_dayavg <- Tank2.1 %>%
dplyr::filter(DateTime >= "2016-10-06 00:00:00", DateTime <= "2016-11-15 23:50:00") %>%
group_by(Day) %>%
summarise_at(vars(Temp), list(mean_temp = mean), na.rm=TRUE)
Tank3.1_dayavg <- Tank3.1 %>%
dplyr::filter(DateTime >= "2016-10-06 00:00:00", DateTime <= "2016-11-15 23:50:00") %>%
group_by(Day) %>%
summarise_at(vars(Temp), list(mean_temp = mean), na.rm=TRUE)
Tank4.2_dayavg <- Tank4.2 %>%
dplyr::filter(DateTime >= "2016-10-06 00:00:00", DateTime <= "2016-11-15 23:50:00") %>%
group_by(Day) %>%
summarise_at(vars(Temp), list(mean_temp = mean), na.rm=TRUE)
# Calculate means by day for Apex data
apex_dayavg <- apex_long %>%
group_by(Day, treatment) %>%
summarise_at(vars(Temp), list(mean_temp = mean), na.rm=TRUE)
# Control: 2016-10-06 to 2016-12-11
apex_dayavg_control <-  apex_dayavg %>%
dplyr::filter(treatment == "ControlTemp") %>%
filter(Day <= "2016-11-15")
# Low Var: 2016-10-06 to 2016-12-11
apex_dayavg_lowvar <-  apex_dayavg %>%
dplyr::filter(treatment == "LowVarTemp") %>%
filter(Day <= "2016-11-15")
# Mod Var: 2016-10-06 to 2016-11-15
apex_dayavg_modvar <-  apex_dayavg %>%
dplyr::filter(treatment == "ModVarTemp") %>%
filter(Day <= "2016-11-15")
# High Var: 2016-10-06 to 2016-12-11
apex_dayavg_highvar <-  apex_dayavg %>%
dplyr::filter(treatment == "HighVarTemp") %>%
filter(Day <= "2016-11-15")
mean(apex_dayavg_control$mean_temp - Tank1.1_dayavg$mean_temp) # control
# [1] 0.6860648
mean(apex_dayavg_lowvar$mean_temp - Tank2.1_dayavg$mean_temp) # low variability
# [1] 0.724092
mean(apex_dayavg_modvar$mean_temp - Tank3.1_dayavg$mean_temp) # moderate variability
# [1] 0.7730094
mean(apex_dayavg_highvar$mean_temp - Tank4.2_dayavg$mean_temp) # high variability
# Plot the difference over time by treatment
plot(apex_dayavg_control$mean_temp - Tank1.1_dayavg$mean_temp, main = "Control Treatment", ylab = "Apex - Hobo (°C)", ylim = c(0,1.1)) # control
plot(apex_dayavg_lowvar$mean_temp - Tank2.1_dayavg$mean_temp, main = "Low Variability Treatment", ylab = "Apex - Hobo (°C)", ylim = c(0,1.1)) # low variability
plot(apex_dayavg_modvar$mean_temp - Tank3.1_dayavg$mean_temp, main = "Moderate Variability Treatment", ylab = "Apex - Hobo (°C)", ylim = c(0,1.1)) # moderate variability
plot(apex_dayavg_highvar$mean_temp - Tank4.2_dayavg$mean_temp, main = "High Variability Treatment", ylab = "Apex - Hobo (°C)", ylim = c(-0.1,2.2)) # high variability
Tank1.1_all <- Tank1.1 %>%
mutate(Temp = Temp + 0.686064) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-12 00:00:00" & DateTime > "2016-09-07 00:00:00") %>%
mutate(Treatment = "Control")
Tank1.1_var <- Tank1.1 %>%
mutate(Temp = Temp + 0.686064) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-11-10 18:00:00" & DateTime > "2016-09-22 00:00:00") %>%
mutate(Treatment = "Control")
Tank1.1_stress <- Tank1.1 %>%
mutate(Temp = Temp + 0.686064) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-10 18:00:00") %>%
mutate(Treatment = "Control")
Tank2.1_all <- Tank2.1 %>%
mutate(Temp = Temp + 0.724092) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-12 00:00:00" & DateTime > "2016-09-07 00:00:00") %>%
mutate(Treatment = "Low Var")
Tank2.1_var <- Tank2.1 %>%
mutate(Temp = Temp + 0.724092) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-11-10 18:00:00" & DateTime > "2016-09-22 00:00:00") %>%
mutate(Treatment = "Low Var")
Tank2.1_stress <- Tank2.1 %>%
mutate(Temp = Temp + 0.724092) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-10 18:00:00") %>%
mutate(Treatment = "Low Var")
# Tank 3 doesn't record until the end of the experiment
Tank3.1_all <- Tank3.1 %>%
mutate(Temp = Temp + 0.7730094) %>% # treatment-specific correction
dplyr::filter(DateTime > "2016-09-07 00:00:00") %>%
mutate(Treatment = "Mod Var")
Tank3.1_var <- Tank3.1 %>%
mutate(Temp = Temp + 0.7730094) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-11-10 18:00:00" & DateTime > "2016-09-22 00:00:00") %>%
mutate(Treatment = "Mod Var")
Tank3.1_stress <- Tank3.1 %>%
mutate(Temp = Temp + 0.7730094) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-10 18:00:00") %>%
mutate(Treatment = "Mod Var")
Tank4.2_all <- Tank4.2 %>%
mutate(Temp = Temp + 0.7088613) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-12 00:00:00" & DateTime > "2016-09-07 00:00:00") %>%
mutate(Treatment = "High Var")
Tank4.2_var <- Tank4.2 %>%
mutate(Temp = Temp + 0.7088613) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-11-10 18:00:00" & DateTime > "2016-09-22 00:00:00") %>%
mutate(Treatment = "High Var")
Tank4.2_stress <- Tank4.2 %>%
mutate(Temp = Temp + 0.7088613) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-10 18:00:00") %>%
mutate(Treatment = "High Var")
# Tank 5 = Control 2, not using this treatment so no treatment-specific correction for Tank5's
Tank5.3_all <- Tank5.3 %>%
dplyr::filter(DateTime < "2016-12-12 00:00:00" & DateTime > "2016-09-07 00:00:00") %>%
mutate(Treatment = "control 2")
Tank5.3_var <- Tank5.3 %>%
dplyr::filter(DateTime < "2016-11-10 18:00:00" & DateTime > "2016-09-22 00:00:00") %>%
mutate(Treatment = "control 2")
Tank5.3_stress <- Tank5.3 %>%
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-10 18:00:00") %>%
mutate(Treatment = "control 2")
#### Statistically compare hobo logger data ####
# combine all variability data into one dataframe, exclude control 2 for now
all.hobo.data <- rbind(Tank1.1_var, Tank2.1_var, Tank3.1_var, Tank4.2_var)
library(car)
# Levene test used to test if samples have equal variance
leveneTest(Temp~Treatment, data = all.hobo.data)
# now try https://stackoverflow.com/questions/43646987/multiple-comparison-post-hoc-test-for-levenes-test
# first calculate the median by treatment and add as a column
all.hobo.data <- all.hobo.data %>%
group_by(Treatment) %>%
mutate(temp.med = ifelse(Temp, median(Temp, na.rm=TRUE), ifelse(Temp==NA, NA)))
# then calculate the residual for each temperature
all.hobo.data$temp.med.res<-abs(all.hobo.data$Temp-all.hobo.data$temp.med)
# Then we run an ANOVA, and post-hoc if necessary:
levene.dat.aov<-aov(temp.med.res~Treatment, all.hobo.data)
summary(levene.dat.aov)
TukeyHSD(levene.dat.aov)
#### Combine all hobo variability objects to plot ####
all_temp = rbind(Tank1.1_all, Tank2.1_all, Tank3.1_all, Tank4.2_all)
head(all_temp)
str(all_temp)
all_temp$Treatment = factor(all_temp$Treatment, levels = c("Control","Low Var","Mod Var","High Var"))
all_var = rbind(Tank1.1_var, Tank2.1_var, Tank3.1_var, Tank4.2_var)
head(all_var)
str(all_var)
all_var$Treatment = factor(all_var$Treatment, levels = c("Control","Low Var","Mod Var","High Var"))
all_stress = rbind(Tank1.1_stress, Tank2.1_stress, Tank3.1_stress, Tank4.2_stress)
head(all_stress)
str(all_stress)
all_stress$Treatment = factor(all_stress$Treatment, levels = c("Control","Low Var","Mod Var","High Var"))
cols_treat_reds <- c("Control" = "darkgrey", "Low Var" = "#FF9966", "Mod Var"="#CC3300", "High Var"="#7f0000")
# plot the variability period
str(all_var)
all_var$Treatment = factor(all_var$Treatment, levels = c("High Var", "Mod Var", "Low Var", "Control"))
all_var.plot = all_var %>%
ggplot(aes(x = DateTime_ct, y = Temp, color = Treatment))+
geom_line(aes(color = Treatment), lwd=1, alpha = 0.8)+
scale_color_manual(values = cols_treat_reds)+
ylim(26,34) +
geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
#ggtitle("Control 2") +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-22 00:00:00","2016-11-10 18:00:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-22 00:00:00", "2016-11-10 18:00:00")))+
theme_bw() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
all_var.plot
# plot the whole time course
all_temp$Treatment = factor(all_temp$Treatment, levels = c("High Var", "Mod Var", "Low Var", "Control"))
all_temp.plot = all_temp %>%
ggplot(aes(x = DateTime_ct, y = Temp, color = Treatment))+
annotate("rect", xmin = as.POSIXct("2016-09-07 00:00:00"), xmax = as.POSIXct("2016-09-22 00:00:00"), ymin = - Inf, ymax = Inf, fill = "gray", alpha = 0.3)+
annotate("rect", xmin = as.POSIXct("2016-09-22 00:00:00"), xmax = as.POSIXct("2016-11-10 18:00:00"), ymin = - Inf, ymax = Inf, fill = "orange", alpha = 0.15)+
annotate("rect", xmin = as.POSIXct("2016-11-10 18:00:00"), xmax = as.POSIXct("2016-11-25 00:00:00"), ymin = - Inf, ymax = Inf, fill = "red4", alpha = 0.15)+
annotate("rect", xmin = as.POSIXct("2016-11-25 00:00:00"), xmax = as.POSIXct("2016-12-11 23:55:00"), ymin = - Inf, ymax = Inf, fill = "royalblue4", alpha = 0.15)+
geom_line(aes(color = Treatment), lwd=0.75)+
scale_color_manual(values = cols_treat_reds)+
#geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=.5) +
xlab("Day") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-07 00:00:00", "2016-09-22 00:00:00","2016-11-10 18:00:00","2016-11-14 00:00:00","2016-11-21 00:00:00","2016-11-25 00:00:00", "2016-12-11 23:55:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-07 00:00:00", "2016-12-11 23:55:00")))+
scale_y_continuous(name = "Temperature (°C)", breaks = seq(26,33,1))+
theme_bw()+
#theme(axis.text.x = element_blank())
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
all_temp.plot
# plot a subset of days to zoom in and illustrate what the profiles looked like
all_temp.plot.subset = all_temp %>%
subset(DateTime_ct > "2016-10-30" & DateTime_ct <= "2016-11-02") %>%
ggplot(aes(x = DateTime_ct, y = Temp, color = Treatment))+
annotate("rect", xmin = as.POSIXct(-Inf), xmax = as.POSIXct(Inf), ymin = - Inf, ymax = Inf, fill = "orange", alpha = 0.15)+
geom_line(aes(color = Treatment), lwd=1, alpha = 1)+
scale_color_manual(values = cols_treat_reds)+
scale_y_continuous(name = "Temperature (°C)", breaks = seq(26,33,1))+
xlab("Day") +
theme_bw() +
theme(axis.text.x = element_blank())
#theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
all_temp.plot.subset
Tank1.1_var.nona = Tank1.1_var %>%
drop_na(Temp)
Tank1.1_var.dailystats<-data.frame("DayRange"=tapply(Tank1.1_var.nona$Temp, Tank1.1_var.nona$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(Tank1.1_var.nona$Temp, Tank1.1_var.nona$Day, min),"DayMax"=tapply(Tank1.1_var.nona$Temp, Tank1.1_var.nona$Day, max), "DayMean"=tapply(Tank1.1_var.nona$Temp, Tank1.1_var.nona$Day, mean))
Tank1.1_var.dailystats <- tibble::rownames_to_column(Tank1.1_var.dailystats, "date")
Tank1.1_var.dailystats$treat <- "Control 1"
head(Tank1.1_var.dailystats)
Tank2.1_var.nona = Tank2.1_var %>%
drop_na(Temp)
Tank2.1_var.dailystats<-data.frame("DayRange"=tapply(Tank2.1_var.nona$Temp, Tank2.1_var.nona$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(Tank2.1_var.nona$Temp, Tank2.1_var.nona$Day, min),"DayMax"=tapply(Tank2.1_var.nona$Temp, Tank2.1_var.nona$Day, max), "DayMean"=tapply(Tank2.1_var.nona$Temp, Tank2.1_var.nona$Day, mean))
Tank2.1_var.dailystats <- tibble::rownames_to_column(Tank2.1_var.dailystats, "date")
Tank2.1_var.dailystats$treat <- "Low Var"
head(Tank2.1_var.dailystats)
Tank3.1_var.nona = Tank3.1_var %>%
drop_na(Temp)
Tank3.1_var.dailystats<-data.frame("DayRange"=tapply(Tank3.1_var.nona$Temp, Tank3.1_var.nona$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(Tank3.1_var.nona$Temp, Tank3.1_var.nona$Day, min),"DayMax"=tapply(Tank3.1_var.nona$Temp, Tank3.1_var.nona$Day, max), "DayMean"=tapply(Tank3.1_var.nona$Temp, Tank3.1_var.nona$Day, mean))
Tank3.1_var.dailystats <- tibble::rownames_to_column(Tank3.1_var.dailystats, "date")
Tank3.1_var.dailystats$treat <- "Mod Var"
head(Tank3.1_var.dailystats)
Tank4.2_var.nona = Tank4.2_var %>%
drop_na(Temp)
Tank4.2_var.dailystats<-data.frame("DayRange"=tapply(Tank4.2_var.nona$Temp, Tank4.2_var.nona$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(Tank4.2_var.nona$Temp, Tank4.2_var.nona$Day, min),"DayMax"=tapply(Tank4.2_var.nona$Temp, Tank4.2_var.nona$Day, max), "DayMean"=tapply(Tank4.2_var.nona$Temp, Tank4.2_var.nona$Day, mean))
Tank4.2_var.dailystats <- tibble::rownames_to_column(Tank4.2_var.dailystats, "date")
Tank4.2_var.dailystats$treat <- "High Var"
head(Tank4.2_var.dailystats)
# combine daily variability stats for all loggers
library(Rmisc)
var.dailystats.all = rbind(Tank1.1_var.dailystats,Tank2.1_var.dailystats,Tank3.1_var.dailystats,Tank4.2_var.dailystats)
str(var.dailystats.all)
var.dailystats.all$treat = factor(var.dailystats.all$treat, levels = c("Control 1","Low Var","Mod Var","High Var"))
summarySE(data = var.dailystats.all, measurevar = "DayRange", groupvar = "treat")
summarySE(data = var.dailystats.all, measurevar = "DayMean", groupvar = "treat")
summarySE(data = var.dailystats.all, measurevar = "DayMax", groupvar = "treat")
summarySE(data = var.dailystats.all, measurevar = "DayMin", groupvar = "treat")
#### HOBO DAILY STATS & PLOTS####
# daily range
aov.dtv=aov(DayRange~treat, data=var.dailystats.all)
all_stress_2
all_stress_2 <- all_stress %>%
#dplyr::filter(DateTime < "2016-11-21 00:00:00" & DateTime > "2016-11-14 00:00:00") %>%# to look at just stress
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-25 00:00:00") %>%# to look at just recivert
summarise_at(vars(Temp), list(mean_temp = mean), na.rm=TRUE)
all_stress_2
all_stress_2 <- all_stress %>%
dplyr::filter(DateTime < "2016-11-21 00:00:00" & DateTime > "2016-11-14 00:00:00") %>%# to look at just stress
#dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-25 00:00:00") %>%# to look at just recovery
summarise_at(vars(Temp), list(mean_temp = mean), na.rm=TRUE)
all_stress_2
all_stress_2 = all_stress %>%
dplyr::filter(DateTime < "2016-11-21 00:00:00" & DateTime > "2016-11-14 00:00:00") # to look at just stress
head(all_stress_2)
all_stress_2 <- all_stress %>%
dplyr::filter(DateTime < "2016-11-21 00:00:00" & DateTime > "2016-11-14 00:00:00") %>%# to look at just stress
#dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-25 00:00:00") %>%# to look at just recovery
summarise_at(vars(Temp), list(mean_temp = mean, sd_temp = sd, se_temp=sd_temp(.)/sqrt(n())), na.rm=TRUE)
all_stress_2 <- all_stress %>%
dplyr::filter(DateTime < "2016-11-21 00:00:00" & DateTime > "2016-11-14 00:00:00") %>%# to look at just stress
#dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-25 00:00:00") %>%# to look at just recovery
summarise_at(vars(Temp), list(mean_temp = mean, sd_temp = sd, se_temp=sd(.)/sqrt(n())), na.rm=TRUE)
all_stress_2
all_stress_2 = all_stress %>%
dplyr::filter(DateTime < "2016-11-21 00:00:00" & DateTime > "2016-11-14 00:00:00") %>%# to look at just stress
#dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-25 00:00:00") %>%# to look at just recovery
summarise_at(vars(Temp), list(mean_temp = mean, sd_temp = sd), na.rm=TRUE)
all_stress_2
# Find overall mean during heat challenge and recovery periods:
library(plotrix)
all_stress_2 = all_stress %>%
dplyr::filter(DateTime < "2016-11-21 00:00:00" & DateTime > "2016-11-14 00:00:00") %>%# to look at just stress
#dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-25 00:00:00") %>%# to look at just recovery
summarise_at(vars(Temp), list(mean_temp = mean, sd_temp = sd, se_temp = std.error), na.rm=TRUE)
all_stress_2
all_stress_2 = all_stress %>%
dplyr::filter(DateTime < "2016-11-21 00:00:00" & DateTime > "2016-11-14 00:00:00") %>%# to look at just stress
#dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-25 00:00:00") %>%# to look at just recovery
summarise_at(vars(Temp), list(mean_temp = mean, sd_temp = sd, se_temp = std.error), na.rm=TRUE)
all_stress_2
all_stress_2 = all_stress %>%
#dplyr::filter(DateTime < "2016-11-21 00:00:00" & DateTime > "2016-11-14 00:00:00") %>%# to look at just stress
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-25 00:00:00") %>%# to look at just recovery
summarise_at(vars(Temp), list(mean_temp = mean, sd_temp = sd, se_temp = std.error), na.rm=TRUE)
all_stress_2

ifelse(pam_phys$origsitecode == 'I3', 'CI',
ifelse(pam_phys$origsitecode == 'I4', 'PD',
ifelse(pam_phys$origsitecode == 'O2', 'BS',
ifelse(pam_phys$origsitecode == 'O3', 'CA',
'BN')))))
pam_phys$sitename <- as.factor(pam_phys$sitename)
# make new nubbin IDs based on the new, more informative site codes
# extract the genotype and frag number
pam_phys$fragid <- substr(pam_phys$frag,3,5)
# add inshore/offshore designation
pam_phys$reef <- substr(pam_phys$frag,1,1)
pam_phys$reef <- ifelse(pam_phys$reef == 'O', 'Outer Reef', 'Inner Reef')
pam_phys$reef <- as.factor(pam_phys$reef)
pam_phys$genet <- substr(pam_phys$fragid,1,1)
#create a new column of combined genotype and site for stats later
pam_phys = pam_phys %>%
unite(gen_site, c(origsitecode,genet), sep = "", remove = FALSE) %>%
mutate(gen_site = as.factor(gen_site))
# re-level and re-name treatment
pam_phys$treat <- factor(pam_phys$treat, levels = c("init", "1", "2", "3","4","5"))
levels(pam_phys$treat) <- c("Initial","Control","Low Var","Mod Var","High Var","Control 2")
pam_phys$treat <- as.factor(pam_phys$treat)
# calculate average PAM at each time point
pam_phys = pam_phys %>%
mutate(paavgpam=rowMeans(.[ , c("papamrec1","papamrec2","papamrec3")], na.rm=TRUE)) %>%
mutate(t0avgpam=rowMeans(.[ , c("t0pamrec1","t0pamrec2","t0pamrec3")], na.rm=TRUE)) %>%
mutate(t1avgpam=rowMeans(.[ , c("t1pamrec1","t1pamrec2","t1pamrec3")], na.rm=TRUE)) %>%
mutate(t2avgpam=rowMeans(.[ , c("t2pamrec1","t2pamrec2","t2pamrec3")], na.rm=TRUE)) %>%
mutate(t3avgpam=rowMeans(.[ , c("t3pamrec1","t3pamrec2","t3pamrec3")], na.rm=TRUE)) %>%
mutate(t4avgpam=rowMeans(.[ , c("t4pamrec1","t4pamrec2","t4pamrec3")], na.rm=TRUE)) %>%
mutate(t5avgpam=rowMeans(.[ , c("t5pamrec1","t5pamrec2","t5pamrec3")], na.rm=TRUE)) %>%
mutate(t6avgpam=rowMeans(.[ , c("t6pamrec1","t6pamrec2","t6pamrec3")], na.rm=TRUE)) %>%
mutate(t7avgpam=rowMeans(.[ , c("t7pamrec1","t7pamrec2","t7pamrec3")], na.rm=TRUE)) %>%
mutate(t8avgpam=rowMeans(.[ , c("t8pamrec1","t8pamrec2","t8pamrec3")], na.rm=TRUE)) %>%
mutate(t9avgpam=rowMeans(.[ , c("t9pamrec1","t9pamrec2","t9pamrec3")], na.rm=TRUE)) %>%
mutate(pamdiff=t9avgpam-t3avgpam)
# explore difference in PAM values from the end of recovery period to start of the heat stress ramp
str(pam_phys)
plot(x=pam_phys$sitename,y=pam_phys$pamdiff, data = pam_phys)
# summarySE doesn't work with NA's, so use this!!
phys_pam_wide = pam_phys %>%
filter(complete.cases(paavgpam,t0avgpam,t1avgpam,t2avgpam,t3avgpam,t4avgpam,t5avgpam,t6avgpam,t7avgpam,t8avgpam,t9avgpam)) %>% #drop any row that has an NA for any time point
filter(treat!="Control 2") %>%
select(frag,treat,reef,gen_site,sitename,paavgpam,t0avgpam,t1avgpam,t2avgpam,t3avgpam,t4avgpam,t5avgpam,t6avgpam,t7avgpam,t8avgpam,t9avgpam) %>%
filter(gen_site != "I4G") # remove clone
# transform the data to long format so time point is its own column
phys_pam_long = phys_pam_wide %>%
gather(time, pam, paavgpam:t9avgpam)
# re-level and re-name treatment
phys_pam_long$time <- as.factor(phys_pam_long$time)
levels(phys_pam_long$time) <- c("-18","0", "15","35","45","54","61","65","70","74","79")
# merge with lineage info for later plotting
lineages = read.csv("/Users/hannahaichelman/Documents/BU/TVE/2bRAD/Analysis/tuftscustompipeline_denovo_nosyms/tve_lineages_noclones.csv")
pam_phys_all_lin <- left_join(phys_pam_long, lineages, by = "gen_site")
pam_phys_all_lin$lineage = as.factor(pam_phys_all_lin$lineage)
# merge with its2 types for plotting
its2_types = read.csv("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/ITS2.dominanttype.csv") %>%
select(frag, dominant_type)
pam_phys_all_lin <- left_join(pam_phys_all_lin, its2_types, by = "frag")
pam_phys_all_lin$dominant_type = as.factor(pam_phys_all_lin$dominant_type)
# merge with its2 divs
its2_divs = read.csv("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/ITS2.dominantDIVs.csv") %>%
select(frag, dominant_div)
pam_phys_all_lin <- left_join(pam_phys_all_lin, its2_divs, by = "frag")
# filter to only include T3-T9 for plotting and stats
phys_pam_all_lin_plots = pam_phys_all_lin %>%
filter(time != "-18" & time != "0" & time != "15" & time != "35")
phys_pam_2_lin_plots = phys_pam_all_lin_plots %>%
filter(is.na(lineage) | lineage!="L3") # want to keep NA values for lineage here since they still have other info, will remove na's for lineage specific plots
phys_pam_lin1 = phys_pam_2_lin_plots %>%
dplyr::filter(lineage == "L1")
phys_pam_lin2 = phys_pam_2_lin_plots %>%
dplyr::filter(lineage == "L2")
#SummarySE to format data for plotting - dtv treatment
pam_means_treat_all_lin <- summarySE(phys_pam_all_lin_plots, measurevar="pam", groupvars=c("treat","time"))
pam_means_treat_all_lin$time <- as.numeric(as.character(pam_means_treat_all_lin$time))
pam_means_treat_2_lin <- summarySE(phys_pam_2_lin_plots, measurevar="pam", groupvars=c("treat","time"))
pam_means_treat_2_lin$time <- as.numeric(as.character(pam_means_treat_2_lin$time))
pam_means_treat_2_lin
phys_pam_2_lin_plots
head(phys_pam_2_lin_plots)
pam_means_treat_2_lin <- summarySE(phys_pam_2_lin_plots, measurevar="pam", groupvars=c("treat","time","gen_site"))
pam_means_treat_2_lin
pam_means_treat_2_lin <- summarySE(phys_pam_2_lin_plots, measurevar="pam", groupvars=c("treat","time"))
pam_means_treat_2_lin$time <- as.numeric(as.character(pam_means_treat_2_lin$time))
pam_means_treat_2_lin
library(ggpubr)
library(ggfortify)
library(ggplot2)
library(cluster)
library(FactoMineR) # this is my favorite PCA package! lots of options for visuals and summary stats
library(factoextra)
library(corrplot)
library(dplyr)
#library(ggbiplot)
library(cowplot)
library(vegan)
# try exporting data files as csv and see what we get
t0_pca = read.csv("/Users/hannahaichelman/Documents/BU/TVE/PCAs/t0_full_log.csv")
end_pca = read.csv("/Users/hannahaichelman/Documents/BU/TVE/PCAs/end_full_log.csv")
# format t0 physiology data:
str(t0_pca)
t0_pca$sitename <- as.factor(t0_pca$sitename)
t0_pca$treat <- as.factor(t0_pca$treat)
t0_pca$reef <- as.factor(t0_pca$reef)
# add in genet id and combine with lineage dataframe to include 2bRAD population data in our T0 PCAs
t0_pca$gen_site <- substr(t0_pca$frag,1,3)
lineages = read.csv("/Users/hannahaichelman/Documents/BU/TVE/2bRAD/Analysis/tuftscustompipeline_denovo_nosyms/tve_lineages_noclones.csv")
t0_pca_lineage <- left_join(t0_pca, lineages, by = "gen_site")
colnames(t0_pca_lineage)[colnames(t0_pca_lineage)=="hcarb_mgcm2"] <-"hcarb"
colnames(t0_pca_lineage)[colnames(t0_pca_lineage)=="scarb_mgcm2"] <-"scarb"
colnames(t0_pca_lineage)[colnames(t0_pca_lineage)=="prot_mgcm2"] <-"prot"
colnames(t0_pca_lineage)[colnames(t0_pca_lineage)=="sym_cm2"] <-"syms"
colnames(t0_pca_lineage)[colnames(t0_pca_lineage)=="avgtiss"] <-"tiss"
colnames(t0_pca_lineage)[colnames(t0_pca_lineage)=="corallite.avg.poly.mm2"] <-"corr_sa"
t0_pca_all_lin = t0_pca_lineage %>%
drop_na(lineage)
t0_pca_2_lin = t0_pca_all_lin %>%
filter(is.na(lineage) | lineage!="L3") # want to keep NA values for lineage here since they still have other info, will remove na's for lineage specific plots
t0_pca_lineage_CI = t0_pca_2_lin %>%
filter(sitename == "CI")
t0_pca_proposed = t0_pca_lineage %>%
filter(sitename != "SP") %>%
filter(sitename != "BN") %>%
filter(sitename != "BS") %>%
filter(sitename != "CA") %>%
filter(frag != "I3C6") # this fragment is from Cristobal, looks like a loser across all measures so removing
# now end of variability pca data:
str(end_pca)
end_pca$sitename <- as.factor(end_pca$sitename)
end_pca$treat <- as.factor(end_pca$treat)
end_pca$reef <- as.factor(end_pca$reef)
# re-level and re-name treatment
end_pca$treat <- factor(end_pca$treat, levels = c("Control","Low Var","Mod Var","High Var"))
# add in genet id and combine with lineage dataframe to include 2bRAD population data in our T0 PCAs
end_pca$gen_site <- substr(end_pca$frag,1,3)
end_pca_lineage <- left_join(end_pca, lineages, by = "gen_site")
end_pca_lineage$lineage <- as.factor(end_pca_lineage$lineage)
# re-name columns for legibility on plots
colnames(end_pca_lineage)[colnames(end_pca_lineage)=="hcarb_mgcm2"] <-"hcarb"
colnames(end_pca_lineage)[colnames(end_pca_lineage)=="scarb_mgcm2"] <-"scarb"
colnames(end_pca_lineage)[colnames(end_pca_lineage)=="prot_mgcm2"] <-"prot"
colnames(end_pca_lineage)[colnames(end_pca_lineage)=="sym_cm2"] <-"syms"
colnames(end_pca_lineage)[colnames(end_pca_lineage)=="T2_T0_perc_2"] <-"growth"
# add in dominant symbiont type dataframe
its2_types = read.csv("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/ITS2.dominanttype.csv") %>%
select(frag, dominant_type) #%>%
#mutate(D1_1 = D1_sum+1) %>%
#select(-D1_sum) %>%
#mutate(propD1 = log(D1_1)) %>%
#select(-D1_1)
its2_types$dominant_type = as.factor(its2_types$dominant_type)
end_pca_lin_sym <- left_join(end_pca_lineage, its2_types, by = "frag")
str(end_pca_lin_sym)
end_pca_all_lin = end_pca_lin_sym %>%
drop_na(lineage) %>%
#drop_na(propD1) %>%
drop_na(dominant_type) %>%
unite(lin_sym, c(lineage,dominant_type), sep = "_", remove = FALSE) %>% # make new lineage_dominant type combined factor
mutate(lin_sym = as.factor(lin_sym)) %>%
select(frag, treat, sitename, reef, gen_site, lineage, dominant_type, lin_sym, hcarb, scarb, prot, pam, syms, chlA, growth)
end_pca_2_lin = end_pca_all_lin %>%
filter(lineage!="L3")
end_pca_lineage_CI = end_pca_2_lin %>%
filter(sitename == "CI")
t0_pca_all_lin
end_pca_all_lin
dim(end_pca_all_lin)
head(end_pca_all_lin)
end_pca_all_lin$gen_site
unique(end_pca_all_lin$gen_site)
#work computer
setwd("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/16S_PreStress/")
library(ggplot2)
library(cowplot)
library(phyloseq)
library(car)
library(ggpubr)
library(vegan)
library(dada2)
install.packages("dada2")
samdf <- read.csv("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/16S_PreStress/samdf_noL3.csv",header=TRUE) %>%
select(-X)
row.names(samdf) <- samdf$frag
load("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/16S_PreStress/taxa2.Rdata")
#rarefied version
ps.rare = readRDS("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/16S_PreStress/phyloseq.rarefied.1k.rds")
seqtab.rare <- data.frame(ps.rare@otu_table)
seqtab.rare <- data.frame(ps.rare@otu_table)
samdf.rare <- data.frame(ps.rare@sam_data)
a
# can skip to here once you have made the .Rdata files above
load("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/16S_PreStress/ps.clean.Rdata")
load("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/16S_PreStress/ps.rare.Rdata")
load("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/16S_PreStress/ps.trim.rare.Rdata")
load("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/16S_PreStress/ps.trim.Rdata")
# remove Control 2, and lineage NA's
ps.clean <- subset_samples(ps.clean,(treat!="Control 2"))
ps.clean <- subset_samples(ps.clean,(!is.na(lineage)))
ps.clean <- subset_samples(ps.clean,(!is.na(treat)))
ps.trim.rare <- subset_samples(ps.trim.rare,(treat!="Control 2"))
ps.trim.rare <- subset_samples(ps.trim.rare,(!is.na(lineage)))
ps.trim.rare <- subset_samples(ps.trim.rare,(!is.na(treat)))
ps.trim <- subset_samples(ps.trim,(treat!="Control 2"))
ps.trim <- subset_samples(ps.trim,(!is.na(lineage)))
ps.trim <- subset_samples(ps.trim,(!is.na(treat)))
ps.rare <- subset_samples(ps.rare,(treat!="Control 2"))
ps.rare <- subset_samples(ps.rare,(!is.na(lineage)))
ps.rare <- subset_samples(ps.rare,(!is.na(treat)))
df <- data.frame(estimate_richness(ps.clean, split=TRUE, measures=c("Shannon","InvSimpson","Observed")))
df <- data.frame(estimate_richness(ps.clean, split=TRUE, measures=c("Shannon","InvSimpson","Observed")))
df$frag <- rownames(df)
df.div <- merge(df,samdf,by="frag") #add sample data
#shannon diversity divided by species richness
df.div$even <- df.div$Shannon/(log(df.div$Observed))
str(df.div)
df.div$treat = as.factor(df.div$treat)
df.div$treat = factor(df.div$treat, levels = c("Control", "Low Var","Mod Var","High Var"))
df.div$lineage = as.factor(df.div$lineage)
df.div$sitename = as.factor(df.div$sitename)
df.div
View(df.div)
df.lin = summarySE(df.div, measurevar = "Shannon", groupvars = "lineage")
df.lin
df.lin = summarySE(df.div, measurevar = "InvSimpson", groupvars = "lineage")
df.lin
df.lin = summarySE(df.div, measurevar = "InvSimpson", groupvars = "treat")
df.lin
ps.trim.rare
ps.clean
ps.acc
ps.core
# un-comment the drop_na() corresponding to the time point of data you want to look at.
calc_phys2 = calc_phys %>%
#drop_na(T3_T2_perc) %>%
drop_na(T2_T0_perc) %>%
#drop_na(T2_T0_g_cm2_day) %>%
filter(treat!="Control 2") %>%
filter(gen_site != "I4G") # clone with I4F, remove from dataset
# merge with lineage info for later plotting
lineages = read.csv("/Users/hannahaichelman/Documents/BU/TVE/2bRAD/Analysis/tuftscustompipeline_denovo_nosyms/tve_lineages_noclones.csv")
calc_phys_all_lin <- left_join(calc_phys2, lineages, by = "gen_site")
calc_phys_all_lin$lineage = as.factor(calc_phys_all_lin$lineage)
## combine with dominant symbiont type info
# merge with its2 divs
its2_divs = read.csv("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/ITS2.dominantDIVs.csv") %>%
select(frag, dominant_div)
calc_phys_all_lin <- left_join(calc_phys_all_lin, its2_divs, by = "frag")
# merge with majority its type info
its2_types = read.csv("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/ITS2.dominanttype.csv") %>%
select(frag, dominant_type)
calc_phys_all_lin <- left_join(calc_phys_all_lin, its2_types, by = "frag")
head(calc_phys_all_lin)
calc_phys_all_lin$dominant_type = as.factor(calc_phys_all_lin$dominant_type)
calc_phys_2_lin = calc_phys_all_lin %>%
filter(is.na(lineage) | lineage!="L3") # want to keep NA values for lineage here since they still have other info, will remove na's for lineage specific plots
# exploratory figure
#scatter plot with linear regression and confidence interval
ggplot(calc_phys, aes(treat, T2_T0_perc, color = sitename))+
geom_point()+
geom_smooth(aes(group=sitename), method=lm)+
theme_classic()
m1 <- lmer(T2_T0_perc ~ treat+lineage + (1|gen_site), data = calc_phys_2_lin, REML=TRUE)
summary(m1)
# now let's do some more looking into the model
library(sjPlot)
library(effects)
library(glmmTMB)
plot_model(m1, "eff", terms="treat")
plot_model(m1, "eff", terms="lineage")
plot_model(m1, type="re")
#Check model fit
library(performance)
library(patchwork)
r2(m1) #get r2 and adjusted r2
check_model(m1) #check assumptions and model fit
t0_pca_2_lin
head(t0_pca_2_lin)
dim(t0_pca_all_lin)
dim(t0_pca_2_lin)
dim(end_pca_2_lin)
samdf <- read.csv("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/16S_PreStress/samdf_noL3.csv",header=TRUE) %>%
select(-X)
row.names(samdf) <- samdf$frag
load("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/16S_PreStress/taxa2.Rdata")
ps.rare = readRDS("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/16S_PreStress/phyloseq.rarefied.1k.rds")
seqtab.rare <- data.frame(ps.rare@otu_table)
samdf.rare <- data.frame(ps.rare@sam_data)
load("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/16S_PreStress/taxa2.Rdata")
ps.rare <- phyloseq(otu_table(seqtab.rare, taxa_are_rows=FALSE),
sample_data(samdf.rare),
tax_table(taxa2))
ps.rare
ps.clean = readRDS("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/16S_PreStress/phyloseq.cleanest.rds")
seqtab.clean <- data.frame(ps.clean@otu_table)
samdf.clean <- data.frame(ps.clean@sam_data)
ps.clean <- phyloseq(otu_table(seqtab.clean, taxa_are_rows=FALSE),
sample_data(samdf.clean),
tax_table(taxa2))
ps.clean
ps.trim.rare = readRDS("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/16S_PreStress/phyloseq.trim.rare.rds")
seqtab.trim.rare <- data.frame(ps.trim.rare@otu_table)
samdf.trim.rare <- data.frame(ps.trim.rare@sam_data)
ps.trim.rare <- phyloseq(otu_table(seqtab.trim.rare, taxa_are_rows=FALSE),
sample_data(samdf.trim.rare),
tax_table(taxa2))
ps.trim.rare
ps.trim = readRDS("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/16S_PreStress/phyloseq.cleanest.trim.rds")
seqtab.trim <- data.frame(ps.trim@otu_table)
samdf.trim <- data.frame(ps.trim@sam_data)
ps.trim <- phyloseq(otu_table(seqtab.trim, taxa_are_rows=FALSE),
sample_data(samdf.trim),
tax_table(taxa2))
ps.trim
# can skip to here once you have made the .Rdata files above
load("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/16S_PreStress/ps.clean.Rdata")
load("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/16S_PreStress/ps.rare.Rdata")
load("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/16S_PreStress/ps.trim.rare.Rdata")
load("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/16S_PreStress/ps.trim.Rdata")
# remove Control 2, and lineage NA's
ps.clean <- subset_samples(ps.clean,(treat!="Control 2"))
ps.clean <- subset_samples(ps.clean,(!is.na(lineage)))
ps.clean <- subset_samples(ps.clean,(!is.na(treat)))
ps.trim.rare <- subset_samples(ps.trim.rare,(treat!="Control 2"))
ps.trim.rare <- subset_samples(ps.trim.rare,(!is.na(lineage)))
ps.trim.rare <- subset_samples(ps.trim.rare,(!is.na(treat)))
ps.trim <- subset_samples(ps.trim,(treat!="Control 2"))
ps.trim <- subset_samples(ps.trim,(!is.na(lineage)))
ps.trim <- subset_samples(ps.trim,(!is.na(treat)))
ps.rare <- subset_samples(ps.rare,(treat!="Control 2"))
ps.rare <- subset_samples(ps.rare,(!is.na(lineage)))
ps.rare <- subset_samples(ps.rare,(!is.na(treat)))
df <- data.frame(estimate_richness(ps.clean, split=TRUE, measures=c("Shannon","InvSimpson","Observed")))
df$frag <- rownames(df)
df.div <- merge(df,samdf,by="frag") #add sample data
#shannon diversity divided by species richness
df.div$even <- df.div$Shannon/(log(df.div$Observed))
str(df.div)
df.div$treat = as.factor(df.div$treat)
df.div$treat = factor(df.div$treat, levels = c("Control", "Low Var","Mod Var","High Var"))
df.div$lineage = as.factor(df.div$lineage)
df.div$sitename = as.factor(df.div$sitename)
cols_site_diverging <- c("CI" = "#543005", "PD"= "#bf812d",  "SP"= "#dfc27d",  "BN" = "#003c30", "BS"= "#35978f", "CA"= "#80cdc1")
gg.site.sha <- ggplot(df.div,aes(x=sitename,y=Shannon,color=sitename))+
geom_boxplot(outlier.shape=NA)+
scale_color_manual(values=cols_site_diverging)+
geom_jitter(alpha=0.5)+
ylab("Shannon index")+
xlab("Site")+
theme_bw()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1), axis.title.x = element_blank(), legend.position = "none")
gg.site.sha
#plotting lineages
cols_lineage <- c("L1" = "#3f007d", "L2" = "#807dba")
df.div.lin = df.div %>%
drop_na(lineage)
gg.lin.sh <- ggplot(df.div.lin, aes(x=lineage, y=Shannon,color=lineage))+
geom_boxplot(outlier.shape=NA)+
scale_colour_manual(values=cols_lineage)+
geom_jitter(alpha=0.5)+
xlab("Lineage")+
ylab("Shannon index")+
theme_bw()+
#guides(color=guide_legend(title="Reef zone"),shape=guide_legend(title="Reef zone"))+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1), axis.title.x = element_blank(), legend.position = "none")
gg.lin.sh
#plotting lineages
cols_treat_reds <- c("darkgrey", "#FF9966","#CC3300","#7f0000")
df.div.treat = df.div %>%
drop_na(treat)
gg.treat.sh <- ggplot(df.div.treat, aes(x=treat, y=Shannon,color=treat))+
geom_boxplot(outlier.shape=NA)+
scale_colour_manual(values=cols_treat_reds)+
geom_jitter(alpha=0.5)+
xlab("Treatment")+
ylab("Shannon index")+
theme_bw()+
#guides(color=guide_legend(title="Reef zone"),shape=guide_legend(title="Reef zone"))+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1), axis.title.x = element_blank(), legend.position = "none")
gg.treat.sh
#facet wrap by lineage
df.div.treat.lin = df.div.treat %>%
drop_na(lineage)
gg.treat.lin.sh <- ggplot(df.div.treat.lin, aes(x=treat, y=Shannon,color=treat))+
geom_boxplot(outlier.shape=NA)+
scale_colour_manual(values=cols_treat_reds)+
geom_jitter(alpha=0.5)+
xlab("Treatment")+
ylab("Shannon index")+
theme_bw()+
#guides(color=guide_legend(title="Reef zone"),shape=guide_legend(title="Reef zone"))+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1), axis.title.x = element_blank(), legend.position = "none")+
facet_wrap(~lineage)
gg.treat.lin.sh
#Shannon
shapiro.test(df.div$Shannon) # fine
leveneTest(df.div$Shannon~treat,data=df.div) #fine
a.div <- aov(Shannon~treat+lineage,data=df.div)
summary(a.div) #p=0.449
TukeyHSD(a.div) #ns for raw, rarefied, trimmed, or not
summary(a.div) #p=0.449
TukeyHSD(a.div) #ns for raw, rarefied, trimmed, or not
gg.site.sim <- ggplot(df.div,aes(x=sitename,y=InvSimpson,color=sitename))+
geom_boxplot(outlier.shape=NA)+
scale_color_manual(values=cols_site_diverging)+
geom_jitter(alpha=0.5)+
ylab("Inv. Simpson index")+
xlab("Site")+
theme_bw()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1), axis.title.x = element_blank(), legend.position = "none")
gg.site.sim
df.div.lin = df.div %>%
drop_na(lineage)
gg.lin.sim <- ggplot(df.div.lin, aes(x=lineage, y=InvSimpson,color=lineage))+
geom_boxplot(outlier.shape=NA)+
scale_colour_manual(values=cols_lineage)+
geom_jitter(alpha=0.5)+
xlab("Lineage")+
ylab("Inv. Simpson index")+
theme_bw()+
#guides(color=guide_legend(title="Reef zone"),shape=guide_legend(title="Reef zone"))+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1), axis.title.x = element_blank(), legend.position = "none")
gg.lin.sim
#plotting treatment
gg.treat.sim <- ggplot(df.div.treat, aes(x=treat, y=InvSimpson,color=treat))+
geom_boxplot(outlier.shape=NA)+
scale_colour_manual(values=cols_treat_reds)+
geom_jitter(alpha=0.5)+
xlab("Treatment")+
ylab("Inv. Simpson index")+
theme_bw()+
#guides(color=guide_legend(title="Reef zone"),shape=guide_legend(title="Reef zone"))+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1), axis.title.x = element_blank(), legend.position = "none")
gg.treat.sim
gg.treat.lin.sim <- ggplot(df.div.treat.lin, aes(x=treat, y=InvSimpson,color=treat))+
geom_boxplot(outlier.shape=NA)+
scale_colour_manual(values=cols_treat_reds)+
geom_jitter(alpha=0.5)+
xlab("Treatment")+
ylab("Inv. Simpson index")+
theme_bw()+
#guides(color=guide_legend(title="Reef zone"),shape=guide_legend(title="Reef zone"))+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1), axis.title.x = element_blank(), legend.position = "none")+
facet_wrap(~lineage)
gg.treat.lin.sim
#simpson
shapiro.test(df.div$InvSimpson) #not normal
df.div$si.log <- log(df.div$InvSimpson)
shapiro.test(df.div$si.log) #fine
leveneTest(df.div$si.log~treat,data=df.div) #fine
a.div <- aov(si.log~treat+lineage,data=df.div)
summary(a.div) #p=0.603
TukeyHSD(a.div) #nothing, rarefied or not
TukeyHSD(a.div) #nothing, rarefied or not
gg.site.obs <- ggplot(df.div,aes(x=sitename,y=Observed,color=sitename))+
geom_boxplot(outlier.shape=NA)+
scale_color_manual(values=cols_site_diverging)+
geom_jitter(alpha=0.5)+
ylab("ASV richness")+
xlab("Site")+
theme_bw()+
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1), axis.title.x = element_blank(), legend.position = "none")
gg.site.obs
#otu richness
shapiro.test(df.div$Observed) #nope
df.div$obs.log <- log(df.div$Observed)
shapiro.test(df.div$obs.log) #still no...
leveneTest(df.div$obs.log~treat,data=df.div) #fine
a.div <- aov(obs.log~treat+lineage,data=df.div)
summary(a.div) #ptreat=0.0918, plineage=0.7766
TukeyHSD(a.div) #no differences
#evenness
shapiro.test(df.div$even) #nope
leveneTest(df.div$even~treat,data=df.div) #fine
a.div <- aov(even~treat+lineage,data=df.div)
summary(a.div) #ptreat=0.337, plineage=0.509
TukeyHSD(a.div) #no differences, rarefied or not
## Raw (cleaned)
ps = readRDS("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/ps.its2.RDS")
seq.ps <- data.frame(ps@otu_table)
samdf.ps <- data.frame(ps@sam_data)
dist.ps <- vegdist(seq.ps)
## Relative abundance
# Report this since it is the data used for making the PCA's
ps.cleanest.rel = readRDS("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/ps.its2.rel.RDS")
# dispersion by treatment
seq.ps <- data.frame(ps.cleanest.rel@otu_table)
samdf.ps <- data.frame(ps.cleanest.rel@sam_data)
dist.ps <- vegdist(seq.ps)
bet.ps <- betadisper(dist.ps,samdf.ps$treat)
anova(bet.ps) #p=0.8568
#             Df  Sum Sq   Mean Sq F value Pr(>F)
# Groups      3 0.00413 0.0013761  0.2562 0.8568
# Residuals 152 0.81649 0.0053716
permutest(bet.ps,pairwise=TRUE,permutations=999) # all ns
plot(bet.ps)
# by sitename
bet.ps <- betadisper(dist.ps,samdf.ps$sitename)
anova(bet.ps) #p=0.1152
#             Df  Sum Sq Mean Sq F value Pr(>F)
# Groups      5  1.3691 0.27382  1.8048 0.1152
# Residuals 150 22.7571 0.15171
permutest(bet.ps,pairwise=TRUE,permutations=999) # CI-BS, CI-CA, PD-CA significant differences
plot(bet.ps)
# by lineage
bet.ps <- betadisper(dist.ps,samdf.ps$lineage)
anova(bet.ps) #p=0.3339
#             Df Sum Sq  Mean Sq F value Pr(>F)
# Groups      1 0.0356 0.035633  0.9397 0.3339
# Residuals 154 5.8397 0.037920
plot(bet.ps)
adonis2(formula = seq.ps ~ treat + sitename + lineage, data = samdf.ps, permutations = 999)

t0sastan1, t0sastan2, t0sastan3, t0sarec1, t0sarec2, t0sarec3,
t3sastan1, t3sastan2, t3sastan3, t3sarec1, t3sarec2, t3sarec3,
pabwrec1,pabwrec2,pabwrec3,t0bwrec1, t0bwrec2,t0bwrec3,t1bwrec1, t1bwrec2,t1bwrec3,t2bwrec1, t2bwrec2,t2bwrec3,t3bwrec1, t3bwrec2,t3bwrec3) %>%
mutate(treat = as.factor(treat), blastvol = as.numeric(blastvol)) %>%
mutate_at(c(6:23), as.numeric) %>%
dplyr::filter(frag!="I2A12", frag!="I2A7", frag!="O4D8", frag!="I3E10", frag!="I3I10") %>% #these frags are being removed because they were duplicate genotypes within treatment and had the most complete information of the two
dplyr::filter(frag!="O2F1", frag!="O4G7", frag!="O2I3", frag!="O3H3", frag!="I3D8", frag!="O3F4", frag!="O3G10", frag!="O3F3", frag!="I4F8") #these frags are being removed because they were unexplainable outliers with weird weight values
#calculate surface area of the coral fragments
calc_phys$SAcm2_t0 <- (4*((calc_phys$t0sarec1+calc_phys$t0sarec2+calc_phys$t0sarec3)/3))/((calc_phys$t0sastan1+calc_phys$t0sastan2+calc_phys$t0sastan3)/3)
calc_phys$SAcm2_t2 <- (4*((calc_phys$t2sarec1+calc_phys$t2sarec2+calc_phys$t2sarec3)/3))/((calc_phys$t2sastan1+calc_phys$t2sastan2+calc_phys$t2sastan3)/3)
calc_phys$SAcm2_t3 <- (4*((calc_phys$t3sarec1+calc_phys$t3sarec2+calc_phys$t3sarec3)/3))/((calc_phys$t3sastan1+calc_phys$t3sastan2+calc_phys$t3sastan3)/3)
#add in descriptive information for coral samples
calc_phys$origsitecode <- substr(calc_phys$frag, 1, 2)
calc_phys$origsitecode <- as.factor(calc_phys$origsitecode)
# add in descriptive site name with inshore/offshore indicator
calc_phys$sitename <- ifelse(calc_phys$origsitecode == 'I2', 'SP',
ifelse(calc_phys$origsitecode == 'I3', 'CI',
ifelse(calc_phys$origsitecode == 'I4', 'PD',
ifelse(calc_phys$origsitecode == 'O2', 'BS',
ifelse(calc_phys$origsitecode == 'O3', 'CA',
'BN')))))
calc_phys$sitename <- as.factor(calc_phys$sitename)
# extract the genotype and fragment number
calc_phys$fragid <- substr(calc_phys$frag,3,5)
# add inshore/offshore designation
calc_phys$reef <- substr(calc_phys$frag,1,1)
calc_phys$reef <- ifelse(calc_phys$reef == 'O', 'Outer Reef', 'Inner Reef')
calc_phys$reef <- as.factor(calc_phys$reef)
# add in genotype
calc_phys$genet <- substr(calc_phys$fragid,1,1)
#create a new column of combined genotype that will be used as a random effect in stats later
calc_phys = calc_phys %>%
unite(gen_site, c(origsitecode,genet), sep = "", remove = FALSE) %>%
mutate(gen_site = as.factor(gen_site))
# re-level and re-name treatment
calc_phys$treat <- factor(calc_phys$treat, levels = c("init", "1", "2", "3","4","5"))
levels(calc_phys$treat) <- c("Initial","Control","Low Var","Mod Var","High Var","Control 2")
# calculate average weight at each time point
calc_phys = calc_phys %>%
mutate(paavgbw=rowMeans(.[ , c("pabwrec1","pabwrec2","pabwrec3")], na.rm=TRUE)) %>%
mutate(t0avgbw=rowMeans(.[ , c("t0bwrec1","t0bwrec2","t0bwrec3")], na.rm=TRUE)) %>%
mutate(t1avgbw=rowMeans(.[ , c("t1bwrec1","t1bwrec2","t1bwrec3")], na.rm=TRUE)) %>%
mutate(t2avgbw=rowMeans(.[ , c("t2bwrec1","t2bwrec2","t2bwrec3")], na.rm=TRUE)) %>%
mutate(t3avgbw=rowMeans(.[ , c("t3bwrec1","t3bwrec2","t3bwrec3")], na.rm=TRUE))
# calculate growth rate at the time point intervals - can't use this though because we do not have dry weights
calc_phys = calc_phys %>%
mutate(T0_PA_g_cm2_day=((t0avgbw-paavgbw)/16)/SAcm2_t0) %>%
mutate(T2_T0_g_cm2_day=((t2avgbw-t0avgbw)/57)/SAcm2_t2) %>%
mutate(T2_T1_g_cm2_day=((t2avgbw-t1avgbw)/22)/SAcm2_t2) %>%
mutate(T3_T2_g_cm_day2=((t3avgbw-t2avgbw)/32)/SAcm2_t3) %>%
mutate(T3_T0_g_cm_day2=((t3avgbw-t0avgbw)/79)/SAcm2_t3)
# calculate percent change in growth
calc_phys = calc_phys %>%
mutate(T0_PA_perc=((t0avgbw-paavgbw)/paavgbw)*100) %>%
mutate(T1_T0_perc=((t1avgbw-t0avgbw)/t0avgbw)*100) %>%
mutate(T2_T1_perc=((t2avgbw-t1avgbw)/t1avgbw)*100) %>%
mutate(T3_T2_perc=((t3avgbw-t2avgbw)/t2avgbw)*100) %>%  # this is from before to after stress
mutate(T2_T0_perc=((t2avgbw-t0avgbw)/t0avgbw)*100) %>%  # this is time 0 til before the stress
mutate(T3_T0_perc=((t3avgbw-t0avgbw)/t0avgbw)*100)      # this is time 0 til after the stress
# calculate relative growth rate (RGR)
calc_phys = calc_phys %>%
mutate(T0_PA_rgr=((ln(t0avgbw)-ln(paavgbw))/16)) %>%
mutate(T2_T0_rgr=((ln(t2avgbw)-ln(t0avgbw))/57)) %>%
mutate(T2_T1_rgr=((ln(t2avgbw)-ln(t1avgbw))/22)) %>%
mutate(T3_T2_rgr=((ln(t3avgbw)-ln(t2avgbw))/32)) %>%
mutate(T3_T0_rgr=((ln(t3avgbw)-ln(t0avgbw))/79))
library(ggplot2)
library(lme4)
library(plotly)
library(ggridges)
library(tidyverse)
library(arsenal) #easily compare two data frames
library(Rmisc)
library(lmerTest)
library(emmeans)
library(reshape)
library(readxl)
library(wesanderson)
library(ggpubr)
library(car)
library(sjPlot)
library(effects)
library(glmmTMB)
library(performance)
library(patchwork)
library(magrittr)
library(SciViews)
#for PCAs
library(ggpubr)
library(ggfortify)
library(ggplot2)
library(cluster)
library(FactoMineR) # lots of options for pca visuals and summary stats
library(factoextra)
library(corrplot)
library(dplyr)
library(cowplot)
library(vegan)
##### Growth #####
# need to re-read in the data sheet for calcification only
post_phys_forcalc <- read.csv('Physiology_Data/data_files/dtvmaster.csv')
# remove unexplained outliers, and subset by only the data we need here
calc_phys = post_phys_forcalc %>%
select(frag, survivedtoend, treat, blastvol, blaster,
t2sastan1, t2sastan2, t2sastan3, t2sarec1, t2sarec2, t2sarec3,
t0sastan1, t0sastan2, t0sastan3, t0sarec1, t0sarec2, t0sarec3,
t3sastan1, t3sastan2, t3sastan3, t3sarec1, t3sarec2, t3sarec3,
pabwrec1,pabwrec2,pabwrec3,t0bwrec1, t0bwrec2,t0bwrec3,t1bwrec1, t1bwrec2,t1bwrec3,t2bwrec1, t2bwrec2,t2bwrec3,t3bwrec1, t3bwrec2,t3bwrec3) %>%
mutate(treat = as.factor(treat), blastvol = as.numeric(blastvol)) %>%
mutate_at(c(6:23), as.numeric) %>%
dplyr::filter(frag!="I2A12", frag!="I2A7", frag!="O4D8", frag!="I3E10", frag!="I3I10") %>% #these frags are being removed because they were duplicate genotypes within treatment and had the most complete information of the two
dplyr::filter(frag!="O2F1", frag!="O4G7", frag!="O2I3", frag!="O3H3", frag!="I3D8", frag!="O3F4", frag!="O3G10", frag!="O3F3", frag!="I4F8") #these frags are being removed because they were unexplainable outliers with weird weight values
#calculate surface area of the coral fragments
calc_phys$SAcm2_t0 <- (4*((calc_phys$t0sarec1+calc_phys$t0sarec2+calc_phys$t0sarec3)/3))/((calc_phys$t0sastan1+calc_phys$t0sastan2+calc_phys$t0sastan3)/3)
calc_phys$SAcm2_t2 <- (4*((calc_phys$t2sarec1+calc_phys$t2sarec2+calc_phys$t2sarec3)/3))/((calc_phys$t2sastan1+calc_phys$t2sastan2+calc_phys$t2sastan3)/3)
calc_phys$SAcm2_t3 <- (4*((calc_phys$t3sarec1+calc_phys$t3sarec2+calc_phys$t3sarec3)/3))/((calc_phys$t3sastan1+calc_phys$t3sastan2+calc_phys$t3sastan3)/3)
#add in descriptive information for coral samples
calc_phys$origsitecode <- substr(calc_phys$frag, 1, 2)
calc_phys$origsitecode <- as.factor(calc_phys$origsitecode)
# add in descriptive site name with inshore/offshore indicator
calc_phys$sitename <- ifelse(calc_phys$origsitecode == 'I2', 'SP',
ifelse(calc_phys$origsitecode == 'I3', 'CI',
ifelse(calc_phys$origsitecode == 'I4', 'PD',
ifelse(calc_phys$origsitecode == 'O2', 'BS',
ifelse(calc_phys$origsitecode == 'O3', 'CA',
'BN')))))
calc_phys$sitename <- as.factor(calc_phys$sitename)
# extract the genotype and fragment number
calc_phys$fragid <- substr(calc_phys$frag,3,5)
# add inshore/offshore designation
calc_phys$reef <- substr(calc_phys$frag,1,1)
calc_phys$reef <- ifelse(calc_phys$reef == 'O', 'Outer Reef', 'Inner Reef')
calc_phys$reef <- as.factor(calc_phys$reef)
# add in genotype
calc_phys$genet <- substr(calc_phys$fragid,1,1)
#create a new column of combined genotype that will be used as a random effect in stats later
calc_phys = calc_phys %>%
unite(gen_site, c(origsitecode,genet), sep = "", remove = FALSE) %>%
mutate(gen_site = as.factor(gen_site))
# re-level and re-name treatment
calc_phys$treat <- factor(calc_phys$treat, levels = c("init", "1", "2", "3","4","5"))
levels(calc_phys$treat) <- c("Initial","Control","Low Var","Mod Var","High Var","Control 2")
# calculate average weight at each time point
calc_phys = calc_phys %>%
mutate(paavgbw=rowMeans(.[ , c("pabwrec1","pabwrec2","pabwrec3")], na.rm=TRUE)) %>%
mutate(t0avgbw=rowMeans(.[ , c("t0bwrec1","t0bwrec2","t0bwrec3")], na.rm=TRUE)) %>%
mutate(t1avgbw=rowMeans(.[ , c("t1bwrec1","t1bwrec2","t1bwrec3")], na.rm=TRUE)) %>%
mutate(t2avgbw=rowMeans(.[ , c("t2bwrec1","t2bwrec2","t2bwrec3")], na.rm=TRUE)) %>%
mutate(t3avgbw=rowMeans(.[ , c("t3bwrec1","t3bwrec2","t3bwrec3")], na.rm=TRUE))
# calculate growth rate at the time point intervals - can't use this though because we do not have dry weights
calc_phys = calc_phys %>%
mutate(T0_PA_g_cm2_day=((t0avgbw-paavgbw)/16)/SAcm2_t0) %>%
mutate(T2_T0_g_cm2_day=((t2avgbw-t0avgbw)/57)/SAcm2_t2) %>%
mutate(T2_T1_g_cm2_day=((t2avgbw-t1avgbw)/22)/SAcm2_t2) %>%
mutate(T3_T2_g_cm_day2=((t3avgbw-t2avgbw)/32)/SAcm2_t3) %>%
mutate(T3_T0_g_cm_day2=((t3avgbw-t0avgbw)/79)/SAcm2_t3)
# calculate percent change in growth
calc_phys = calc_phys %>%
mutate(T0_PA_perc=((t0avgbw-paavgbw)/paavgbw)*100) %>%
mutate(T1_T0_perc=((t1avgbw-t0avgbw)/t0avgbw)*100) %>%
mutate(T2_T1_perc=((t2avgbw-t1avgbw)/t1avgbw)*100) %>%
mutate(T3_T2_perc=((t3avgbw-t2avgbw)/t2avgbw)*100) %>%  # this is from before to after stress
mutate(T2_T0_perc=((t2avgbw-t0avgbw)/t0avgbw)*100) %>%  # this is time 0 til before the stress
mutate(T3_T0_perc=((t3avgbw-t0avgbw)/t0avgbw)*100)      # this is time 0 til after the stress
# calculate relative growth rate (RGR)
calc_phys = calc_phys %>%
mutate(T0_PA_rgr=((ln(t0avgbw)-ln(paavgbw))/16)) %>%
mutate(T2_T0_rgr=((ln(t2avgbw)-ln(t0avgbw))/57)) %>%
mutate(T2_T1_rgr=((ln(t2avgbw)-ln(t1avgbw))/22)) %>%
mutate(T3_T2_rgr=((ln(t3avgbw)-ln(t2avgbw))/32)) %>%
mutate(T3_T0_rgr=((ln(t3avgbw)-ln(t0avgbw))/79))
# take a look at the dataset
str(calc_phys)
# un-comment the drop_na() corresponding to the time point of data you want to look at.
calc_phys2 = calc_phys %>%
#drop_na(T2_T0_rgr) %>%
drop_na(T3_T2_rgr) %>%
dplyr::filter(treat!="Control 2") %>%
dplyr::filter(treat!="Low Var") %>%
dplyr::filter(treat!="High Var") %>%
dplyr::filter(gen_site != "I4G") # clone with I4F, remove from dataset
# merge with lineage info for later plotting
lineages = read.csv("Physiology_Data/data_files/tve_lineages_noclones.csv")
calc_phys_all_lin <- left_join(calc_phys2, lineages, by = "gen_site")
calc_phys_all_lin$lineage = as.factor(calc_phys_all_lin$lineage)
# merge with its2 types for plotting
its2_types = read.csv("Physiology_Data/data_files/ITS2.dominanttype.prestress.csv") %>%
select(frag, dominant_type)
calc_phys_all_lin <- left_join(calc_phys_all_lin, its2_types, by = "frag")
calc_phys_all_lin$dominant_type = as.factor(calc_phys_all_lin$dominant_type)
calc_phys_2_lin = calc_phys_all_lin %>%
dplyr::filter(is.na(lineage) | lineage!="L3") # want to keep NA values for lineage here since they still have other info, will remove na's for lineage specific plots
# exploratory figure
#scatter plot with linear regression and confidence interval
ggplot(calc_phys, aes(treat, T2_T0_perc, color = sitename))+
geom_point()+
geom_smooth(aes(group=sitename), method=lm)+
theme_classic()
## More exploratory figures below
#SummarySE to format data for plotting by treatment and lineage_symtype
calc_phys_2_lin_nona = calc_phys_2_lin %>%
drop_na(lineage,dominant_type)
growth_means_lineage_sym <- summarySE(calc_phys_2_lin_nona, measurevar="T3_T2_rgr", groupvars=c("treat","lineage","dominant_type"))
growth_means_lineage_sym
# plot, treatment x axis colored by site data figure
calc_plot_lineage_sym <- ggplot(calc_phys_2_lin_nona, aes(x = treat, y = T3_T2_rgr))+
theme_bw()+
geom_jitter(aes(color = dominant_type, fill = dominant_type, shape = dominant_type),
position=position_dodge(width=0.3),
alpha=0.2, pch = 21,
color = "black") +
geom_errorbar(data = growth_means_lineage_sym, aes(x = treat, ymax = T3_T2_rgr+se, ymin = T3_T2_rgr-se, color = dominant_type), width = .2, position = position_dodge(width=0.4)) +
geom_point(data = growth_means_lineage_sym, mapping = aes(x=treat, y=T3_T2_rgr, color = dominant_type, fill = dominant_type, shape = dominant_type), size = 3.5, color = "black", position = position_dodge(width=0.4))+
scale_fill_manual(name = "Dominant ITS2",
#breaks = c("L1","L2"),
values = its2_cols_greens)+
scale_color_manual(name = "Dominant ITS2",
#breaks = c("L1","L2"),
values = its2_cols_greens)+
scale_shape_manual(name = "Dominant ITS2",
values = c(21,22,23,24))+
xlab("Treatment")+
ylab(bquote("Specific growth rate ("~day^-1~')'))+
ylim(-0.0006,0.0015) +
geom_hline(yintercept=0, linetype='dotted', color = 'gray')+
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
facet_wrap(~lineage)
calc_plot_lineage_sym
cols_site <- c("CI" = "#543005", "PD"= "#bf812d",  "SP"= "#dfc27d",  "BN" = "#003c30", "BS"= "#35978f", "CA"= "#80cdc1")
#cols_treat <- c("darkgrey", "#FF9966","#CC3300","#7f0000")
cols_treat <- c("darkgrey","#CC3300")
cols_lineage <- c("L1" = "#3f007d", "L2" = "#807dba", "L3" = "#bcbddc")
its2_cols_greens = c("A4" = "#ffeda0", "C1" = "#edf8e9", "C3af" = "#238b45","C3" = "#a1d99b","D1" = "#00441b")
# plot, treatment x axis colored by site data figure
calc_plot_lineage_sym <- ggplot(calc_phys_2_lin_nona, aes(x = treat, y = T3_T2_rgr))+
theme_bw()+
geom_jitter(aes(color = dominant_type, fill = dominant_type, shape = dominant_type),
position=position_dodge(width=0.3),
alpha=0.2, pch = 21,
color = "black") +
geom_errorbar(data = growth_means_lineage_sym, aes(x = treat, ymax = T3_T2_rgr+se, ymin = T3_T2_rgr-se, color = dominant_type), width = .2, position = position_dodge(width=0.4)) +
geom_point(data = growth_means_lineage_sym, mapping = aes(x=treat, y=T3_T2_rgr, color = dominant_type, fill = dominant_type, shape = dominant_type), size = 3.5, color = "black", position = position_dodge(width=0.4))+
scale_fill_manual(name = "Dominant ITS2",
#breaks = c("L1","L2"),
values = its2_cols_greens)+
scale_color_manual(name = "Dominant ITS2",
#breaks = c("L1","L2"),
values = its2_cols_greens)+
scale_shape_manual(name = "Dominant ITS2",
values = c(21,22,23,24))+
xlab("Treatment")+
ylab(bquote("Specific growth rate ("~day^-1~')'))+
ylim(-0.0006,0.0015) +
geom_hline(yintercept=0, linetype='dotted', color = 'gray')+
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
facet_wrap(~lineage)
calc_plot_lineage_sym
# plot, treatment x axis colored by site data figure
calc_plot_lineage_sym <- ggplot(calc_phys_2_lin_nona, aes(x = treat, y = T3_T2_rgr))+
theme_bw()+
geom_jitter(aes(color = dominant_type, fill = dominant_type, shape = dominant_type),
position=position_dodge(width=0.3),
alpha=0.2, pch = 21,
color = "black") +
geom_errorbar(data = growth_means_lineage_sym, aes(x = treat, ymax = T3_T2_rgr+se, ymin = T3_T2_rgr-se, color = dominant_type), width = .2, position = position_dodge(width=0.4)) +
geom_point(data = growth_means_lineage_sym, mapping = aes(x=treat, y=T3_T2_rgr, color = dominant_type, fill = dominant_type, shape = dominant_type), size = 3.5, color = "black", position = position_dodge(width=0.4))+
scale_fill_manual(name = "Dominant ITS2",
#breaks = c("L1","L2"),
values = its2_cols_greens)+
scale_color_manual(name = "Dominant ITS2",
#breaks = c("L1","L2"),
values = its2_cols_greens)+
scale_shape_manual(name = "Dominant ITS2",
values = c(21,22,23,24))+
xlab("Treatment")+
ylab(bquote("Specific growth rate ("~day^-1~')'))+
#ylim(-0.0006,0.0015) +
geom_hline(yintercept=0, linetype='dotted', color = 'gray')+
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
facet_wrap(~lineage)
calc_plot_lineage_sym
# plot, treatment x axis colored by site data figure
calc_plot_lineage_sym <- ggplot(calc_phys_2_lin_nona, aes(x = treat, y = T3_T2_rgr))+
theme_bw()+
geom_jitter(aes(color = dominant_type, fill = dominant_type, shape = dominant_type),
position=position_dodge(width=0.3),
alpha=0.2, pch = 21,
color = "black") +
geom_errorbar(data = growth_means_lineage_sym, aes(x = treat, ymax = T3_T2_rgr+se, ymin = T3_T2_rgr-se, color = dominant_type), width = .2, position = position_dodge(width=0.4)) +
geom_point(data = growth_means_lineage_sym, mapping = aes(x=treat, y=T3_T2_rgr, color = dominant_type, fill = dominant_type, shape = dominant_type), size = 3.5, color = "black", position = position_dodge(width=0.4))+
scale_fill_manual(name = "Dominant ITS2",
#breaks = c("L1","L2"),
values = its2_cols_greens)+
scale_color_manual(name = "Dominant ITS2",
#breaks = c("L1","L2"),
values = its2_cols_greens)+
scale_shape_manual(name = "Dominant ITS2",
values = c(21,22,23,24))+
xlab("Treatment")+
ylab(bquote("Specific growth rate ("~day^-1~')'))+
ylim(-0.0006,0.0015) +
geom_hline(yintercept=0, linetype='dotted', color = 'gray')+
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
facet_wrap(~lineage)
calc_plot_lineage_sym
ggsave(calc_plot_lineage_sym, filename = "/Users/hannahaichelman/Dropbox/BU/TVE/Growth/calcification_T3T2_lineage_dominantType.pdf", width=8.5, height=4, units=c("in"), useDingbats=FALSE)
library(shiny)
library(plotly)
library(plyr)
library(dplyr)
library(reshape2)
library(tidyr)
library(ggplot2)
library(xts)
library(zoo)
library(TTR)
library(scales)
library(ggpubr)
library(signal)
library(data.table)
library(ggridges)
library(Rmisc)
cols_site <- c("CI" = "#543005", "PD"= "#bf812d",  "SP"= "#dfc27d",  "BN" = "#003c30", "BS"= "#35978f", "CA"= "#80cdc1")
cols_treat <- c("darkgrey", "#FF9966","#CC3300","#7f0000")
cols_lineage <- c("L1" = "#3f007d", "L2" = "#807dba", "L3" = "#bcbddc")
its2_cols_greens = c("C1" = "#edf8e9", "C3af" = "#238b45","C3" = "#a1d99b","D1" = "#00441b")
# set wd
setwd("Temperature_Data/data_files/Field_HOBO_txt_files/")
Cayo.OR3.arr3 <- xts(zoo(read.table("Cayo.OR3.arr3.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
Drago.OR4 <- xts(zoo(read.table("Drago.OR4.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
Punta.IR1 <- xts(zoo(read.table("Punta.IR1.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2 <- xts(zoo(read.table("STRI.IR2.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
Cristo.IR3.arr1 <- xts(zoo(read.table("Cristo.IR3.arr1.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
# fix cristobal temp to degrees C because the logger was deployed in F
Cristo.IR3.arr1 <- ((Cristo.IR3.arr1 - 32) * (5/9))
# STRI array loggers
STRI.IR2.arr4 <- xts(zoo(read.table("STRI.IR2.arr4.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2.arr5 <- xts(zoo(read.table("STRI.IR2.arr5.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2.arr6 <- xts(zoo(read.table("STRI.IR2.arr6.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2.arr7 <- xts(zoo(read.table("STRI.IR2.arr7.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2.arr10 <- xts(zoo(read.table("STRI.IR2.arr10.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2.arr12 <- xts(zoo(read.table("STRI.IR2.arr12.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
#### Set Up ####
library(plyr)
library(dplyr)
library(tidyverse)
library(vegan)
#setwd('~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/2bRAD/')
bams=data.frame(read.table("2bRAD/data_files/bams.txt", header=FALSE)) # list of bam files
colnames(bams)<- "bam"
# loading individual to population correspondences
i2p=read.table("2bRAD/data_files/bam_barcode_names_tuftscustom.csv",sep=",",header=TRUE) # 2-column tab-delimited table of individual assignments to populations; must be in the same order as samples in the bam list or vcf file.
row.names(i2p)=i2p[,1]
#i2p=i2p[goods,]
site=i2p[,2]
# add in site name
i2p$sitename <- ifelse(i2p$pop == 'I2', 'SP',
ifelse(i2p$pop == 'I3', 'CI',
ifelse(i2p$pop == 'I4', 'PD',
ifelse(i2p$pop == 'O2', 'BS',
ifelse(i2p$pop == 'O3', 'CA',
'BN')))))
# create new data frame using i2p without clones (duplicated preps), but still with two actual clones (I4G + I4F)
# this is removing files that have the lower coverage/fewer reads
i2p_noclones_allsamps = i2p %>%
dplyr::filter(bam != "4-MullenDavies_S4_TCAC.nosymbio.fastq.bam") %>% # O4E
dplyr::filter(bam != "1-MullenDavies_S1_GCTT.nosymbio.fastq.bam") %>% # O2A
dplyr::filter(prepped_id != "I4A_CLONE") %>% # I4A
dplyr::filter(bam != "2-MullenDavies_S2_AGTG.nosymbio.fastq.bam") %>% # O4A
dplyr::filter(bam != "3-MullenDavies_S3_TGGT.nosymbio.fastq.bam") %>% # I3H
dplyr::filter(prepped_id != "O3B_CLONE") %>% # O3B
dplyr::filter(bam != "4-MullenDavies_S4_TCAG.nosymbio.fastq.bam") %>% # O2E
dplyr::filter(bam != "1-MullenDavies_S1_TGGT.nosymbio.fastq.bam") %>% # I2E sample 1
dplyr::filter(bam != "5-MullenDavies_S5_TGGT.nosymbio.fastq.bam") %>% # I2E sample 2
dplyr::filter(bam != "1-MullenDavies_S1_ACCA.nosymbio.fastq.bam") # I3C
# make a new bams file with this filtered i2p file and write out a csv file
bams_noclones_allsamps = i2p_noclones_allsamps %>%
select(bam)
# Remove I4G so this is actually no clones here - I4G was a smaller bam file
i2p_noclones = i2p_noclones_allsamps %>%
dplyr::filter(bam != "1-MullenDavies_S1_GTGA.nosymbio.fastq.bam") # I4G
# make new bams file for this filtered i2p file with no clones at all
bams_noclones = i2p_noclones %>%
select(bam)
site=i2p_noclones[,8]
head(i2p_noclones)
#### Analyze relatedness ####
# read in relatedness matrix - this is the dataset with 50 individuals, no clones or technical replicates included.
rel=read.table("2bRAD/data_files/ngsrelate.noclone.res", header = TRUE)
head(rel)
i2p_noclones_relatedness = i2p_noclones %>%
mutate(merge_id = as.factor(seq(0,49,by=1)))
head(i2p_noclones_relatedness)
# read in relatedness matrix - this is the dataset with 51 individuals, no technical replicates included but one true clone pair left in.
rel.allsamps=read.table("2bRAD/data_files/ngsrelate.noclone.allsamps.res", header = TRUE)
str(rel.allsamps)
rel.allsamps$a = as.factor(rel.allsamps$a)
rel.allsamps$b = as.factor(rel.allsamps$b)
# i2p file associated with these data:
dim(i2p_noclones_allsamps)
# add column to allow us to merge with relatedness file
i2p_noclones_allsamps_relatedness = i2p_noclones_allsamps %>%
mutate(merge_id = as.factor(seq(0,50,by=1)))
View(i2p_noclones_relatedness)
View(rel)
head(i2p_noclones_allsamps)
# add column to allow us to merge with relatedness file
i2p_noclones_allsamps_relatedness = i2p_noclones_allsamps %>%
mutate(merge_id = as.factor(seq(0,50,by=1)))
# merge metadata and relatedness file
rel_i2p_merged = left_join(rel.allsamps, i2p_noclones_allsamps_relatedness, by = c("a" = "merge_id"))
head(rel_i2p_merged)
# plot
ggplot(rel_i2p_merged, aes(x = sample_id, y = rab)) +
geom_point() +
labs(title = "Pairwise Relatedness")
# this way of plotting is a little muddy, will clean things up with a heatmap.
# subset data to only include sample names and the rab metric that we care about
rel_i2p_filt = rel_i2p_merged %>%
select(a, b, rab, sample_id) %>%
rename(sample_id_a = sample_id) %>%
mutate(sample_id_a = as.factor(sample_id_a))
head(rel_i2p_filt)
# merge with metadata again to get the sample_id_b
rel_i2p_filt2 = left_join(rel_i2p_filt, i2p_noclones_allsamps_relatedness, by = c("b" = "merge_id"))
head(rel_i2p_filt2)
# now final dataframe with sample_id_a and sample_id_b and relatedness
rel_i2p_filt_final = rel_i2p_filt2 %>%
select(sample_id_a, sample_id, rab) %>%
rename(sample_id_b = sample_id) %>%
mutate(sample_id_b = as.factor(sample_id_b))
str(rel_i2p_filt_final)
# cut "_CLONE" off sample ID's to make reading and merging easier later on
rel_i2p_filt_final$sample_id_a = gsub("_CLONE", "", rel_i2p_filt_final$sample_id_a)
rel_i2p_filt_final$sample_id_b = gsub("_CLONE", "", rel_i2p_filt_final$sample_id_b)
# plot, again not the best way but just to peek.
rel.plot = ggplot(rel_i2p_filt_final, aes(x = sample_id_a, y = rab, text = sample_id_b)) +
geom_point() +
labs(title = "Pairwise Relatedness")
ggplotly(rel.plot)
library(plotly)
ggplotly(rel.plot)
# order this dataframe so that sample_id_a column is alphabetical
rel_i2p_filt_final2 = rel_i2p_filt_final[order(rel_i2p_filt_final$sample_id_a),]
# this looks good so far, but want to organize based on lineage so read that in
lineages = read.csv("Physiology_Data/data_files/tve_lineages_noclones.csv")
head(lineages)
# merge lineages with relatedness data
rel_i2p_filt_final_lineage = left_join(rel_i2p_filt_final, lineages, by = c("sample_id_a" = "gen_site")) %>%
rename(lineage_a = lineage)
head(rel_i2p_filt_final_lineage)
# merge again to get lineage associated with sample_id_b
rel_i2p_filt_final_lineage2 = left_join(rel_i2p_filt_final_lineage, lineages, by = c("sample_id_b" = "gen_site")) %>%
rename(lineage_b = lineage) %>%
# remove any lineage na's
filter(!is.na(lineage_a)) %>%
filter(!is.na(lineage_b))
head(rel_i2p_filt_final_lineage2)
# create a new column that combines lineage_a and lineage_b with an '_'
rel_i2p_filt_final_lineage2$lineage_comparison = paste(rel_i2p_filt_final_lineage2$lineage_a, rel_i2p_filt_final_lineage2$lineage_b, sep = "_")
rel_i2p_filt_final_lineage2$lineage_comparison = as.factor(rel_i2p_filt_final_lineage2$lineage_comparison)
levels(rel_i2p_filt_final_lineage2$lineage_comparison)
# re-order lineage_comparison factor
rel_i2p_filt_final_lineage2$lineage_comparison = factor(rel_i2p_filt_final_lineage2$lineage_comparison, levels = c("L1_L1", "L1_L2", "L1_L3", "L2_L2", "L2_L1", "L2_L3", "L3_L3", "L3_L1", "L3_L2"))
# summarize relatedness by lineage comparison
rel_lin_summary = rel_i2p_filt_final_lineage2 %>%
group_by(lineage_comparison) %>%
summarize(mean_rab = mean(rab, na.rm = TRUE),
sd_rab = sd(rab, na.rm = TRUE),
n = n())
# make boxplot of relatedness by lineage comparison
comparison_of_interest = c("L1_L1", "L2_L2", "L3_L3")
rel.boxplot = rel_i2p_filt_final_lineage2 %>%
# select only certain lineage comparisons for plotting
filter(lineage_comparison %in% comparison_of_interest) %>%
ggplot(aes(x = lineage_comparison, y = rab,fill = lineage_comparison)) +
geom_boxplot() +
#scale_color_manual(values = c("#3f007d", "#807dba", "#bcbddc")) +
scale_fill_manual(values = c("#3f007d", "#807dba", "#bcbddc")) +
labs(y = "Pairwise Relatedness (rab)") +
theme_bw()
rel.boxplot
rel.boxplot = rel_i2p_filt_final_lineage2 %>%
# select only certain lineage comparisons for plotting
#filter(lineage_comparison %in% comparison_of_interest) %>%
ggplot(aes(x = lineage_comparison, y = rab,fill = lineage_comparison)) +
geom_boxplot() +
#scale_color_manual(values = c("#3f007d", "#807dba", "#bcbddc")) +
scale_fill_manual(values = c("#3f007d", "#807dba", "#bcbddc")) +
labs(y = "Pairwise Relatedness (rab)") +
theme_bw()
rel.boxplot
rel.boxplot = rel_i2p_filt_final_lineage2 %>%
# select only certain lineage comparisons for plotting
#filter(lineage_comparison %in% comparison_of_interest) %>%
ggplot(aes(x = lineage_comparison, y = rab,fill = lineage_comparison)) +
geom_boxplot() +
#scale_color_manual(values = c("#3f007d", "#807dba", "#bcbddc")) +
#scale_fill_manual(values = c("#3f007d", "#807dba", "#bcbddc")) +
labs(y = "Pairwise Relatedness (rab)") +
theme_bw()
rel.boxplot
rel.boxplot = rel_i2p_filt_final_lineage2 %>%
# select only certain lineage comparisons for plotting
filter(lineage_comparison %in% comparison_of_interest) %>%
ggplot(aes(x = lineage_comparison, y = rab,fill = lineage_comparison)) +
geom_boxplot() +
#scale_color_manual(values = c("#3f007d", "#807dba", "#bcbddc")) +
scale_fill_manual(values = c("#3f007d", "#807dba", "#bcbddc")) +
labs(y = "Pairwise Relatedness (rab)") +
theme_bw()
rel.boxplot

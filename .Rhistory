all_var$Treatment = factor(all_var$Treatment, levels = c("Mod Var", "Control"))
all_var.plot = all_var %>%
ggplot(aes(x = DateTime_ct, y = Temp, color = Treatment))+
geom_line(aes(color = Treatment), lwd=1, alpha = 0.8)+
scale_color_manual(values = cols_treat_reds)+
ylim(26,34) +
geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
#ggtitle("Control 2") +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-22 00:00:00","2016-11-10 18:00:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-22 00:00:00", "2016-11-10 18:00:00")))+
theme_bw() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
all_var.plot
# plot the whole time course - figure 1C
all_temp$Treatment = factor(all_temp$Treatment, levels = c("Mod Var", "Control"))
all_temp.plot = all_temp %>%
ggplot(aes(x = DateTime_ct, y = Temp, color = Treatment))+
annotate("rect", xmin = as.POSIXct("2016-09-07 00:00:00"), xmax = as.POSIXct("2016-09-22 00:00:00"), ymin = - Inf, ymax = Inf, fill = "gray", alpha = 0.3)+
annotate("rect", xmin = as.POSIXct("2016-09-22 00:00:00"), xmax = as.POSIXct("2016-11-10 18:00:00"), ymin = - Inf, ymax = Inf, fill = "orange", alpha = 0.15)+
annotate("rect", xmin = as.POSIXct("2016-11-10 18:00:00"), xmax = as.POSIXct("2016-11-25 00:00:00"), ymin = - Inf, ymax = Inf, fill = "red4", alpha = 0.15)+
annotate("rect", xmin = as.POSIXct("2016-11-25 00:00:00"), xmax = as.POSIXct("2016-12-11 23:55:00"), ymin = - Inf, ymax = Inf, fill = "royalblue4", alpha = 0.15)+
geom_line(aes(color = Treatment), lwd=0.75)+
scale_color_manual(values = cols_treat_reds)+
#geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=.5) +
xlab("Day") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-07 00:00:00", "2016-09-22 00:00:00","2016-11-10 18:00:00","2016-11-14 00:00:00","2016-11-21 00:00:00","2016-11-25 00:00:00", "2016-12-11 23:55:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-07 00:00:00", "2016-12-11 23:55:00")))+
scale_y_continuous(name = "Temperature (째C)", breaks = seq(26,33,1))+
theme_bw()+
#theme(axis.text.x = element_blank())
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
all_temp.plot
# add in the extra data from the glass thermometer
all_temp_forextra = all_temp %>%
select(Day, Temp, Treatment)
all_temp_extra = melt(list(df1 = all_temp_forextra, df2 = extra_data_combined), id.vars = c("Day","Treatment"))
str(all_temp_extra)
View(all_temp_extra)
all_temp_extra2 = all_temp_extra %>%
select(Day, value, Treatment) %>%
dplyr::rename("Temp" = "value")
head(all_temp_extra2)
all_temp_extra2$DateTime = as.POSIXct(all_temp_extra2$Day)
all_temp_extra2$Treatment = factor(all_temp_extra2$Treatment, levels = c("Control_extra","Mod Var_extra","Control","Mod Var"))
all_temp_extra2_Control = all_temp_extra2 %>%
dplyr::filter(Treatment == "Control")
all_temp_extra2_ModVar = all_temp_extra2 %>%
dplyr::filter(Treatment == "Mod Var")
all_temp_extra2_ControlExtra = all_temp_extra2 %>%
dplyr::filter(Treatment == "Control_extra")
all_temp_extra2_ModVarExtra = all_temp_extra2 %>%
dplyr::filter(Treatment == "Mod Var_extra")
all_temp_extra_final = rbind(all_temp_extra2_ModVar, all_temp_extra2_Control, all_temp_extra2_ControlExtra, all_temp_extra2_ModVarExtra)
cols_treat_reds2 <- c("Control" = "darkgrey", "Mod Var"="#CC3300", "Control_extra" = "black", "Mod Var_extra" = "#67000d")
# make extra mod var points outlines in black
# re-level factor so that grey is on top of red
all_temp.plot2 = all_temp_extra_final %>%
ggplot(aes(x = Day, y = Temp, color = Treatment))+
annotate("rect", xmin = as.POSIXct("2016-09-07 00:00:00"), xmax = as.POSIXct("2016-09-22 00:00:00"), ymin = - Inf, ymax = Inf, fill = "gray", alpha = 0.3)+
annotate("rect", xmin = as.POSIXct("2016-09-22 00:00:00"), xmax = as.POSIXct("2016-11-10 18:00:00"), ymin = - Inf, ymax = Inf, fill = "orange", alpha = 0.15)+
annotate("rect", xmin = as.POSIXct("2016-11-10 18:00:00"), xmax = as.POSIXct("2016-11-25 00:00:00"), ymin = - Inf, ymax = Inf, fill = "red4", alpha = 0.15)+
annotate("rect", xmin = as.POSIXct("2016-11-25 00:00:00"), xmax = as.POSIXct("2016-12-11 23:55:00"), ymin = - Inf, ymax = Inf, fill = "royalblue4", alpha = 0.15)+
# geom_line(aes(color = Treatment), lwd=0.75)+
geom_point(aes(color = Treatment), size = 1)+
scale_color_manual(values = cols_treat_reds2)+
xlab("Day") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-07 00:00:00", "2016-09-22 00:00:00","2016-11-10 18:00:00","2016-11-14 00:00:00","2016-11-21 00:00:00","2016-11-25 00:00:00", "2016-12-11 23:55:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-07 00:00:00", "2016-12-11 23:55:00")))+
scale_y_continuous(name = "Temperature (째C)", breaks = seq(26,33,1))+
theme_bw()+
#theme(axis.text.x = element_blank())
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
all_temp.plot2
# plot a subset of days to zoom in and illustrate what the profiles looked like
all_temp.plot.subset = all_temp %>%
subset(DateTime_ct > "2016-10-30" & DateTime_ct <= "2016-11-02") %>%
ggplot(aes(x = DateTime_ct, y = Temp, color = Treatment))+
annotate("rect", xmin = as.POSIXct(-Inf), xmax = as.POSIXct(Inf), ymin = - Inf, ymax = Inf, fill = "orange", alpha = 0.15)+
geom_line(aes(color = Treatment), lwd=1, alpha = 1)+
scale_color_manual(values = cols_treat_reds)+
scale_y_continuous(name = "Temperature (째C)", breaks = seq(26,33,1))+
xlab("Day") +
theme_bw() +
theme(axis.text.x = element_blank())
#theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
all_temp.plot.subset
# plot all stress + recovery periods
all_stress.plot = all_stress %>%
ggplot(aes(x = DateTime_ct, y = Temp, color = Treatment))+
geom_line(aes(color = Treatment), lwd=1, alpha = 0.8)+
scale_color_manual(values = cols_treat_reds)+
#geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-11-10 18:05:00","2016-11-14", "2016-11-21","2016-11-25", "2016-12-11 23:55:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-11-10 18:05:00","2016-12-11 23:55:00")))+
scale_y_continuous(name = "Temperature (째C)", breaks = seq(26,33,1))+
theme_bw() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
all_stress.plot
# Find overall mean during heat challenge and recovery periods:
library(plotrix)
all_temp_extra_final_stress = all_temp_extra_final %>%
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-10 18:00:00")
all_temp_extra_final_var = all_temp_extra_final %>%
dplyr::filter(DateTime < "2016-11-10 18:00:00" & DateTime > "2016-09-22 00:00:00")
all_stress_2 = all_temp_extra_final_stress %>%
#dplyr::filter(DateTime < "2016-11-21 00:00:00" & DateTime > "2016-11-14 00:00:00") %>%# to look at just stress
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-25 00:00:00") %>%# to look at just recovery
summarise_at(vars(Temp), list(mean_temp = mean, sd_temp = sd, se_temp = std.error), na.rm=TRUE)
all_stress_2
all_stress_2 = all_temp_extra_final_stress %>%
dplyr::filter(DateTime < "2016-11-21 00:00:00" & DateTime > "2016-11-14 00:00:00") %>%# to look at just stress
#dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-25 00:00:00") %>%# to look at just recovery
summarise_at(vars(Temp), list(mean_temp = mean, sd_temp = sd, se_temp = std.error), na.rm=TRUE)
all_stress_2
Tank1.1_var.nona = Tank1.1_var %>%
drop_na(Temp)
Tank1.1_var.dailystats<-data.frame("DayRange"=tapply(Tank1.1_var.nona$Temp, Tank1.1_var.nona$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(Tank1.1_var.nona$Temp, Tank1.1_var.nona$Day, min),"DayMax"=tapply(Tank1.1_var.nona$Temp, Tank1.1_var.nona$Day, max), "DayMean"=tapply(Tank1.1_var.nona$Temp, Tank1.1_var.nona$Day, mean))
Tank1.1_var.dailystats <- tibble::rownames_to_column(Tank1.1_var.dailystats, "date")
Tank1.1_var.dailystats$treat <- "Control 1"
head(Tank1.1_var.dailystats)
Tank2.1_var.nona = Tank2.1_var %>%
drop_na(Temp)
Tank2.1_var.dailystats<-data.frame("DayRange"=tapply(Tank2.1_var.nona$Temp, Tank2.1_var.nona$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(Tank2.1_var.nona$Temp, Tank2.1_var.nona$Day, min),"DayMax"=tapply(Tank2.1_var.nona$Temp, Tank2.1_var.nona$Day, max), "DayMean"=tapply(Tank2.1_var.nona$Temp, Tank2.1_var.nona$Day, mean))
Tank2.1_var.dailystats <- tibble::rownames_to_column(Tank2.1_var.dailystats, "date")
Tank2.1_var.dailystats$treat <- "Low Var"
head(Tank2.1_var.dailystats)
Tank3.1_var.nona = Tank3.1_var %>%
drop_na(Temp)
Tank3.1_var.dailystats<-data.frame("DayRange"=tapply(Tank3.1_var.nona$Temp, Tank3.1_var.nona$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(Tank3.1_var.nona$Temp, Tank3.1_var.nona$Day, min),"DayMax"=tapply(Tank3.1_var.nona$Temp, Tank3.1_var.nona$Day, max), "DayMean"=tapply(Tank3.1_var.nona$Temp, Tank3.1_var.nona$Day, mean))
Tank3.1_var.dailystats <- tibble::rownames_to_column(Tank3.1_var.dailystats, "date")
Tank3.1_var.dailystats$treat <- "Mod Var"
head(Tank3.1_var.dailystats)
Tank4.2_var.nona = Tank4.2_var %>%
drop_na(Temp)
Tank4.2_var.dailystats<-data.frame("DayRange"=tapply(Tank4.2_var.nona$Temp, Tank4.2_var.nona$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(Tank4.2_var.nona$Temp, Tank4.2_var.nona$Day, min),"DayMax"=tapply(Tank4.2_var.nona$Temp, Tank4.2_var.nona$Day, max), "DayMean"=tapply(Tank4.2_var.nona$Temp, Tank4.2_var.nona$Day, mean))
Tank4.2_var.dailystats <- tibble::rownames_to_column(Tank4.2_var.dailystats, "date")
Tank4.2_var.dailystats$treat <- "High Var"
head(Tank4.2_var.dailystats)
# combine daily variability stats for all loggers
library(Rmisc)
var.dailystats.all = rbind(Tank1.1_var.dailystats,Tank3.1_var.dailystats)
str(var.dailystats.all)
var.dailystats.all$treat = factor(var.dailystats.all$treat, levels = c("Control 1","Mod Var"))
summarySE(data = var.dailystats.all, measurevar = "DayRange", groupvar = "treat")
summarySE(data = var.dailystats.all, measurevar = "DayMean", groupvar = "treat")
summarySE(data = var.dailystats.all, measurevar = "DayMax", groupvar = "treat")
summarySE(data = var.dailystats.all, measurevar = "DayMin", groupvar = "treat")
#### HOBO DAILY STATS & PLOTS####
library(effectsize)
options(es.use_symbols = TRUE) # get nice symbols when printing!
# daily range
var.dailystats.control = var.dailystats.all %>%
dplyr::filter(treat=="Control 1")
var.dailystats.mod = var.dailystats.all %>%
dplyr::filter(treat=="Mod Var")
aov.dtv=aov(DayRange~treat, data=var.dailystats.all)
summary(aov.dtv)
#             Df Sum Sq Mean Sq F value Pr(>F)
# treat        1 150.42  150.42    2823 <2e-16 ***
# Residuals   98   5.22    0.05
eta_squared(aov.dtv, partial = FALSE)
t.test(var.dailystats.control$DayRange, var.dailystats.mod$DayRange, paired=FALSE)
TukeyHSD(aov.dtv)
# daily mean
aov.mean=aov(DayMean~treat, data=var.dailystats.all)
summary(aov.mean)
eta_squared(aov.mean, partial = FALSE)
t.test(var.dailystats.control$DayMean, var.dailystats.mod$DayMean, paired=FALSE)
TukeyHSD(aov.mean)
# daily maximum
aov.max=aov(DayMax~treat, data=var.dailystats.all)
summary(aov.max)
t.test(var.dailystats.control$DayMax, var.dailystats.mod$DayMax, paired=FALSE)
eta_squared(aov.max, partial = FALSE)
TukeyHSD(aov.max)
# daily minimum
aov.min=aov(DayMin~treat, data=var.dailystats.all)
summary(aov.min)
t.test(var.dailystats.control$DayMin, var.dailystats.mod$DayMin, paired=FALSE)
eta_squared(aov.min, partial = FALSE)
TukeyHSD(aov.min)
#cols_treat_reds <- c("darkgrey", "#FF9966","#CC3300","#7f0000")
cols_treat_reds <- c("darkgrey","#CC3300")
# plot boxplots of  treatments - supplemental fig
tempPlot.dtv <- ggplot(var.dailystats.all, aes(x = treat, y = DayRange)) +
geom_jitter(shape=16,
position=position_jitter(0.2),
alpha=0.99,
aes(color = treat)) +
scale_color_manual(values = cols_treat_reds) + # for jittered points
geom_boxplot(outlier.shape = NA,
alpha = 0.7,
aes(fill = treat))+
scale_fill_manual(values = cols_treat_reds) + # for boxplot
#xlab("Treatment")+
ylab("Temperature (째C)")+
#ylim(27,32)+
theme_bw()+
theme(axis.title.x = element_blank(), axis.text.x = element_blank(), legend.position = "none")+
ggtitle("A. Daily Variability")
tempPlot.dtv
tempPlot.mean <- ggplot(var.dailystats.all, aes(x = treat, y = DayMean)) +
geom_jitter(shape=16,
position=position_jitter(0.2),
alpha=0.99,
aes(color = treat)) +
scale_color_manual(values = cols_treat_reds) + # for jittered points
geom_boxplot(outlier.shape = NA,
alpha = 0.7,
aes(fill = treat))+
scale_fill_manual(values = cols_treat_reds) + # for boxplot
xlab("Treatment")+
ylab("Temperature (째C)")+
#ylim(27,32)+
theme(legend.position = "none")+
theme_bw()+
theme(axis.title.x = element_blank(), axis.text.x = element_blank(), legend.position = "none")+
ggtitle("B. Daily Mean")
tempPlot.mean
tempPlot.max <- ggplot(var.dailystats.all, aes(x = treat, y = DayMax)) +
geom_jitter(shape=16,
position=position_jitter(0.2),
alpha=0.99,
aes(color = treat)) +
scale_color_manual(values = cols_treat_reds) + # for jittered points
geom_boxplot(outlier.shape = NA,
alpha = 0.7,
aes(fill = treat))+
scale_fill_manual(values = cols_treat_reds) + # for boxplot
xlab("Treatment")+
ylab("Temperature (째C)")+
#ylim(27,32)+
theme_bw()+
theme(legend.position = "none")+
ggtitle("C. Daily Maximum")
tempPlot.max
tempPlot.min <- ggplot(var.dailystats.all, aes(x = treat, y = DayMin)) +
geom_jitter(shape=16,
position=position_jitter(0.2),
alpha=0.99,
aes(color = treat)) +
scale_color_manual(values = cols_treat_reds) + # for jittered points
geom_boxplot(outlier.shape = NA,
alpha = 0.7,
aes(fill = treat))+
scale_fill_manual(values = cols_treat_reds) + # for boxplot
xlab("Treatment")+
ylab("Temperature (째C)")+
#ylim(27,32)+
theme_bw()+
theme(legend.position = "none")+
ggtitle("D. Daily Minimum")
tempPlot.min
all.temp.plots = ggarrange(tempPlot.dtv,tempPlot.mean,tempPlot.max,tempPlot.min,
ncol = 2, nrow = 2)
all.temp.plots
library(shiny)
library(plotly)
library(plyr)
library(dplyr)
library(reshape2)
library(tidyr)
library(ggplot2)
library(xts)
library(zoo)
library(TTR)
library(scales)
library(ggpubr)
library(signal)
library(data.table)
library(ggridges)
library(Rmisc)
##### Set Color Palettes ####
cols_site <- c("CI" = "#543005", "PD"= "#bf812d",  "SP"= "#dfc27d",  "BN" = "#003c30", "BS"= "#35978f", "CA"= "#80cdc1")
cols_treat <- c("darkgrey", "#FF9966","#CC3300","#7f0000")
cols_lineage <- c("L1" = "#3f007d", "L2" = "#807dba", "L3" = "#bcbddc")
its2_cols_greens = c("C1" = "#edf8e9", "C3af" = "#238b45","C3" = "#a1d99b","D1" = "#00441b")
# set wd
setwd("/Temperature_Data/data_files/Field_Hobo_Loggers/")
# set wd
setwd("Temperature_Data/data_files/Field_Hobo_Loggers/")
# what's in the wd
list.files("Temperature_Data/data_files/Field_Hobo_Loggers/")
# set wd
setwd("Temperature_Data/data_files/Field_HOBO_txt_files/")
# what's in the wd
list.files("Temperature_Data/data_files/Field_HOBO_txt_files/")
# main loggers (one logger per site)
Cayo.OR3.arr3 <- xts(zoo(read.table("Cayo.OR3.arr3.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
Cayo.OR3.arr3
Drago.OR4 <- xts(zoo(read.table("Drago.OR4.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
Punta.IR1 <- xts(zoo(read.table("Punta.IR1.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2 <- xts(zoo(read.table("STRI.IR2.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
Cristo.IR3.arr1 <- xts(zoo(read.table("Cristo.IR3.arr1.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
# fix cristobal temp to degrees C because the logger was deployed in F
Cristo.IR3.arr1 <- ((Cristo.IR3.arr1 - 32) * (5/9))
# STRI array loggers
STRI.IR2.arr4 <- xts(zoo(read.table("STRI.IR2.arr4.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2.arr5 <- xts(zoo(read.table("STRI.IR2.arr5.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2.arr6 <- xts(zoo(read.table("STRI.IR2.arr6.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2.arr7 <- xts(zoo(read.table("STRI.IR2.arr7.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2.arr10 <- xts(zoo(read.table("STRI.IR2.arr10.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2.arr12 <- xts(zoo(read.table("STRI.IR2.arr12.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
# read in the below csv to skip this section of code
monthly.mmm <- read.csv(file = "Temperature_Data/data_files/Field_HOBO_txt_files/MonthlyTempParams.csv")
# read in the below csv to skip this section of code
monthly.mmm <- read.csv(file = "/Temperature_Data/data_files/Field_HOBO_txt_files/MonthlyTempParams.csv")
# read in the below csv to skip this section of code
monthly.mmm <- read.csv(file = "MonthlyTempParams.csv")
monthly.mmm
# read in this csv to skip running this section of code:
weekly.mmm <- read.csv(file = "WeeklyTempParams.csv")
# read in this csv file to skip running this code for all temp data
master.melt <- read.csv(file = "AllTempData.csv")
dailys <- read.csv(file = "SeasonalDailyTempData.csv")
# read in this csv to skip running this section of code
daily.mmm <- read.csv(file = "DailyTempRangeData.csv")
# daily variability logger data
daily.mmm %>%
group_by(logger) %>%
summarise(percent90 = quantile(range, probs = 0.9))
#### Figure 1 Boxplots ####
daily.mmm$logger = as.factor(daily.mmm$logger)
daily.mmm.plot = daily.mmm %>%
dplyr::filter(logger != "Drago.OR4")
daily.mmm.plot$logger = droplevels(daily.mmm.plot$logger)
str(daily.mmm.plot)
daily.mmm.plot$logger = factor(daily.mmm.plot$logger, levels = c("Punta.IR1", "STRI.IR2", "Cristo.IR3.arr1", "Cayo.OR3.arr3"))
levels(daily.mmm.plot$logger) <- c("PD", "SP", "CI", "CA") # double check this
daily.mmm.plot$logger <- factor(daily.mmm.plot$logger, levels = c("PD", "SP", "CI", "CA"))
mean_boxplot <- ggplot(daily.mmm.plot, aes(x=logger, y=mean)) +
geom_jitter(shape=16,
position=position_jitter(0.2),
alpha=0.99,
aes(color = logger)) +
scale_color_manual(values = cols_site) + # for jittered points
geom_boxplot(outlier.shape = NA,
alpha = 0.85,
aes(fill = logger))+
scale_fill_manual(values = cols_site) + # for boxplot
ylab("Daily Mean Temperature (째C)") +
xlab("Site") +
theme(axis.text.x = element_text(angle = 45, vjust=0.7, hjust=.6)) +
theme_bw() +
theme(legend.position = "none")
mean_boxplot
# daily range as boxplot
dtv_boxplot <- ggplot(daily.mmm.plot, aes(x=logger, y=range)) +
geom_jitter(shape=16,
position=position_jitter(0.2),
alpha=0.99,
aes(color = logger)) +
scale_color_manual(values = cols_site) + # for jittered points
geom_boxplot(outlier.shape = NA,
alpha = 0.85,
aes(fill = logger))+
scale_fill_manual(values = cols_site) + # for boxplot
ylab("Daily Temperature Range (째C)") +
xlab("Site") +
#ylim(0,3.2) +
theme(axis.text.x = element_text(angle = 45, vjust=0.7, hjust=.6)) +
theme_bw() +
theme(legend.position = "none")
dtv_boxplot
# stats by logger for mean and dtv
aov1 = aov(range ~ logger, data = daily.mmm.plot)
summary(aov1)
TukeyHSD(aov1)
aov2 = aov(mean ~ logger, data = daily.mmm.plot)
summary(aov2)
TukeyHSD(aov2)
# find average parameters for each site
daily.mmm.plot %>%
group_by(logger) %>%
summarise_each(funs(mean))
# compare to collections
collections_plot %>%
group_by(logger) %>%
summarise_each(funs(mean))
# compare to collections
collections_plot %>%
group_by(logger) %>%
summarise_each(funs(mean))
str(daily.mmm)
daily.mmm$date = as.Date(daily.mmm$date, format = "%Y-%m-%d")
daily.mmm$logger = as.factor(daily.mmm$logger)
daily.mmm$logger <- factor(daily.mmm$logger, levels = c("STRI.IR2", "Punta.IR1", "Drago.OR4",
"Cayo.OR3.arr3","Cristo.IR3.arr1"))
levels(daily.mmm$logger) <- c("SP", "PD", "Drago.OR4", "CA","CI")
cols_site = c("CA" = "#80cdc1", "CI"="#543005", "Drago.OR4"="black",
"PD"="#bf812d", "SP"="#dfc27d")
range.plot = daily.mmm %>%
dplyr::filter(logger != "Drago.OR4") %>%
ggplot(aes(x = range, y = logger, fill = logger))+
geom_density_ridges(jittered_points=F, scale = 1.5, rel_min_height = .5, point_shape = "|", point_size = 2, size = 0.1)+
scale_fill_manual(values= cols_site)+
stat_density_ridges(quantile_lines = T, scale = 1.5)+
scale_x_continuous(breaks = seq(0,3,.5))+
theme_ridges(center = T)+
theme(legend.position = "none")
range.plot
library(vegan)
library(MCMC.OTU)
library(MicEco)
library(pairwiseAdonis)
library(tidyverse)
t0_full = read.csv("Physiology_Data/data_files/t0_full.csv")
end_full = read.csv("Physiology_Data/data_files/end_full.csv")
skel_full = read.csv("Physiology_Data/data_files/skel_phys_full.csv")
##### Read in and format data #####
# set wd
# setwd("/Users/hannahaichelman/Documents/BU/TVE")
# read in the data
post_phys <- read.csv('Physiology_Data/data_files/dtvmaster.csv') # physiology data taken at the end of the experiment
init_phys <- read.csv('Physiology_Data/data_files/initial-phys-mod.csv') # physiology data taken at the start of the experiment
##### Read in and format data #####
# set wd
# setwd("/Users/hannahaichelman/Documents/BU/TVE")
# read in the data
post_phys <- read.csv('Physiology_Data/data_files/dtvmaster.csv') # physiology data taken at the end of the experiment
##### PCA Adonis Tests #####
#Use an Adonis test to get significance of factors on holobiont physiology and skeleton morphology
library(vegan)
library(MCMC.OTU)
library(MicEco)
library(pairwiseAdonis)
library(tidyverse)
t0_full = read.csv("Physiology_Data/data_files/t0_full.csv")
end_full = read.csv("Physiology_Data/data_files/end_full.csv")
skel_full = read.csv("Physiology_Data/data_files/skel_phys_full.csv")
str(t0_full)
t0_full$sitename <- as.factor(t0_full$sitename)
t0_full$treat <- as.factor(t0_full$treat)
t0_full$lineage <- as.factor(t0_full$lineage)
str(end_full)
end_full$sitename <- as.factor(end_full$sitename)
end_full$treat <- as.factor(end_full$treat)
end_full$lineage <- as.factor(end_full$lineage)
str(skel_full)
skel_full$sitename <- as.factor(skel_full$sitename)
skel_full$treat <- as.factor(skel_full$treat)
skel_full$lineage <- as.factor(skel_full$lineage)
# add in dominant symbiont type dataframe
its2_types_t0 = read.csv("Physiology_Data/data_files/ITS2.dominanttype.T0.csv") %>%
select(frag, gen_site,dominant_type) %>%
mutate(dominant_type = as.factor(dominant_type))
t0_full_its2 <- left_join(t0_full, its2_types_t0, by = "gen_site")
str(t0_full_its2)
its2_types_ps = read.csv("Physiology_Data/data_files/ITS2.dominanttype.prestress.csv") %>%
select(frag, dominant_type) %>%
mutate(dominant_type = as.factor(dominant_type))
end_full_its2 <- left_join(end_full, its2_types_ps, by = "frag")
str(end_full_its2)
# Dont want to use log transformed data here
# but need to remove NAs
t0_full_adonis = t0_full_its2 %>%
dplyr::filter(complete.cases(.)) %>% #drop any row that has an NA for any time point
dplyr::filter(lineage != "L3") %>% # remove L3 individuals since these aren't in our PCAs
select(-corallite.avg.poly.mm2, -frag.y) %>% # removing here because it is now included in the skeleton morphology pca (revision)
dplyr::rename(frag = frag.x) %>% # removing here because it is now included in the skeleton morphology pca (revision)
select(frag, gen_site, treat, sitename, lineage, dominant_type, hcarb_mgcm2, scarb_mgcm2, prot_mgcm2, sym_cm2, avgtiss, chlA)
end_full_adonis = end_full_its2 %>%
dplyr::filter(complete.cases(.)) %>% #drop any row that has an NA for any time point
mutate(T3_T0_rgr_2 = T3_T0_rgr + 2) %>%
select(-T3_T0_rgr) %>% #get rid of the column with negative growth values before log transforming, just making sure to use the same data as we do in the PCAs
dplyr::filter(lineage != "L3") %>% # remove L3 individuals since these aren't in our PCAs
select(frag, treat, sitename, lineage, dominant_type, T3_T0_rgr_2, hcarb_mgcm2, scarb_mgcm2, prot_mgcm2, pam, sym_cm2, chlA)
skel_full_adonis = skel_full %>%
dplyr::filter(complete.cases(.)) %>% #drop any row that has an NA for any time point
dplyr::filter(lineage != "L3") # remove L3 individuals since these aren't in our PCAs
end_full_adonis_L1 = end_full_adonis %>%
filter(lineage == "L1")
end_full_adonis_L2 = end_full_adonis %>%
filter(lineage == "L2")
# Change dataframe here based on the comparison you are interested in
#nl=startedLog(data=end_full_adonis,count.columns=6:12, logstart=1) # N=46
#nl=startedLog(data=t0_full_adonis,count.columns=7:12, logstart=1) # N=42
nl=startedLog(data=skel_full_adonis,count.columns=5:12, logstart=1) # N=42
# Change dataframe here based on the comparison you are interested in
nl=startedLog(data=end_full_adonis,count.columns=6:12, logstart=1) # N=46
goods.dist=vegdist(nl, method="bray", na.rm = TRUE)
goods.pcoa=pcoa(goods.dist)
# PCA:
pcp=prcomp(nl, retx=TRUE, center=TRUE)
scores=goods.pcoa$vectors
summary(goods.pcoa)
conditions=end_full_adonis[, c("frag","treat","sitename","lineage","dominant_type")] #make sure to change dataframe here
# PERMANOVA
head(scores)
head(conditions)
end_model = adonis(scores~lineage+dominant_type+treat, data=conditions, method="euclidean", permutations = 10000)
end_model = adonis(scores~lineage+treat, data=conditions, method="euclidean", permutations = 10000)
end_output = adonis_OmegaSq(end_model, partial = TRUE)
end_output$aov.tab
# set to github repository location
setwd("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability")
library(ggplot2)
library(cowplot)
library(phyloseq)
library(car)
library(ggpubr)
library(vegan)
library(dada2)
library(tidyverse)
# can skip this section once you've run it once and saved output Rdata files
load("/16S_Microbiome/data_files/taxa2.Rdata")

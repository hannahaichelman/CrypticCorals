values = cols_treat_reds) +
xlab('DateTime') +
ylab(expression(paste("Temp (",degree,"C)")))+
scale_y_continuous(breaks = seq(28,33,by = 0.5))+
scale_x_datetime(breaks = as.POSIXct(c("2016-10-30 00:00:00","2016-10-31 00:00:00","2016-11-01 00:00:00","2016-11-02 00:00:00")),
labels = c("10/30/16 00:00","10/31/16 00:00","11/1/16 00:00","11/2/16 00:00")) +
#geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
#ylim(26,34) +
ggtitle("Tank Temperatures - Apex") +
theme_classic()
apex_clipped_plot
#### Apex Summary Stats ####
# Some summary stats for Apex temp data
describe.by(apex_long, group = "treatment")
#### Hobo Logger Temperature Data ####
Tank1.1 <- read.csv("Tank_Hobo_Loggers/TVE_1_1_clean.csv") # log every 5 mins, 9/5/16 17:00 to 12/16/16 14:15
str(Tank1.1)
head(Tank1.1)
Tank2.1 <- read.csv("Tank_Hobo_Loggers/TVE_2_1_clean.csv") # log every 5 mins, 9/5/16 17:00 to 12/16/16 14:30
str(Tank2.1)
head(Tank2.1)
Tank3.1 <- read.csv("Tank_Hobo_Loggers/TVE_3_1_clean.csv") # log every 5 mins, 9/5/16 17:00 to 11/15/16, but
# starts logging at odd intervals and eventually 1 minute starting 11/14/16 12:30, so trim here.
str(Tank3.1)
head(Tank3.1)
Tank4.2 <- read.csv("Tank_Hobo_Loggers/TVE_4_2_clean.csv") # log every 5 mins, 9/5/16 17:00 to 12/16/16 14:50
str(Tank4.2)
head(Tank4.2)
Tank5.3 <- read.csv("Tank_Hobo_Loggers/TVE_5_3_clean.csv") # log every 5 mins, 9/5/16 17:00 to 12/16/16 14:50
str(Tank5.3)
head(Tank5.3)
Tank1.1$DateTime<-strptime(Tank1.1$DateTime, format="%m/%d/%y %H:%M")
Tank1.1$DateTime_ct <- as.POSIXct(Tank1.1$DateTime, format="%Y-%m-%dT%H:%M:%S")
Tank1.1$Day<-format(Tank1.1$DateTime,"%D")
Tank1.1$Day<-as.POSIXct(Tank1.1$Day, format="%m/%d/%y")
head(Tank1.1)
Tank2.1$DateTime<-strptime(Tank2.1$DateTime, format="%m/%d/%y %H:%M")
Tank2.1$DateTime_ct <- as.POSIXct(Tank2.1$DateTime, format="%Y-%m-%dT%H:%M:%S")
Tank2.1$Day<-format(Tank2.1$DateTime,"%D")
Tank2.1$Day<-as.POSIXct(Tank2.1$Day, format="%m/%d/%y")
head(Tank2.1)
Tank3.1$DateTime<-strptime(Tank3.1$DateTime, format="%m/%d/%y %H:%M")
Tank3.1$DateTime_ct <- as.POSIXct(Tank3.1$DateTime, format="%Y-%m-%dT%H:%M:%S")
Tank3.1$Day<-format(Tank3.1$DateTime,"%D")
Tank3.1$Day<-as.POSIXct(Tank3.1$Day, format="%m/%d/%y")
head(Tank3.1)
Tank4.2$DateTime<-strptime(Tank4.2$DateTime, format="%m/%d/%y %H:%M")
Tank4.2$DateTime_ct <- as.POSIXct(Tank4.2$DateTime, format="%Y-%m-%dT%H:%M:%S")
Tank4.2$Day<-format(Tank4.2$DateTime,"%D")
Tank4.2$Day<-as.POSIXct(Tank4.2$Day, format="%m/%d/%y")
head(Tank4.2)
Tank5.3$DateTime<-strptime(Tank5.3$DateTime, format="%m/%d/%y %H:%M")
Tank5.3$DateTime_ct <- as.POSIXct(Tank5.3$DateTime, format="%Y-%m-%dT%H:%M:%S")
Tank5.3$Day<-format(Tank5.3$DateTime,"%D")
Tank5.3$Day<-as.POSIXct(Tank5.3$Day, format="%m/%d/%y")
head(Tank5.3)
# Hobo data:
Tank1.1_dayavg <- Tank1.1 %>%
dplyr::filter(DateTime >= "2016-10-06 00:00:00", DateTime <= "2016-11-15 23:50:00") %>%
group_by(Day) %>%
summarise_at(vars(Temp), list(mean_temp = mean), na.rm=TRUE)
Tank2.1_dayavg <- Tank2.1 %>%
dplyr::filter(DateTime >= "2016-10-06 00:00:00", DateTime <= "2016-11-15 23:50:00") %>%
group_by(Day) %>%
summarise_at(vars(Temp), list(mean_temp = mean), na.rm=TRUE)
Tank3.1_dayavg <- Tank3.1 %>%
dplyr::filter(DateTime >= "2016-10-06 00:00:00", DateTime <= "2016-11-15 23:50:00") %>%
group_by(Day) %>%
summarise_at(vars(Temp), list(mean_temp = mean), na.rm=TRUE)
Tank4.2_dayavg <- Tank4.2 %>%
dplyr::filter(DateTime >= "2016-10-06 00:00:00", DateTime <= "2016-11-15 23:50:00") %>%
group_by(Day) %>%
summarise_at(vars(Temp), list(mean_temp = mean), na.rm=TRUE)
# Calculate means by day for Apex data
apex_dayavg <- apex_long %>%
group_by(Day, treatment) %>%
summarise_at(vars(Temp), list(mean_temp = mean), na.rm=TRUE)
# Control: 2016-10-06 to 2016-12-11
apex_dayavg_control <-  apex_dayavg %>%
dplyr::filter(treatment == "ControlTemp") %>%
dplyr::filter(Day <= "2016-11-15")
# Low Var: 2016-10-06 to 2016-12-11
apex_dayavg_lowvar <-  apex_dayavg %>%
dplyr::filter(treatment == "LowVarTemp") %>%
dplyr::filter(Day <= "2016-11-15")
# Mod Var: 2016-10-06 to 2016-11-15
apex_dayavg_modvar <-  apex_dayavg %>%
dplyr::filter(treatment == "ModVarTemp") %>%
dplyr::filter(Day <= "2016-11-15")
# High Var: 2016-10-06 to 2016-12-11
apex_dayavg_highvar <-  apex_dayavg %>%
dplyr::filter(treatment == "HighVarTemp") %>%
dplyr::filter(Day <= "2016-11-15")
mean(apex_dayavg_control$mean_temp - Tank1.1_dayavg$mean_temp) # control
# [1] 0.6860648
mean(apex_dayavg_lowvar$mean_temp - Tank2.1_dayavg$mean_temp) # low variability
# [1] 0.724092
mean(apex_dayavg_modvar$mean_temp - Tank3.1_dayavg$mean_temp) # moderate variability
# [1] 0.7730094
mean(apex_dayavg_highvar$mean_temp - Tank4.2_dayavg$mean_temp) # high variability
# Plot the difference over time by treatment
plot(apex_dayavg_control$mean_temp - Tank1.1_dayavg$mean_temp, main = "Control Treatment", ylab = "Apex - Hobo (째C)", ylim = c(0,1.1)) # control
plot(apex_dayavg_lowvar$mean_temp - Tank2.1_dayavg$mean_temp, main = "Low Variability Treatment", ylab = "Apex - Hobo (째C)", ylim = c(0,1.1)) # low variability
plot(apex_dayavg_modvar$mean_temp - Tank3.1_dayavg$mean_temp, main = "Moderate Variability Treatment", ylab = "Apex - Hobo (째C)", ylim = c(0,1.1)) # moderate variability
plot(apex_dayavg_highvar$mean_temp - Tank4.2_dayavg$mean_temp, main = "High Variability Treatment", ylab = "Apex - Hobo (째C)", ylim = c(-0.1,2.2)) # high variability
Tank1.1_all <- Tank1.1 %>%
mutate(Temp = Temp + 0.686064) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-12 00:00:00" & DateTime > "2016-09-07 00:00:00") %>%
mutate(Treatment = "Control")
Tank1.1_var <- Tank1.1 %>%
mutate(Temp = Temp + 0.686064) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-11-10 18:00:00" & DateTime > "2016-09-22 00:00:00") %>%
mutate(Treatment = "Control")
Tank1.1_stress <- Tank1.1 %>%
mutate(Temp = Temp + 0.686064) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-10 18:00:00") %>%
mutate(Treatment = "Control")
Tank2.1_all <- Tank2.1 %>%
mutate(Temp = Temp + 0.724092) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-12 00:00:00" & DateTime > "2016-09-07 00:00:00") %>%
mutate(Treatment = "Low Var")
Tank2.1_var <- Tank2.1 %>%
mutate(Temp = Temp + 0.724092) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-11-10 18:00:00" & DateTime > "2016-09-22 00:00:00") %>%
mutate(Treatment = "Low Var")
Tank2.1_stress <- Tank2.1 %>%
mutate(Temp = Temp + 0.724092) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-10 18:00:00") %>%
mutate(Treatment = "Low Var")
# Tank 3 doesn't record until the end of the experiment
Tank3.1_all <- Tank3.1 %>%
mutate(Temp = Temp + 0.7730094) %>% # treatment-specific correction
dplyr::filter(DateTime > "2016-09-07 00:00:00") %>%
mutate(Treatment = "Mod Var")
Tank3.1_var <- Tank3.1 %>%
mutate(Temp = Temp + 0.7730094) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-11-10 18:00:00" & DateTime > "2016-09-22 00:00:00") %>%
mutate(Treatment = "Mod Var")
Tank3.1_stress <- Tank3.1 %>%
mutate(Temp = Temp + 0.7730094) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-10 18:00:00") %>%
mutate(Treatment = "Mod Var")
Tank4.2_all <- Tank4.2 %>%
mutate(Temp = Temp + 0.7088613) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-12 00:00:00" & DateTime > "2016-09-07 00:00:00") %>%
mutate(Treatment = "High Var")
Tank4.2_var <- Tank4.2 %>%
mutate(Temp = Temp + 0.7088613) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-11-10 18:00:00" & DateTime > "2016-09-22 00:00:00") %>%
mutate(Treatment = "High Var")
Tank4.2_stress <- Tank4.2 %>%
mutate(Temp = Temp + 0.7088613) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-10 18:00:00") %>%
mutate(Treatment = "High Var")
# Tank 5 = Control 2, not using this treatment so no treatment-specific correction for Tank5's
Tank5.3_all <- Tank5.3 %>%
dplyr::filter(DateTime < "2016-12-12 00:00:00" & DateTime > "2016-09-07 00:00:00") %>%
mutate(Treatment = "control 2")
Tank5.3_var <- Tank5.3 %>%
dplyr::filter(DateTime < "2016-11-10 18:00:00" & DateTime > "2016-09-22 00:00:00") %>%
mutate(Treatment = "control 2")
Tank5.3_stress <- Tank5.3 %>%
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-10 18:00:00") %>%
mutate(Treatment = "control 2")
#### Statistically compare hobo logger data ####
# combine all variability data into one dataframe, exclude control 2 for now
all.hobo.data <- rbind(Tank1.1_var, Tank2.1_var, Tank3.1_var, Tank4.2_var)
library(car)
# Levene test used to test if samples have equal variance
leveneTest(Temp~Treatment, data = all.hobo.data)
# now try https://stackoverflow.com/questions/43646987/multiple-comparison-post-hoc-test-for-levenes-test
# first calculate the median by treatment and add as a column
all.hobo.data <- all.hobo.data %>%
group_by(Treatment) %>%
mutate(temp.med = ifelse(Temp, median(Temp, na.rm=TRUE), ifelse(Temp==NA, NA)))
# then calculate the residual for each temperature
all.hobo.data$temp.med.res<-abs(all.hobo.data$Temp-all.hobo.data$temp.med)
# Then we run an ANOVA, and post-hoc if necessary:
levene.dat.aov<-aov(temp.med.res~Treatment, all.hobo.data)
summary(levene.dat.aov)
TukeyHSD(levene.dat.aov)
p1 = Tank1.1_all %>%
ggplot(aes(x = DateTime_ct, y = Temp))+
geom_line(color = 'darkgrey', lwd=1)+
ylim(26,34) +
geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
ggtitle("Control") +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-07 00:00:00", "2016-09-22 00:00:00","2016-11-10 18:00:00","2016-11-14 00:00:00","2016-11-21 00:00:00","2016-12-11 23:55:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-07 00:00:00", "2016-12-11 23:55:00")))+
theme_classic() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
p1
p1_var = Tank1.1_var %>%
ggplot(aes(x = DateTime_ct, y = Temp))+
geom_line(color = 'darkgrey', lwd=1)+
ylim(26,34) +
geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
ggtitle("Control") +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-22 00:00:00","2016-11-10 18:00:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-22 00:00:00", "2016-11-10 18:00:00")))+
theme_classic() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
p1_var
p2 = Tank2.1_all %>%
ggplot(aes(x = DateTime_ct, y = Temp))+
geom_line(color = '#FF9966', lwd=1)+
ylim(26,34) +
geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
ggtitle("Low Variability") +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-07 00:00:00", "2016-09-22 00:00:00","2016-11-10 18:00:00","2016-11-14 00:00:00","2016-11-21 00:00:00","2016-12-11 23:55:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-07 00:00:00", "2016-12-11 23:55:00")))+
theme_classic() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
p2
p2_var = Tank2.1_var %>%
ggplot(aes(x = DateTime_ct, y = Temp))+
geom_line(color = '#FF9966', lwd=1)+
ylim(26,34) +
geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
ggtitle("Low Variability") +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-22 00:00:00","2016-11-10 18:00:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-22 00:00:00", "2016-11-10 18:00:00")))+
theme_classic() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
p2_var
p3 = Tank3.1_all %>%
ggplot(aes(x = DateTime_ct, y = Temp))+
geom_line(color = '#CC3300', lwd=1)+
ylim(26,34) +
geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
ggtitle("Moderate Variability") +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-07 00:00:00", "2016-09-22 00:00:00","2016-11-10 18:00:00","2016-11-14 00:00:00","2016-11-21 00:00:00","2016-12-11 23:55:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-07 00:00:00", "2016-12-11 23:55:00")))+
theme_classic() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
p3
p3_var = Tank3.1_var %>%
ggplot(aes(x = DateTime_ct, y = Temp))+
geom_line(color = '#CC3300', lwd=1)+
ylim(26,34) +
geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
ggtitle("Moderate Variability") +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-22 00:00:00","2016-11-10 18:00:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-22 00:00:00", "2016-11-10 18:00:00")))+
theme_classic() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
p3_var
p4 = Tank4.2_all %>%
ggplot(aes(x = DateTime_ct, y = Temp))+
geom_line(color = '#7f0000', lwd=1)+
ylim(26,34) +
geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
ggtitle("High Variability") +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-07 00:00:00", "2016-09-22 00:00:00","2016-11-10 18:00:00","2016-11-14 00:00:00","2016-11-21 00:00:00","2016-12-11 23:55:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-07 00:00:00", "2016-12-11 23:55:00")))+
theme_classic() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
p4
p4_var = Tank4.2_var %>%
ggplot(aes(x = DateTime_ct, y = Temp))+
geom_line(color = '#7f0000', lwd=1)+
ylim(26,34) +
geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
ggtitle("High Variability") +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-22 00:00:00","2016-11-10 18:00:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-22 00:00:00", "2016-11-10 18:00:00")))+
theme_classic() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
p4_var
p5 = Tank5.3 %>%
ggplot(aes(x = DateTime_ct, y = Temp))+
geom_line(color = 'blue', lwd=1)+
ylim(26,34) +
geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
ggtitle("Control 2") +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-07 00:00:00", "2016-09-22 00:00:00","2016-11-10 18:00:00","2016-11-14 00:00:00","2016-11-21 00:00:00","2016-12-11 23:55:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-07 00:00:00", "2016-12-11 23:55:00")))+
theme_classic() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
p5
p5_var = Tank5.3_var %>%
ggplot(aes(x = DateTime_ct, y = Temp))+
geom_line(color = 'blue', lwd=1)+
ylim(26,34) +
geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
ggtitle("Control 2") +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-22 00:00:00","2016-11-10 18:00:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-22 00:00:00", "2016-11-10 18:00:00")))+
theme_classic() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
p5_var
# ignore control 2, all data
hobo_plot <- grid.arrange(p1, p2, p3, p4, nrow = 2)
# ignore control 2, only variability data
hobo_plot_var <- grid.arrange(p1_var, p2_var, p3_var, p4_var, nrow = 2)
# include control 2, all data
hobo_plot_ctrl2 <- grid.arrange(p1, p2, p3, p4, p5, nrow = 3)
# include control 2, only variability data
hobo_plot_ctrl2_var <- grid.arrange(p1_var, p2_var, p3_var, p4_var, p5_var, nrow = 3)
#### Combine all hobo variability objects to plot ####
all_temp = rbind(Tank1.1_all, Tank2.1_all, Tank3.1_all, Tank4.2_all)
head(all_temp)
str(all_temp)
all_temp$Treatment = factor(all_temp$Treatment, levels = c("Control","Low Var","Mod Var","High Var"))
all_var = rbind(Tank1.1_var, Tank2.1_var, Tank3.1_var, Tank4.2_var)
head(all_var)
str(all_var)
all_var$Treatment = factor(all_var$Treatment, levels = c("Control","Low Var","Mod Var","High Var"))
all_stress = rbind(Tank1.1_stress, Tank2.1_stress, Tank3.1_stress, Tank4.2_stress)
head(all_stress)
str(all_stress)
all_stress$Treatment = factor(all_stress$Treatment, levels = c("Control","Low Var","Mod Var","High Var"))
cols_treat_reds <- c("Control" = "darkgrey", "Low Var" = "#FF9966", "Mod Var"="#CC3300", "High Var"="#7f0000")
# plot the variability period
str(all_var)
all_var$Treatment = factor(all_var$Treatment, levels = c("High Var", "Mod Var", "Low Var", "Control"))
all_var.plot = all_var %>%
ggplot(aes(x = DateTime_ct, y = Temp, color = Treatment))+
geom_line(aes(color = Treatment), lwd=1, alpha = 0.8)+
scale_color_manual(values = cols_treat_reds)+
ylim(26,34) +
geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
#ggtitle("Control 2") +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-22 00:00:00","2016-11-10 18:00:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-22 00:00:00", "2016-11-10 18:00:00")))+
theme_bw() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
all_var.plot
# plot the whole time course - figure 1C
all_temp$Treatment = factor(all_temp$Treatment, levels = c("High Var", "Mod Var", "Low Var", "Control"))
all_temp.plot = all_temp %>%
ggplot(aes(x = DateTime_ct, y = Temp, color = Treatment))+
annotate("rect", xmin = as.POSIXct("2016-09-07 00:00:00"), xmax = as.POSIXct("2016-09-22 00:00:00"), ymin = - Inf, ymax = Inf, fill = "gray", alpha = 0.3)+
annotate("rect", xmin = as.POSIXct("2016-09-22 00:00:00"), xmax = as.POSIXct("2016-11-10 18:00:00"), ymin = - Inf, ymax = Inf, fill = "orange", alpha = 0.15)+
annotate("rect", xmin = as.POSIXct("2016-11-10 18:00:00"), xmax = as.POSIXct("2016-11-25 00:00:00"), ymin = - Inf, ymax = Inf, fill = "red4", alpha = 0.15)+
annotate("rect", xmin = as.POSIXct("2016-11-25 00:00:00"), xmax = as.POSIXct("2016-12-11 23:55:00"), ymin = - Inf, ymax = Inf, fill = "royalblue4", alpha = 0.15)+
geom_line(aes(color = Treatment), lwd=0.75)+
scale_color_manual(values = cols_treat_reds)+
#geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=.5) +
xlab("Day") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-07 00:00:00", "2016-09-22 00:00:00","2016-11-10 18:00:00","2016-11-14 00:00:00","2016-11-21 00:00:00","2016-11-25 00:00:00", "2016-12-11 23:55:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-07 00:00:00", "2016-12-11 23:55:00")))+
scale_y_continuous(name = "Temperature (째C)", breaks = seq(26,33,1))+
theme_bw()+
#theme(axis.text.x = element_blank())
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
all_temp.plot
all_stress_2 = all_stress %>%
#dplyr::filter(DateTime < "2016-11-21 00:00:00" & DateTime > "2016-11-14 00:00:00") %>%# to look at just stress
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-25 00:00:00") %>%# to look at just recovery
summarise_at(vars(Temp), list(mean_temp = mean, sd_temp = sd, se_temp = std.error), na.rm=TRUE)
all_stress_2
# Find overall mean during heat challenge and recovery periods:
library(plotrix)
all_stress_2 = all_stress %>%
#dplyr::filter(DateTime < "2016-11-21 00:00:00" & DateTime > "2016-11-14 00:00:00") %>%# to look at just stress
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-25 00:00:00") %>%# to look at just recovery
summarise_at(vars(Temp), list(mean_temp = mean, sd_temp = sd, se_temp = std.error), na.rm=TRUE)
all_stress_2
Tank1.1_var.nona = Tank1.1_var %>%
drop_na(Temp)
Tank1.1_var.dailystats<-data.frame("DayRange"=tapply(Tank1.1_var.nona$Temp, Tank1.1_var.nona$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(Tank1.1_var.nona$Temp, Tank1.1_var.nona$Day, min),"DayMax"=tapply(Tank1.1_var.nona$Temp, Tank1.1_var.nona$Day, max), "DayMean"=tapply(Tank1.1_var.nona$Temp, Tank1.1_var.nona$Day, mean))
Tank1.1_var.dailystats <- tibble::rownames_to_column(Tank1.1_var.dailystats, "date")
Tank1.1_var.dailystats$treat <- "Control 1"
head(Tank1.1_var.dailystats)
Tank2.1_var.nona = Tank2.1_var %>%
drop_na(Temp)
Tank2.1_var.dailystats<-data.frame("DayRange"=tapply(Tank2.1_var.nona$Temp, Tank2.1_var.nona$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(Tank2.1_var.nona$Temp, Tank2.1_var.nona$Day, min),"DayMax"=tapply(Tank2.1_var.nona$Temp, Tank2.1_var.nona$Day, max), "DayMean"=tapply(Tank2.1_var.nona$Temp, Tank2.1_var.nona$Day, mean))
Tank2.1_var.dailystats <- tibble::rownames_to_column(Tank2.1_var.dailystats, "date")
Tank2.1_var.dailystats$treat <- "Low Var"
head(Tank2.1_var.dailystats)
Tank3.1_var.nona = Tank3.1_var %>%
drop_na(Temp)
Tank3.1_var.dailystats<-data.frame("DayRange"=tapply(Tank3.1_var.nona$Temp, Tank3.1_var.nona$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(Tank3.1_var.nona$Temp, Tank3.1_var.nona$Day, min),"DayMax"=tapply(Tank3.1_var.nona$Temp, Tank3.1_var.nona$Day, max), "DayMean"=tapply(Tank3.1_var.nona$Temp, Tank3.1_var.nona$Day, mean))
Tank3.1_var.dailystats <- tibble::rownames_to_column(Tank3.1_var.dailystats, "date")
Tank3.1_var.dailystats$treat <- "Mod Var"
head(Tank3.1_var.dailystats)
Tank4.2_var.nona = Tank4.2_var %>%
drop_na(Temp)
Tank4.2_var.dailystats<-data.frame("DayRange"=tapply(Tank4.2_var.nona$Temp, Tank4.2_var.nona$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(Tank4.2_var.nona$Temp, Tank4.2_var.nona$Day, min),"DayMax"=tapply(Tank4.2_var.nona$Temp, Tank4.2_var.nona$Day, max), "DayMean"=tapply(Tank4.2_var.nona$Temp, Tank4.2_var.nona$Day, mean))
Tank4.2_var.dailystats <- tibble::rownames_to_column(Tank4.2_var.dailystats, "date")
Tank4.2_var.dailystats$treat <- "High Var"
head(Tank4.2_var.dailystats)
# combine daily variability stats for all loggers
library(Rmisc)
var.dailystats.all = rbind(Tank1.1_var.dailystats,Tank2.1_var.dailystats,Tank3.1_var.dailystats,Tank4.2_var.dailystats)
str(var.dailystats.all)
var.dailystats.all$treat = factor(var.dailystats.all$treat, levels = c("Control 1","Low Var","Mod Var","High Var"))
summarySE(data = var.dailystats.all, measurevar = "DayRange", groupvar = "treat")
summarySE(data = var.dailystats.all, measurevar = "DayMean", groupvar = "treat")
summarySE(data = var.dailystats.all, measurevar = "DayMax", groupvar = "treat")
summarySE(data = var.dailystats.all, measurevar = "DayMin", groupvar = "treat")
#### HOBO DAILY STATS & PLOTS####
# daily range
aov.dtv=aov(DayRange~treat, data=var.dailystats.all)
summary(aov.dtv)
par(mfrow=c(2,2))
plot(aov.dtv)
TukeyHSD(aov.dtv)
cols_treat_reds <- c("darkgrey", "#FF9966","#CC3300","#7f0000")
# plot boxplots of  treatments - supplemental fig
tempPlot.dtv <- ggplot(var.dailystats.all, aes(x = treat, y = DayRange)) +
geom_jitter(shape=16,
position=position_jitter(0.2),
alpha=0.99,
aes(color = treat)) +
scale_color_manual(values = cols_treat_reds) + # for jittered points
geom_boxplot(outlier.shape = NA,
alpha = 0.7,
aes(fill = treat))+
scale_fill_manual(values = cols_treat_reds) + # for boxplot
#xlab("Treatment")+
ylab("Temperature (째C)")+
#ylim(27,32)+
theme_bw()+
theme(axis.title.x = element_blank(), axis.text.x = element_blank(), legend.position = "none")+
ggtitle("A. Daily Variability")
tempPlot.dtv
str(var.dailystats.all)
#### HOBO DAILY STATS & PLOTS####
# daily range
aov.dtv=aov(DayRange~treat, data=var.dailystats.all)
summary(aov.dtv)
par(mfrow=c(2,2))
plot(aov.dtv)
TukeyHSD(aov.dtv)
# daily mean
aov.mean=aov(DayMean~treat, data=var.dailystats.all)
summary(aov.mean)
par(mfrow=c(2,2))
plot(aov.mean)
TukeyHSD(aov.mean)
tempPlot.mean <- ggplot(var.dailystats.all, aes(x = treat, y = DayMean)) +
geom_jitter(shape=16,
position=position_jitter(0.2),
alpha=0.99,
aes(color = treat)) +
scale_color_manual(values = cols_treat_reds) + # for jittered points
geom_boxplot(outlier.shape = NA,
alpha = 0.7,
aes(fill = treat))+
scale_fill_manual(values = cols_treat_reds) + # for boxplot
xlab("Treatment")+
ylab("Temperature (째C)")+
#ylim(27,32)+
theme(legend.position = "none")+
theme_bw()+
theme(axis.title.x = element_blank(), axis.text.x = element_blank(), legend.position = "none")+
ggtitle("B. Daily Mean")
tempPlot.mean
head(apex)
library(ggplot2)
library(lme4)
library(plotly)
library(ggridges)
library(tidyverse)
library(arsenal) #easily compare two data frames
library(Rmisc)
library(lmerTest)
library(emmeans)
library(reshape)
library(readxl)
library(wesanderson)
library(ggpubr)
library(car)
library(sjPlot)
library(effects)
library(glmmTMB)
library(performance)
library(patchwork)
library(magrittr)
library(SciViews)
library(ggpubr)
library(ggfortify)
library(ggplot2)
library(cluster)
library(FactoMineR) # lots of options for pca visuals and summary stats
library(factoextra)
library(corrplot)
library(dplyr)
library(cowplot)
library(vegan)
##### Read in and format data #####
# set wd
setwd("/Users/hannahaichelman/Dropbox/BU/TVE")
# read in the data
post_phys <- read.csv('dtvmaster.csv') # physiology data taken at the end of the experiment
init_phys <- read.csv('initial-phys-mod.csv') # physiology data taken at the start of the experiment
getwd()

# merge lineages with relatedness data
rel_i2p_filt_final_lineage = left_join(rel_i2p_filt_final, lineages, by = c("sample_id_a" = "gen_site")) %>%
rename(lineage_a = lineage)
head(rel_i2p_filt_final_lineage)
# merge again to get lineage associated with sample_id_b
rel_i2p_filt_final_lineage2 = left_join(rel_i2p_filt_final_lineage, lineages, by = c("sample_id_b" = "gen_site")) %>%
rename(lineage_b = lineage) %>%
# remove any lineage na's
filter(!is.na(lineage_a)) %>%
filter(!is.na(lineage_b))
head(rel_i2p_filt_final_lineage2)
# create a new column that combines lineage_a and lineage_b with an '_'
rel_i2p_filt_final_lineage2$lineage_comparison = paste(rel_i2p_filt_final_lineage2$lineage_a, rel_i2p_filt_final_lineage2$lineage_b, sep = "_")
rel_i2p_filt_final_lineage2$lineage_comparison = as.factor(rel_i2p_filt_final_lineage2$lineage_comparison)
levels(rel_i2p_filt_final_lineage2$lineage_comparison)
# re-order lineage_comparison factor
rel_i2p_filt_final_lineage2$lineage_comparison = factor(rel_i2p_filt_final_lineage2$lineage_comparison, levels = c("L1_L1", "L1_L2", "L1_L3", "L2_L2", "L2_L1", "L2_L3", "L3_L3", "L3_L1", "L3_L2"))
# summarize relatedness by lineage comparison
rel_lin_summary = rel_i2p_filt_final_lineage2 %>%
group_by(lineage_comparison) %>%
summarize(mean_rab = mean(rab, na.rm = TRUE),
sd_rab = sd(rab, na.rm = TRUE),
n = n())
rel_lin_summary
# make boxplot of relatedness by lineage comparison
comparison_of_interest = c("L1_L1", "L2_L2", "L3_L3")
rel.boxplot = rel_i2p_filt_final_lineage2 %>%
# select only certain lineage comparisons for plotting - uncomment this to look at all comparisons
filter(lineage_comparison %in% comparison_of_interest) %>%
ggplot(aes(x = lineage_comparison, y = rab,fill = lineage_comparison)) +
geom_boxplot() +
#scale_color_manual(values = c("#3f007d", "#807dba", "#bcbddc")) +
scale_fill_manual(values = c("#3f007d", "#807dba", "#bcbddc")) +
labs(y = "Pairwise Relatedness (rab)") +
theme_bw()
rel.boxplot
# create a matrix for the heatmap
rel.mat = pivot_wider(data = rel_i2p_filt_final, names_from = sample_id_a, values_from = rab) %>%
column_to_rownames(var = "sample_id_b")
rel.mat.num = as.matrix(rel.mat)
str(rel.mat.num)
corrplot(rel.mat.num,
type="lower", # show only lower diagonal of corellogram
tl.col="black",  # text color of data label
#order = 'alphabet',
tl.srt=45)
?corrplot()
??corrplot
library(corrplot)
corrplot(rel.mat.num,
type="lower", # show only lower diagonal of corellogram
tl.col="black",  # text color of data label
#order = 'alphabet',
tl.srt=45)
# summarize pairwise relatedness by lineage
rel_lin_summary = rel_i2p_filt_final_lineage %>%
group_by(lineage) %>%
summarize(mean_rab = mean(rab, na.rm = TRUE),
sd_rab = sd(rab, na.rm = TRUE),
n = n())
rel.plot = ggplot(rel_i2p_filt_final_lineage, aes(x = sample_id_a, y = rab, text = sample_id_b, color = lineage)) +
geom_point() +
labs(title = "Pairwise Relatedness by Lineage")
rel.plot
ps.rare.1k.t0 = readRDS("16S_Microbiome/data_files/phyloseq.t0.rarefied.1k.rds")
ps.rare.1k.prestress = readRDS("16S_Microbiome/data_files/phyloseq.prestress.rarefied.1k.rds")
load("16S_Microbiome/data_files/taxa2.Rdata")
ps.rare <- phyloseq(otu_table(seqtab.rare.1k, taxa_are_rows=FALSE),
sample_data(samdf.rare.1k),
tax_table(taxa2))
ps.rare <- phyloseq(otu_table(seqtab.rare.1k, taxa_are_rows=FALSE),
sample_data(samdf.rare.1k),
tax_table(taxa2))
ps.rare # 11369 taxa and 202 samples
#setwd("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability")
ps.rare.1k.t0 = readRDS("16S_Microbiome/data_files/phyloseq.t0.rarefied.1k.rds")
seqtab.rare.1k.t0 <- data.frame(ps.rare.1k.t0@otu_table)
samdf.rare.1k.t0 <- data.frame(ps.rare.1k.t0@sam_data)
ps.rare.1k.prestress = readRDS("16S_Microbiome/data_files/phyloseq.prestress.rarefied.1k.rds")
seqtab.rare.1k.prestress <- data.frame(ps.rare.1k.prestress@otu_table)
samdf.rare.1k.prestress <- data.frame(ps.rare.1k.prestress@sam_data)
ps.rare <- phyloseq(otu_table(seqtab.rare.1k, taxa_are_rows=FALSE),
sample_data(samdf.rare.1k),
tax_table(taxa2))
ps.rare # 11369 taxa and 202 samples
library(dada2); packageVersion("dada2")
# ran into issues downstream, need to install & load more recent version of dada2:
library(devtools)
devtools::install_github("benjjneb/dada2")
library(dada2); packageVersion("dada2")
#Version 1.29.0
library(ShortRead); packageVersion("ShortRead")
#1.56.0
library(Biostrings); packageVersion("Biostrings")
setwd("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability")
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/taxa2.Rdata")
#T0 phyloseq objects
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.clean.t0.Rdata")
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.rare.t0.Rdata")
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.trim.rare.t0.Rdata") # rare otu's trimmed, then rarefied (1k)
#Prestress phyloseq objects
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.clean.prestress.Rdata")
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.rare.prestress.Rdata")
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.trim.rare.prestress.Rdata") # rare otu's trimmed, then rarefied (1k)
# remove Control 2, and lineage NA's
ps.clean.t0 <- subset_samples(ps.clean.t0,(!is.na(lineage)))
ps.clean.t0 <- subset_samples(ps.clean.t0,(!is.na(treat)))
ps.clean.t0 <- subset_samples(ps.clean.t0,lineage!="L3")
ps.rare.t0 <- subset_samples(ps.rare.t0,(!is.na(lineage)))
ps.rare.t0 <- subset_samples(ps.rare.t0,(!is.na(treat)))
ps.rare.t0 <- subset_samples(ps.rare.t0,lineage!="L3")
ps.trim.rare.t0 <- subset_samples(ps.trim.rare.t0,(!is.na(lineage)))
ps.trim.rare.t0 <- subset_samples(ps.trim.rare.t0,(!is.na(treat)))
ps.trim.rare.t0 <- subset_samples(ps.trim.rare.t0,lineage!="L3")
# remove Control 2, low and high variability, and lineage NA's
ps.clean.prestress <- subset_samples(ps.clean.prestress,(!is.na(lineage)))
ps.clean.prestress <- subset_samples(ps.clean.prestress,(!is.na(treat)))
ps.clean.prestress <- subset_samples(ps.clean.prestress,(treat!="Control 2"))
ps.clean.prestress <- subset_samples(ps.clean.prestress,(treat!="Low Var"))
ps.clean.prestress <- subset_samples(ps.clean.prestress,(treat!="High Var"))
ps.clean.prestress <- subset_samples(ps.clean.prestress,lineage!="L3")
ps.rare.prestress <- subset_samples(ps.rare.prestress,(!is.na(lineage)))
ps.rare.prestress <- subset_samples(ps.rare.prestress,(!is.na(treat)))
ps.rare.prestress <- subset_samples(ps.rare.prestress,(treat!="Control 2"))
ps.rare.prestress <- subset_samples(ps.rare.prestress,(treat!="Low Var"))
ps.rare.prestress <- subset_samples(ps.rare.prestress,(treat!="High Var"))
ps.rare.prestress <- subset_samples(ps.rare.prestress,lineage!="L3")
ps.trim.rare.prestress <- subset_samples(ps.trim.rare.prestress,(!is.na(lineage)))
ps.trim.rare.prestress <- subset_samples(ps.trim.rare.prestress,(!is.na(treat)))
ps.trim.rare.prestress <- subset_samples(ps.trim.rare.prestress,(treat!="Control 2"))
ps.trim.rare.prestress <- subset_samples(ps.trim.rare.prestress,(treat!="Low Var"))
ps.trim.rare.prestress <- subset_samples(ps.trim.rare.prestress,(treat!="High Var"))
ps.trim.rare.prestress <- subset_samples(ps.trim.rare.prestress,lineage!="L3")
# moving forward with rarefied data, doesn't seem to make a difference in the results whether rare OTUs trimmed or not
# make the factors of interest actual factors - T0
sample_data(ps.rare.t0)$sitename = as.factor(sample_data(ps.rare.t0)$sitename)
levels(sample_data(ps.rare.t0)$sitename)
sample_data(ps.rare.t0)$lineage = as.factor(sample_data(ps.rare.t0)$lineage)
levels(sample_data(ps.rare.t0)$lineage)
# make the factors of interest actual factors - PreStress
sample_data(ps.rare.prestress)$sitename = as.factor(sample_data(ps.rare.prestress)$sitename)
levels(sample_data(ps.rare.prestress)$sitename)
sample_data(ps.rare.prestress)$lineage = as.factor(sample_data(ps.rare.prestress)$lineage)
levels(sample_data(ps.rare.prestress)$lineage)
sample_data(ps.rare.prestress)$treat = factor(sample_data(ps.rare.prestress)$treat)
levels(sample_data(ps.rare.prestress)$treat)
# set color palettes
cols_site_diverging <- c("CI" = "#543005", "PD"= "#bf812d",  "SP"= "#dfc27d",  "BN" = "#003c30", "BS"= "#35978f", "CA"= "#80cdc1")
cols_treat_reds <- c("darkgrey", "#CC3300")
cols_lineage <- c("L1" = "#3f007d", "L2" = "#807dba")
ord.t0 <- ordinate(ps.rare.t0, "PCoA", "bray")
pcoa.lineage.t0 = plot_ordination(ps.rare.t0,ord.t0,color="lineage",shape="sitename")+
geom_point(size = 2.5, alpha=0.8)+
scale_color_manual(name="Lineage",values=cols_lineage)+
stat_ellipse(aes(group=ps.rare.t0@sam_data$lineage), type = "t", lwd = 1)+
scale_shape_manual(name="Site", values = c(15,16,17,22,21,24))+
theme_bw()
pcoa.lineage.t0
ggsave(pcoa.lineage.t0, filename = "pcoas.allasvs.rare.lineage.t0.pdf", width=5, height=4, units=c("in"), useDingbats=FALSE)
ggsave(pcoa.lineage.t0, filename = "pcoas.allasvs.rare.lineage.t0.pdf", width=5, height=4, units=c("in"), useDingbats=FALSE)
pcoa.site.t0 = plot_ordination(ps.rare.t0, ord.t0, color="sitename", shape="sitename")+
geom_point(alpha=0.8)+
scale_color_manual(name="Site",values=cols_site_diverging)+
scale_shape_manual(name="Site",values=c(15,16,17,22,21,24))+
stat_ellipse()+
theme_bw()
pcoa.site.t0
# now prestress data rarefied
ord.ps <- ordinate(ps.rare.prestress, "PCoA", "bray")
pcoa.site.ps = plot_ordination(ps.rare.prestress, ord.ps, color="sitename", shape="sitename")+
geom_point(alpha=0.8)+
scale_color_manual(name="Site",values=cols_site_diverging)+
scale_shape_manual(name="Site",values=c(15,16,17,22,21,24))+
stat_ellipse()+
theme_bw()
pcoa.lineage.ps = plot_ordination(ps.rare.prestress,ord.ps,color="lineage")+
geom_point(alpha=0.8)+
scale_color_manual(name="Lineage",values=cols_lineage)+
stat_ellipse()+
theme_bw()
pcoa.treat.ps = plot_ordination(ps.rare.prestress,ord.ps, color="treat", shape="treat")+
geom_point(alpha=0.8)+
scale_color_manual(name="Treatment",values=cols_treat_reds)+
scale_shape_manual(name="Treatment",values=c(15,16))+
stat_ellipse()+
theme_bw()
gg.pcoa.all.rare.ps = ggarrange(pcoa.lineage.ps, pcoa.site.ps, pcoa.treat.ps,
labels = c("(a)","(b)","(c)"),
nrow=1,
common.legend=F,legend="none")
library(rlang)
library(stringr)
library(dplyr)
library(stats)
library(ggpubr)
library(vegan)
library(cowplot)
library(tidyverse)
#library(MCMC.OTU)
#install.packages("remotes")
#remotes::install_github("Jtrachsel/funfuns")
library(funfuns)
#library(MCMC.OTU)
install.packages("remotes")
remotes::install_github("Jtrachsel/funfuns")
library(funfuns)
library(phyloseq)
gg.pcoa.all.rare.ps = ggarrange(pcoa.lineage.ps, pcoa.site.ps, pcoa.treat.ps,
labels = c("(a)","(b)","(c)"),
nrow=1,
common.legend=F,legend="none")
gg.pcoa.all.rare.ps
ggarrange??
??ggarrange
library(ggpubr)
library(rlang)
library(stringr)
library(dplyr)
library(stats)
library(ggpubr)
library(vegan)
library(cowplot)
library(tidyverse)
#library(MCMC.OTU)
#install.packages("remotes")
#remotes::install_github("Jtrachsel/funfuns")
library(funfuns)
library(phyloseq)
gg.pcoa.all.rare.ps = ggarrange(pcoa.lineage.ps, pcoa.site.ps, pcoa.treat.ps,
labels = c("(a)","(b)","(c)"),
nrow=1,
common.legend=F,legend="none")
gg.pcoa.all.rare.ps
# set to github repository location
setwd("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability")
library(ggplot2)
library(cowplot)
library(phyloseq)
library(car)
library(ggpubr)
library(vegan)
library(dada2)
install.packages("dada2")
library(ggplot2)
library(cowplot)
library(phyloseq)
library(car)
library(ggpubr)
library(vegan)
library(tidyverse)
# can skip this section once you've run it once and saved output Rdata files
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/taxa2.Rdata")
#cleaned, rarefied files:
ps.rare.1k.t0 = readRDS("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/phyloseq.t0.rarefied.1k.rds")
seqtab.rare.1k.t0 <- data.frame(ps.rare.1k.t0@otu_table)
seqtab.rare.1k.t0 <- data.frame(ps.rare.1k.t0@otu_table)
samdf.rare.1k.t0 <- data.frame(ps.rare.1k.t0@sam_data)
ps.rare.1k.prestress = readRDS("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/phyloseq.prestress.rarefied.1k.rds")
seqtab.rare.1k.prestress <- data.frame(ps.rare.1k.prestress@otu_table)
samdf.rare.1k.prestress <- data.frame(ps.rare.1k.prestress@sam_data)
ps.rare.t0 <- phyloseq(otu_table(seqtab.rare.1k.t0, taxa_are_rows=FALSE),
sample_data(samdf.rare.1k.t0),
tax_table(taxa2))
ps.rare.t0
# can skip this section once you've run it once and saved output Rdata files
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/taxa2.Rdata")
#cleaned, rarefied files:
ps.rare.1k.t0 = readRDS("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/phyloseq.t0.rarefied.1k.rds")
seqtab.rare.1k.t0 <- data.frame(ps.rare.1k.t0@otu_table)
samdf.rare.1k.t0 <- data.frame(ps.rare.1k.t0@sam_data)
ps.rare.1k.prestress = readRDS("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/phyloseq.prestress.rarefied.1k.rds")
seqtab.rare.1k.prestress <- data.frame(ps.rare.1k.prestress@otu_table)
samdf.rare.1k.prestress <- data.frame(ps.rare.1k.prestress@sam_data)
ps.rare.t0 <- phyloseq(otu_table(seqtab.rare.1k.t0, taxa_are_rows=FALSE),
sample_data(samdf.rare.1k.t0),
tax_table(taxa2))
ps.rare.t0
ps.rare.prestress <- phyloseq(otu_table(seqtab.rare.1k.prestress, taxa_are_rows=FALSE),
sample_data(samdf.rare.1k.prestress),
tax_table(taxa2))
ps.rare.prestress
save(ps.rare.t0,file="ps.rare.t0.Rdata")
save(ps.rare.prestress,file="ps.rare.prestress.Rdata")
#cleaned, unrarefied files:
ps.clean.t0 = readRDS("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/phyloseq.cleanest.t0.rds")
seqtab.clean.t0 <- data.frame(ps.clean.t0@otu_table)
samdf.clean.t0 <- data.frame(ps.clean.t0@sam_data)
ps.clean.prestress = readRDS("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/phyloseq.cleanest.prestress.rds")
seqtab.clean.prestress <- data.frame(ps.clean.prestress@otu_table)
# can skip to here once you have made the .Rdata files above
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/taxa2.Rdata")
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.clean.t0.Rdata")
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.clean.prestress.Rdata")
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.rare.t0.Rdata")
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.rare.prestress.Rdata")
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.trim.rare.t0.Rdata")
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.trim.rare.prestress.Rdata")
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.trim.t0.Rdata")
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.trim.prestress.Rdata")
# remove lineage NA's and L3 from T0 data
ps.clean.t0 <- subset_samples(ps.clean.t0,(!is.na(lineage)))
ps.clean.t0 <- subset_samples(ps.clean.t0,(lineage!="L3"))
ps.rare.t0 <- subset_samples(ps.rare.t0,(!is.na(lineage)))
ps.rare.t0 <- subset_samples(ps.rare.t0,(lineage!="L3"))
ps.trim.rare.t0 <- subset_samples(ps.trim.rare.t0,(!is.na(lineage)))
ps.trim.rare.t0 <- subset_samples(ps.trim.rare.t0,(lineage!="L3"))
ps.trim.t0 <- subset_samples(ps.trim.t0,(!is.na(lineage)))
ps.trim.t0 <- subset_samples(ps.trim.t0,(lineage!="L3"))
# remove Control 2, low variability, and high variability treatments, lineage NA's, and L3 from prestress data
ps.clean.prestress <- subset_samples(ps.clean.prestress,(!is.na(lineage)))
ps.clean.prestress <- subset_samples(ps.clean.prestress,(lineage!="L3"))
ps.clean.prestress <- subset_samples(ps.clean.prestress,(!is.na(treat)))
ps.clean.prestress <- subset_samples(ps.clean.prestress,(treat!="Control 2"))
ps.clean.prestress <- subset_samples(ps.clean.prestress,(treat!="Low Var"))
ps.clean.prestress <- subset_samples(ps.clean.prestress,(treat!="High Var"))
ps.rare.prestress <- subset_samples(ps.rare.prestress,(!is.na(lineage)))
ps.rare.prestress <- subset_samples(ps.rare.prestress,(treat!="L3"))
ps.rare.prestress <- subset_samples(ps.rare.prestress,(!is.na(treat)))
ps.rare.prestress <- subset_samples(ps.rare.prestress,(treat!="Control 2"))
ps.rare.prestress <- subset_samples(ps.rare.prestress,(treat!="Low Var"))
ps.rare.prestress <- subset_samples(ps.rare.prestress,(treat!="High Var"))
ps.trim.rare.prestress <- subset_samples(ps.trim.rare.prestress,(!is.na(lineage)))
ps.trim.rare.prestress <- subset_samples(ps.trim.rare.prestress,(lineage!="L3"))
ps.trim.rare.prestress <- subset_samples(ps.trim.rare.prestress,(!is.na(treat)))
ps.trim.rare.prestress <- subset_samples(ps.trim.rare.prestress,(treat!="Control 2"))
ps.trim.rare.prestress <- subset_samples(ps.trim.rare.prestress,(treat!="Low Var"))
ps.trim.rare.prestress <- subset_samples(ps.trim.rare.prestress,(treat!="High Var"))
ps.trim.prestress <- subset_samples(ps.trim.prestress,(!is.na(lineage)))
ps.trim.prestress <- subset_samples(ps.trim.prestress,(lineage!="L3"))
ps.trim.prestress <- subset_samples(ps.trim.prestress,(!is.na(treat)))
ps.trim.prestress <- subset_samples(ps.trim.prestress,(treat!="Control 2"))
ps.trim.prestress <- subset_samples(ps.trim.prestress,(treat!="Low Var"))
ps.trim.prestress <- subset_samples(ps.trim.prestress,(treat!="High Var"))
df.t0 <- data.frame(estimate_richness(ps.clean.t0, split=TRUE, measures=c("Shannon","InvSimpson","Observed")))
samdf.clean.t0 <- data.frame(ps.clean.t0@sam_data)
df.t0$frag <- rownames(df.t0)
df.t0.div <- merge(df.t0,samdf.clean.t0,by="frag") #add sample data
#shannon diversity divided by species richness
df.t0.div$even <- df.t0.div$Shannon/(log(df.t0.div$Observed))
str(df.t0.div)
df.t0.div$lineage = as.factor(df.t0.div$lineage)
df.t0.div$sitename = as.factor(df.t0.div$sitename)
df.ps <- data.frame(estimate_richness(ps.clean.prestress, split=TRUE, measures=c("Shannon","InvSimpson","Observed")))
samdf.clean.ps <- data.frame(ps.clean.prestress@sam_data)
df.ps$frag <- rownames(df.ps)
df.ps.div <- merge(df.ps,samdf.clean.ps,by="frag") #add sample data
#shannon diversity divided by species richness
df.ps.div$even <- df.ps.div$Shannon/(log(df.ps.div$Observed))
str(df.ps.div)
df.ps.div$treat = as.factor(df.ps.div$treat)
df.ps.div$lineage = as.factor(df.ps.div$lineage)
df.ps.div$sitename = as.factor(df.ps.div$sitename)
#plotting lineages
cols_lineage <- c("L1" = "#3f007d", "L2" = "#807dba")
gg.lin.sh.t0 <- ggplot(df.t0.div, aes(x=lineage, y=Shannon,color=lineage))+
geom_boxplot(outlier.shape=NA)+
scale_colour_manual(values=cols_lineage)+
geom_jitter(alpha=0.5)+
xlab("Lineage")+
ylab("Shannon index")+
theme_bw()+
#guides(color=guide_legend(title="Reef zone"),shape=guide_legend(title="Reef zone"))+
theme(axis.title.x = element_blank(), legend.position = "none")
gg.lin.sh.t0
#Shannon
shapiro.test(df.t0.div$Shannon) # not fine
leveneTest(df.t0.div$Shannon~lineage,data=df.t0.div) #fine
a.div.t0 <- aov(Shannon~lineage,data=df.t0.div)
summary(a.div.t0)
a.div.ps <- aov(Shannon~lineage+treat,data=df.ps.div)
summary(a.div.ps)
gg.lin.eve.t0 <- ggplot(df.t0.div, aes(x=lineage, y=even,color=lineage))+
geom_boxplot(outlier.shape=NA)+
scale_colour_manual(values=cols_lineage)+
geom_jitter(alpha=0.5)+
xlab("Lineage")+
ylab("Evenness")+
theme_bw()+
#guides(color=guide_legend(title="Reef zone"),shape=guide_legend(title="Reef zone"))+
theme(axis.title.x = element_blank(), legend.position = "none")
gg.lin.eve.t0
gg.lin.eve.ps <- ggplot(df.ps.div, aes(x=lineage, y=even,color=lineage))+
geom_boxplot(outlier.shape=NA)+
scale_colour_manual(values=cols_lineage)+
geom_jitter(alpha=0.5)+
xlab("Lineage")+
ylab("Evenness")+
theme_bw()+
#guides(color=guide_legend(title="Reef zone"),shape=guide_legend(title="Reef zone"))+
theme(axis.title.x = element_blank(), legend.position = "none")
gg.lin.eve.ps
#plotting treatment
gg.treat.eve.ps <- ggplot(df.ps.div, aes(x=treat, y=even,color=treat))+
geom_boxplot(outlier.shape=NA)+
scale_colour_manual(values=cols_treat_reds)+
geom_jitter(alpha=0.5)+
xlab("Treatment")+
ylab("Evenness")+
theme_bw()+
#guides(color=guide_legend(title="Reef zone"),shape=guide_legend(title="Reef zone"))+
theme(axis.title.x = element_blank(), legend.position = "none")
gg.treat.eve.ps
# lineages
plots.lin.t0 = ggarrange(gg.lin.sh.t0, gg.lin.sim.t0, gg.lin.obs.t0, gg.lin.eve.t0, ncol=2, nrow=2)
### Used packages that need to be installed to run code:
needed_packages <- c("ncdf4", "raster", "tidyverse", "xts") # Specify necessary packages
not_installed <- needed_packages[!(needed_packages %in% installed.packages()[ , "Package"])] # Extract not installed packages
if(length(not_installed)) install.packages(not_installed) # Install not installed packages
library(ncdf4)
library(raster)
library(tidyverse)
library(xts)
#### Set-Up ####
library(tidyverse)
library(Rmisc)
library(lme4)
library(ggpubr)
#### Coring Data ####
cores = read.csv("Coring_Data/data_files/Growth_allRegions_JPcoringdata.csv")
head(cores)
pan_cores = cores %>%
filter(region == "w") %>%
filter(spp == "s")
str(pan_cores)
pan_cores$rz = as.factor(pan_cores$rz)
pan_cores$site = as.factor(pan_cores$site)
pan_cores$spp = as.factor(pan_cores$spp)
# Re-name factor levels for sites
pan_cores$site <- dplyr::recode(pan_cores$site,
wirci = 'CI',
wirpd = 'PD',
wirpl = 'PL',
wirsp = 'SP',
worbn = 'BN',
worbs = 'BS',
worca = 'CA',
wordm = 'DM')
# Re-name core IDs
pan_cores$coreID <- dplyr::recode(pan_cores$coreID,
wordm37s='W_OR_DM_37_S',
worbn15s='W_OR_BN_15_S',
worbs17s='W_OR_BS_17_S',
worca35s='W_OR_CA_35_S',
wirsp05s='W_IR_SP_5_S',
worbn09s='W_OR_BN_9_S',
wirsp02s='W_IR_SP_2_S',
worca27s='W_OR_CA_27_S',
wirpd59s='W_IR_PD_59_S',
worbn14s='W_OR_BN_14_S',
wordm42s='W_OR_DM_42_S',
worbn16s='W_OR_BN_16_S',
worbs23s='W_OR_BS_23_S',
worbs22s='W_OR_BS_22_S',
wirsp03s='W_IR_SP_3_S',
worca30s='W_OR_CA_30_S',
worbs25s='W_OR_BS_25_S',
wordm40s='W_OR_DM_40_S',
worbn07s='W_OR_BN_7_S',
wordm41s='W_OR_DM_41_S',
wirpd63s='W_IR_PD_63_S',
wirci57s='W_IR_CI_57_S',
wirpl51s='W_IR_PL_51_S',
wirpd60s='W_IR_PD_60_S',
wirpd61s='W_IR_PD_61_S',
wirpl47s='W_IR_PL_47_S',
wirsp04s='W_IR_SP_4_S',
worbs20s='W_OR_BS_20_S',
wordm38s='W_OR_DM_38_S',
wirpl48s='W_IR_PL_48_S')
# take a look at the metadata from Annabel
#loading in RAD data with core ID and bam file name
rad_meta <- read.csv("Physiology_Data/data_files/all_SSID_updated.csv")
rad_meta <- filter(rad_meta, Project=="cores")
head(rad_meta)
dim(rad_meta)
# loading in and cleaning up lineage assignment data to only include core info
lineages <- read.csv("Physiology_Data/data_files/samples_on_plate_somelineages.csv")
colnames(lineages)[1] ="SampleID"
colnames(lineages)[3] ="lineage"
lineages <- dplyr::filter(lineages, PROJECT=="Panama cores")
head(lineages)
dim(lineages)
#packages
#install.packages("decontam")
library(decontam)
packageVersion("decontam") #‘1.10.0’ - NK's version - 1.16.0 HA's version
library(phyloseq)
library(tidyverse)
library(ggpubr)
library(dplyr)
library(viridis)
its2_all = read.csv("data_files/SymPortal_AllTimes_RawDIVs.csv")
its2_all = read.csv("ITS2_Symbiodiniaceae/data_files/SymPortal_AllTimes_RawDIVs.csv")
head(its2_all)
# Remove samples not included in this dataset
its2_all = its2_all %>%
dplyr::filter(frag != "Alexa2") %>%
dplyr::filter(frag != "Alexa1") %>%
dplyr::filter(frag != "MA2") %>%
dplyr::filter(frag != "ME1") %>%
dplyr::filter(frag != "negcontrol1") %>%
dplyr::filter(frag != "ITS-neg-old") %>%
dplyr::filter(frag != "negcontrol2") %>%
dplyr::filter(frag != "ITS-neg-new")
# Remove clades that are not symbiotic
its2_all2 = its2_all %>%
select(-contains("E1c"))
# Look for and remove DIVs with 0 reads after removing samples
colSums(its2_all2[,-1])
# Remove clades that are not symbiotic
its2_all2 = its2_all %>%
select(-contains("E1c"))

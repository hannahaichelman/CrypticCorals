# Plot the difference over time by treatment
plot(apex_dayavg_control$mean_temp - Tank1.1_dayavg$mean_temp, main = "Control Treatment", ylab = "Apex - Hobo (°C)", ylim = c(0,1.1)) # control
plot(apex_dayavg_lowvar$mean_temp - Tank2.1_dayavg$mean_temp, main = "Low Variability Treatment", ylab = "Apex - Hobo (°C)", ylim = c(0,1.1)) # low variability
plot(apex_dayavg_modvar$mean_temp - Tank3.1_dayavg$mean_temp, main = "Moderate Variability Treatment", ylab = "Apex - Hobo (°C)", ylim = c(0,1.1)) # moderate variability
plot(apex_dayavg_highvar$mean_temp - Tank4.2_dayavg$mean_temp, main = "High Variability Treatment", ylab = "Apex - Hobo (°C)", ylim = c(-0.1,2.2)) # high variability
Tank1.1_all <- Tank1.1 %>%
mutate(Temp = Temp + 0.686064) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-12 00:00:00" & DateTime > "2016-09-07 00:00:00") %>%
mutate(Treatment = "Control")
Tank1.1_var <- Tank1.1 %>%
mutate(Temp = Temp + 0.686064) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-11-10 18:00:00" & DateTime > "2016-09-22 00:00:00") %>%
mutate(Treatment = "Control")
Tank1.1_stress <- Tank1.1 %>%
mutate(Temp = Temp + 0.686064) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-10 18:00:00") %>%
mutate(Treatment = "Control")
Tank2.1_all <- Tank2.1 %>%
mutate(Temp = Temp + 0.724092) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-12 00:00:00" & DateTime > "2016-09-07 00:00:00") %>%
mutate(Treatment = "Low Var")
Tank2.1_var <- Tank2.1 %>%
mutate(Temp = Temp + 0.724092) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-11-10 18:00:00" & DateTime > "2016-09-22 00:00:00") %>%
mutate(Treatment = "Low Var")
Tank2.1_stress <- Tank2.1 %>%
mutate(Temp = Temp + 0.724092) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-10 18:00:00") %>%
mutate(Treatment = "Low Var")
# Tank 3 doesn't record until the end of the experiment
Tank3.1_all <- Tank3.1 %>%
mutate(Temp = Temp + 0.7730094) %>% # treatment-specific correction
dplyr::filter(DateTime > "2016-09-07 00:00:00") %>%
mutate(Treatment = "Mod Var")
Tank3.1_var <- Tank3.1 %>%
mutate(Temp = Temp + 0.7730094) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-11-10 18:00:00" & DateTime > "2016-09-22 00:00:00") %>%
mutate(Treatment = "Mod Var")
Tank3.1_stress <- Tank3.1 %>%
mutate(Temp = Temp + 0.7730094) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-10 18:00:00") %>%
mutate(Treatment = "Mod Var")
Tank4.2_all <- Tank4.2 %>%
mutate(Temp = Temp + 0.7088613) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-12 00:00:00" & DateTime > "2016-09-07 00:00:00") %>%
mutate(Treatment = "High Var")
Tank4.2_var <- Tank4.2 %>%
mutate(Temp = Temp + 0.7088613) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-11-10 18:00:00" & DateTime > "2016-09-22 00:00:00") %>%
mutate(Treatment = "High Var")
Tank4.2_stress <- Tank4.2 %>%
mutate(Temp = Temp + 0.7088613) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-10 18:00:00") %>%
mutate(Treatment = "High Var")
# Tank 5 = Control 2, not using this treatment so no treatment-specific correction for Tank5's
Tank5.3_all <- Tank5.3 %>%
dplyr::filter(DateTime < "2016-12-12 00:00:00" & DateTime > "2016-09-07 00:00:00") %>%
mutate(Treatment = "control 2")
Tank5.3_var <- Tank5.3 %>%
dplyr::filter(DateTime < "2016-11-10 18:00:00" & DateTime > "2016-09-22 00:00:00") %>%
mutate(Treatment = "control 2")
Tank5.3_stress <- Tank5.3 %>%
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-10 18:00:00") %>%
mutate(Treatment = "control 2")
#### Statistically compare hobo logger data ####
# combine all variability data into one dataframe, exclude control 2 for now
all.hobo.data <- rbind(Tank1.1_var, Tank2.1_var, Tank3.1_var, Tank4.2_var)
library(car)
# Levene test used to test if samples have equal variance
leveneTest(Temp~Treatment, data = all.hobo.data)
# now try https://stackoverflow.com/questions/43646987/multiple-comparison-post-hoc-test-for-levenes-test
# first calculate the median by treatment and add as a column
all.hobo.data <- all.hobo.data %>%
group_by(Treatment) %>%
mutate(temp.med = ifelse(Temp, median(Temp, na.rm=TRUE), ifelse(Temp==NA, NA)))
# then calculate the residual for each temperature
all.hobo.data$temp.med.res<-abs(all.hobo.data$Temp-all.hobo.data$temp.med)
# Then we run an ANOVA, and post-hoc if necessary:
levene.dat.aov<-aov(temp.med.res~Treatment, all.hobo.data)
summary(levene.dat.aov)
TukeyHSD(levene.dat.aov)
#### Combine all hobo variability objects to plot ####
all_temp = rbind(Tank1.1_all, Tank2.1_all, Tank3.1_all, Tank4.2_all)
head(all_temp)
str(all_temp)
all_temp$Treatment = factor(all_temp$Treatment, levels = c("Control","Low Var","Mod Var","High Var"))
all_var = rbind(Tank1.1_var, Tank2.1_var, Tank3.1_var, Tank4.2_var)
head(all_var)
str(all_var)
all_var$Treatment = factor(all_var$Treatment, levels = c("Control","Low Var","Mod Var","High Var"))
all_stress = rbind(Tank1.1_stress, Tank2.1_stress, Tank3.1_stress, Tank4.2_stress)
head(all_stress)
str(all_stress)
all_stress$Treatment = factor(all_stress$Treatment, levels = c("Control","Low Var","Mod Var","High Var"))
cols_treat_reds <- c("Control" = "darkgrey", "Low Var" = "#FF9966", "Mod Var"="#CC3300", "High Var"="#7f0000")
# plot the variability period
str(all_var)
all_var$Treatment = factor(all_var$Treatment, levels = c("High Var", "Mod Var", "Low Var", "Control"))
all_var.plot = all_var %>%
ggplot(aes(x = DateTime_ct, y = Temp, color = Treatment))+
geom_line(aes(color = Treatment), lwd=1, alpha = 0.8)+
scale_color_manual(values = cols_treat_reds)+
ylim(26,34) +
geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
#ggtitle("Control 2") +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-22 00:00:00","2016-11-10 18:00:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-22 00:00:00", "2016-11-10 18:00:00")))+
theme_bw() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
all_var.plot
# plot the whole time course
all_temp$Treatment = factor(all_temp$Treatment, levels = c("High Var", "Mod Var", "Low Var", "Control"))
all_temp.plot = all_temp %>%
ggplot(aes(x = DateTime_ct, y = Temp, color = Treatment))+
annotate("rect", xmin = as.POSIXct("2016-09-07 00:00:00"), xmax = as.POSIXct("2016-09-22 00:00:00"), ymin = - Inf, ymax = Inf, fill = "gray", alpha = 0.3)+
annotate("rect", xmin = as.POSIXct("2016-09-22 00:00:00"), xmax = as.POSIXct("2016-11-10 18:00:00"), ymin = - Inf, ymax = Inf, fill = "orange", alpha = 0.15)+
annotate("rect", xmin = as.POSIXct("2016-11-10 18:00:00"), xmax = as.POSIXct("2016-11-25 00:00:00"), ymin = - Inf, ymax = Inf, fill = "red4", alpha = 0.15)+
annotate("rect", xmin = as.POSIXct("2016-11-25 00:00:00"), xmax = as.POSIXct("2016-12-11 23:55:00"), ymin = - Inf, ymax = Inf, fill = "royalblue4", alpha = 0.15)+
geom_line(aes(color = Treatment), lwd=0.75)+
scale_color_manual(values = cols_treat_reds)+
#geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=.5) +
xlab("Day") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-07 00:00:00", "2016-09-22 00:00:00","2016-11-10 18:00:00","2016-11-14 00:00:00","2016-11-21 00:00:00","2016-11-25 00:00:00", "2016-12-11 23:55:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-07 00:00:00", "2016-12-11 23:55:00")))+
scale_y_continuous(name = "Temperature (°C)", breaks = seq(26,33,1))+
theme_bw()+
#theme(axis.text.x = element_blank())
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
all_temp.plot
# plot a subset of days to zoom in and illustrate what the profiles looked like
all_temp.plot.subset = all_temp %>%
subset(DateTime_ct > "2016-10-30" & DateTime_ct <= "2016-11-02") %>%
ggplot(aes(x = DateTime_ct, y = Temp, color = Treatment))+
annotate("rect", xmin = as.POSIXct(-Inf), xmax = as.POSIXct(Inf), ymin = - Inf, ymax = Inf, fill = "orange", alpha = 0.15)+
geom_line(aes(color = Treatment), lwd=1, alpha = 1)+
scale_color_manual(values = cols_treat_reds)+
scale_y_continuous(name = "Temperature (°C)", breaks = seq(26,33,1))+
xlab("Day") +
theme_bw() +
theme(axis.text.x = element_blank())
#theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
all_temp.plot.subset
Tank1.1_var.nona = Tank1.1_var %>%
drop_na(Temp)
Tank1.1_var.dailystats<-data.frame("DayRange"=tapply(Tank1.1_var.nona$Temp, Tank1.1_var.nona$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(Tank1.1_var.nona$Temp, Tank1.1_var.nona$Day, min),"DayMax"=tapply(Tank1.1_var.nona$Temp, Tank1.1_var.nona$Day, max), "DayMean"=tapply(Tank1.1_var.nona$Temp, Tank1.1_var.nona$Day, mean))
Tank1.1_var.dailystats <- tibble::rownames_to_column(Tank1.1_var.dailystats, "date")
Tank1.1_var.dailystats$treat <- "Control 1"
head(Tank1.1_var.dailystats)
Tank2.1_var.nona = Tank2.1_var %>%
drop_na(Temp)
Tank2.1_var.dailystats<-data.frame("DayRange"=tapply(Tank2.1_var.nona$Temp, Tank2.1_var.nona$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(Tank2.1_var.nona$Temp, Tank2.1_var.nona$Day, min),"DayMax"=tapply(Tank2.1_var.nona$Temp, Tank2.1_var.nona$Day, max), "DayMean"=tapply(Tank2.1_var.nona$Temp, Tank2.1_var.nona$Day, mean))
Tank2.1_var.dailystats <- tibble::rownames_to_column(Tank2.1_var.dailystats, "date")
Tank2.1_var.dailystats$treat <- "Low Var"
head(Tank2.1_var.dailystats)
Tank3.1_var.nona = Tank3.1_var %>%
drop_na(Temp)
Tank3.1_var.dailystats<-data.frame("DayRange"=tapply(Tank3.1_var.nona$Temp, Tank3.1_var.nona$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(Tank3.1_var.nona$Temp, Tank3.1_var.nona$Day, min),"DayMax"=tapply(Tank3.1_var.nona$Temp, Tank3.1_var.nona$Day, max), "DayMean"=tapply(Tank3.1_var.nona$Temp, Tank3.1_var.nona$Day, mean))
Tank3.1_var.dailystats <- tibble::rownames_to_column(Tank3.1_var.dailystats, "date")
Tank3.1_var.dailystats$treat <- "Mod Var"
head(Tank3.1_var.dailystats)
Tank4.2_var.nona = Tank4.2_var %>%
drop_na(Temp)
Tank4.2_var.dailystats<-data.frame("DayRange"=tapply(Tank4.2_var.nona$Temp, Tank4.2_var.nona$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(Tank4.2_var.nona$Temp, Tank4.2_var.nona$Day, min),"DayMax"=tapply(Tank4.2_var.nona$Temp, Tank4.2_var.nona$Day, max), "DayMean"=tapply(Tank4.2_var.nona$Temp, Tank4.2_var.nona$Day, mean))
Tank4.2_var.dailystats <- tibble::rownames_to_column(Tank4.2_var.dailystats, "date")
Tank4.2_var.dailystats$treat <- "High Var"
head(Tank4.2_var.dailystats)
# combine daily variability stats for all loggers
library(Rmisc)
var.dailystats.all = rbind(Tank1.1_var.dailystats,Tank2.1_var.dailystats,Tank3.1_var.dailystats,Tank4.2_var.dailystats)
str(var.dailystats.all)
var.dailystats.all$treat = factor(var.dailystats.all$treat, levels = c("Control 1","Low Var","Mod Var","High Var"))
summarySE(data = var.dailystats.all, measurevar = "DayRange", groupvar = "treat")
summarySE(data = var.dailystats.all, measurevar = "DayMean", groupvar = "treat")
summarySE(data = var.dailystats.all, measurevar = "DayMax", groupvar = "treat")
summarySE(data = var.dailystats.all, measurevar = "DayMin", groupvar = "treat")
#### HOBO DAILY STATS & PLOTS####
# daily range
aov.dtv=aov(DayRange~treat, data=var.dailystats.all)
all_stress_2
all_stress_2 <- all_stress %>%
#dplyr::filter(DateTime < "2016-11-21 00:00:00" & DateTime > "2016-11-14 00:00:00") %>%# to look at just stress
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-25 00:00:00") %>%# to look at just recivert
summarise_at(vars(Temp), list(mean_temp = mean), na.rm=TRUE)
all_stress_2
all_stress_2 <- all_stress %>%
dplyr::filter(DateTime < "2016-11-21 00:00:00" & DateTime > "2016-11-14 00:00:00") %>%# to look at just stress
#dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-25 00:00:00") %>%# to look at just recovery
summarise_at(vars(Temp), list(mean_temp = mean), na.rm=TRUE)
all_stress_2
all_stress_2 = all_stress %>%
dplyr::filter(DateTime < "2016-11-21 00:00:00" & DateTime > "2016-11-14 00:00:00") # to look at just stress
head(all_stress_2)
all_stress_2 <- all_stress %>%
dplyr::filter(DateTime < "2016-11-21 00:00:00" & DateTime > "2016-11-14 00:00:00") %>%# to look at just stress
#dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-25 00:00:00") %>%# to look at just recovery
summarise_at(vars(Temp), list(mean_temp = mean, sd_temp = sd, se_temp=sd_temp(.)/sqrt(n())), na.rm=TRUE)
all_stress_2 <- all_stress %>%
dplyr::filter(DateTime < "2016-11-21 00:00:00" & DateTime > "2016-11-14 00:00:00") %>%# to look at just stress
#dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-25 00:00:00") %>%# to look at just recovery
summarise_at(vars(Temp), list(mean_temp = mean, sd_temp = sd, se_temp=sd(.)/sqrt(n())), na.rm=TRUE)
all_stress_2
all_stress_2 = all_stress %>%
dplyr::filter(DateTime < "2016-11-21 00:00:00" & DateTime > "2016-11-14 00:00:00") %>%# to look at just stress
#dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-25 00:00:00") %>%# to look at just recovery
summarise_at(vars(Temp), list(mean_temp = mean, sd_temp = sd), na.rm=TRUE)
all_stress_2
# Find overall mean during heat challenge and recovery periods:
library(plotrix)
all_stress_2 = all_stress %>%
dplyr::filter(DateTime < "2016-11-21 00:00:00" & DateTime > "2016-11-14 00:00:00") %>%# to look at just stress
#dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-25 00:00:00") %>%# to look at just recovery
summarise_at(vars(Temp), list(mean_temp = mean, sd_temp = sd, se_temp = std.error), na.rm=TRUE)
all_stress_2
all_stress_2 = all_stress %>%
dplyr::filter(DateTime < "2016-11-21 00:00:00" & DateTime > "2016-11-14 00:00:00") %>%# to look at just stress
#dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-25 00:00:00") %>%# to look at just recovery
summarise_at(vars(Temp), list(mean_temp = mean, sd_temp = sd, se_temp = std.error), na.rm=TRUE)
all_stress_2
all_stress_2 = all_stress %>%
#dplyr::filter(DateTime < "2016-11-21 00:00:00" & DateTime > "2016-11-14 00:00:00") %>%# to look at just stress
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-25 00:00:00") %>%# to look at just recovery
summarise_at(vars(Temp), list(mean_temp = mean, sd_temp = sd, se_temp = std.error), na.rm=TRUE)
all_stress_2
library(ggplot2)
library(lme4)
library(plotly)
library(ggridges)
library(tidyverse)
library(arsenal) #easily compare two data frames
library(Rmisc)
library(lmerTest)
library(emmeans)
library(reshape)
library(readxl)
library(wesanderson)
library(ggpubr)
library(car)
##### Read in and format data #####
# set wd
setwd("/Users/hannahaichelman/Documents/BU/TVE")
# set color palettes
#palsite <- c('red4','indianred3','mistyrose3','royalblue4','cornflowerblue','lightblue')
cols_site <- c("CI" = "#543005", "PD"= "#bf812d",  "SP"= "#dfc27d",  "BN" = "#003c30", "BS"= "#35978f", "CA"= "#80cdc1")
cols_treat <- c("darkgrey", "#FF9966","#CC3300","#7f0000")
cols_lineage <- c("L1" = "#3f007d", "L2" = "#807dba", "L3" = "#bcbddc")
library(ggpubr)
library(ggfortify)
library(ggplot2)
library(cluster)
library(FactoMineR) # this is my favorite PCA package! lots of options for visuals and summary stats
library(factoextra)
library(corrplot)
library(dplyr)
#library(ggbiplot)
library(cowplot)
library(vegan)
# try exporting data files as csv and see what we get
t0_pca = read.csv("/Users/hannahaichelman/Documents/BU/TVE/PCAs/t0_full_log.csv")
end_pca = read.csv("/Users/hannahaichelman/Documents/BU/TVE/PCAs/end_full_log.csv")
# format t0 physiology data:
str(t0_pca)
t0_pca$sitename <- as.factor(t0_pca$sitename)
t0_pca$treat <- as.factor(t0_pca$treat)
t0_pca$reef <- as.factor(t0_pca$reef)
# add in genet id and combine with lineage dataframe to include 2bRAD population data in our T0 PCAs
t0_pca$gen_site <- substr(t0_pca$frag,1,3)
lineages = read.csv("/Users/hannahaichelman/Documents/BU/TVE/2bRAD/Analysis/tuftscustompipeline_denovo_nosyms/tve_lineages_noclones.csv")
t0_pca_lineage <- left_join(t0_pca, lineages, by = "gen_site")
colnames(t0_pca_lineage)[colnames(t0_pca_lineage)=="hcarb_mgcm2"] <-"hcarb"
colnames(t0_pca_lineage)[colnames(t0_pca_lineage)=="scarb_mgcm2"] <-"scarb"
colnames(t0_pca_lineage)[colnames(t0_pca_lineage)=="prot_mgcm2"] <-"prot"
colnames(t0_pca_lineage)[colnames(t0_pca_lineage)=="sym_cm2"] <-"syms"
colnames(t0_pca_lineage)[colnames(t0_pca_lineage)=="avgtiss"] <-"tiss"
colnames(t0_pca_lineage)[colnames(t0_pca_lineage)=="corallite.avg.poly.mm2"] <-"corr_sa"
t0_pca_all_lin = t0_pca_lineage %>%
drop_na(lineage)
t0_pca_2_lin = t0_pca_all_lin %>%
filter(is.na(lineage) | lineage!="L3") # want to keep NA values for lineage here since they still have other info, will remove na's for lineage specific plots
t0_pca_lineage_CI = t0_pca_2_lin %>%
filter(sitename == "CI")
t0_pca_proposed = t0_pca_lineage %>%
filter(sitename != "SP") %>%
filter(sitename != "BN") %>%
filter(sitename != "BS") %>%
filter(sitename != "CA") %>%
filter(frag != "I3C6") # this fragment is from Cristobal, looks like a loser across all measures so removing
# now end of variability pca data:
str(end_pca)
end_pca$sitename <- as.factor(end_pca$sitename)
end_pca$treat <- as.factor(end_pca$treat)
end_pca$reef <- as.factor(end_pca$reef)
# re-level and re-name treatment
end_pca$treat <- factor(end_pca$treat, levels = c("Control","Low Var","Mod Var","High Var"))
# add in genet id and combine with lineage dataframe to include 2bRAD population data in our T0 PCAs
end_pca$gen_site <- substr(end_pca$frag,1,3)
end_pca_lineage <- left_join(end_pca, lineages, by = "gen_site")
end_pca_lineage$lineage <- as.factor(end_pca_lineage$lineage)
# re-name columns for legibility on plots
colnames(end_pca_lineage)[colnames(end_pca_lineage)=="hcarb_mgcm2"] <-"hcarb"
colnames(end_pca_lineage)[colnames(end_pca_lineage)=="scarb_mgcm2"] <-"scarb"
colnames(end_pca_lineage)[colnames(end_pca_lineage)=="prot_mgcm2"] <-"prot"
colnames(end_pca_lineage)[colnames(end_pca_lineage)=="sym_cm2"] <-"syms"
colnames(end_pca_lineage)[colnames(end_pca_lineage)=="T2_T0_perc_2"] <-"growth"
# add in dominant symbiont type dataframe
its2_types = read.csv("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/ITS2.dominanttype.csv") %>%
select(frag, dominant_type) #%>%
#mutate(D1_1 = D1_sum+1) %>%
#select(-D1_sum) %>%
#mutate(propD1 = log(D1_1)) %>%
#select(-D1_1)
its2_types$dominant_type = as.factor(its2_types$dominant_type)
end_pca_lin_sym <- left_join(end_pca_lineage, its2_types, by = "frag")
str(end_pca_lin_sym)
end_pca_all_lin = end_pca_lin_sym %>%
drop_na(lineage) %>%
#drop_na(propD1) %>%
drop_na(dominant_type) %>%
unite(lin_sym, c(lineage,dominant_type), sep = "_", remove = FALSE) %>% # make new lineage_dominant type combined factor
mutate(lin_sym = as.factor(lin_sym)) %>%
select(frag, treat, sitename, reef, gen_site, lineage, dominant_type, lin_sym, hcarb, scarb, prot, pam, syms, chlA, growth)
end_pca_2_lin = end_pca_all_lin %>%
filter(lineage!="L3")
end_pca_lineage_CI = end_pca_2_lin %>%
filter(sitename == "CI")
###
# this part of the code uses the PCA function and stats from the FactoMineR package
# T0 both lineage df's
facto_t0_all_lin <- PCA(t0_pca_all_lin[,5:11], scale.unit = TRUE, ncp = 10, graph = TRUE)
facto_t0_2_lin <- PCA(t0_pca_2_lin[,5:11], scale.unit = TRUE, ncp = 10, graph = TRUE)
facto_end_all_lin <- PCA(end_pca_all_lin[,9:15], scale.unit = TRUE, ncp = 10, graph = TRUE) # no sym type info
facto_end_2_lin <- PCA(end_pca_2_lin[,9:15], scale.unit = TRUE, ncp = 10, graph = TRUE)
head(end_pca_all_lin[,9:15])
# PCA for T0 Physiology - color = sitename
fviz_pca_biplot(facto_t0_2_lin)
pca_t0_site <- fviz_pca_biplot(facto_t0_2_lin,
label = "var",
col.var = "black", labelsize = 4,
alpha.ind = 0) + # makes individs transparent so they can be overwritten by geom_point()
theme_bw()+
geom_point(aes(colour=t0_pca_2_lin$sitename), size = 2, stroke = 1) +
scale_color_manual(values = cols_site,
#breaks=c("CI","I-Punta Donato","I-STRI Point","O-Bastimentos N","O-Bastimentos S","O-Cayo de Agua"),
labels=c("CI","PD","SP","BN","BS","CA"),
name = "Site") +
#  stat_ellipse(geom = "polygon", type = "t", alpha = 0.2,
#               aes(fill= t0_pca_lineage$sitename), show.legend = FALSE) + scale_fill_manual(values=cols_site) + # ellipses assumes multivariate distribution using default confidence level (0.95)
stat_ellipse(aes(color=t0_pca_2_lin$sitename), type = "t", lwd = 1)+
labs(x = "PC1 (51.1% explained variance)",
y = "PC2 (13.3% explained variance)") +
theme(plot.title = element_blank(),
axis.title = element_text(face = "bold"),
legend.title.align =  0.5, legend.text.align = 0,
legend.title = element_text(face = "bold"))
pca_t0_site
##### PCA Adonis Tests #####
#Use an Adonis test to get significance of factors on holobiont physiology
library(vegan)
library(MCMC.OTU)
library(MicEco)
t0_full = read.csv("/Users/hannahaichelman/Documents/BU/TVE/PCAs/t0_full.csv")
end_full = read.csv("/Users/hannahaichelman/Documents/BU/TVE/PCAs/end_full.csv")
str(t0_full)
str(end_full)
t0_full$sitename <- as.factor(t0_full$sitename)
t0_full$treat <- as.factor(t0_full$treat)
end_full$sitename <- as.factor(end_full$sitename)
end_full$treat <- as.factor(end_full$treat)
# add in genet id and combine with lineage dataframe to include 2bRAD population data in our T0 PCAs
t0_full$gen_site <- substr(t0_full$frag,1,3)
end_full$gen_site <- substr(end_full$frag,1,3)
lineages = read.csv("/Users/hannahaichelman/Documents/BU/TVE/2bRAD/Analysis/tuftscustompipeline_denovo_nosyms/tve_lineages_noclones.csv")
t0_full_lineage <- left_join(t0_full, lineages, by = "gen_site")
end_full_lineage <- left_join(end_full, lineages, by = "gen_site")
t0_full_lineage$lineage <- as.factor(t0_full_lineage$lineage)
end_full_lineage$lineage <- as.factor(end_full_lineage$lineage)
# add in dominant symbiont type dataframe
its2_types = read.csv("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/ITS2.dominanttype.csv") %>%
select(frag,  dominant_type) %>%
#mutate(D1_1 = D1_sum+1) %>%
#select(-D1_sum) %>%
mutate(dominant_type = as.factor(dominant_type))
end_full_lineage_its2 <- left_join(end_full_lineage, its2_types, by = "frag")
str(end_full_lineage_its2)
end_full_lineage_its2 = end_full_lineage_its2 %>%
unite(lin_sym, c(lineage,dominant_type), sep = "_", remove = FALSE) %>% # make new lineage_dominant type combined factor
mutate(lin_sym = as.factor(lin_sym))
# Dont want to use log transformed data here
# but need to remove NAs
t0_full_adonis = t0_full_lineage %>%
filter(complete.cases(.)) %>% #drop any row that has an NA for any time point
filter(lineage != "L3") # remove L3 individuals since these aren't in our PCAs
end_full_adonis = end_full_lineage_its2 %>%
filter(complete.cases(.)) %>% #drop any row that has an NA for any time point
mutate(T2_T0_perc_2 = T2_T0_perc + 2) %>%
select(-T2_T0_perc) %>% #get rid of the column with negative growth values before log transforming, just making sure to use the same data as we do in the PCAs
filter(lineage != "L3") # remove L3 individuals since these aren't in our PCAs
t0_full_adonis <- t0_full_adonis[, c(1,2,3,4,12,13,5,6,7,8,9,10,11)]
end_full_adonis <- end_full_adonis[, c(1,2,3,4,11,12,13,14,5,6,7,8,9,10,15)]
end_full_adonis_L1 = end_full_adonis %>%
filter(lineage == "L1")
end_full_adonis_L2 = end_full_adonis %>%
filter(lineage == "L2")
# Change dataframe here based on the comparison you are interested in
nl=startedLog(data=end_full_adonis,count.columns=9:15, logstart=1)
goods.dist=vegdist(nl, method="bray", na.rm = TRUE)
goods.pcoa=pcoa(goods.dist)
# PCA:
pcp=prcomp(nl, retx=TRUE, center=TRUE)
scores=goods.pcoa$vectors
summary(goods.pcoa)
conditions=end_full_adonis[, c("frag","treat","sitename","gen_site","reef","lineage","lin_sym","dominant_type")] #make sure to change dataframe here
# PERMANOVA
head(scores)
head(conditions)
end_model = adonis(scores~lineage+dominant_type+treat+sitename, data=conditions, method="euclidean", permutations = 10000)
end_model
end_model = adonis(scores~lineage*dominant_type*treat*sitename, data=conditions, method="euclidean", permutations = 10000)
end_model
nl=startedLog(data=t0_full_adonis,count.columns=7:13, logstart=1)
goods.dist=vegdist(nl, method="bray", na.rm = TRUE)
goods.pcoa=pcoa(goods.dist)
# PCA:
pcp=prcomp(nl, retx=TRUE, center=TRUE)
scores=goods.pcoa$vectors
summary(goods.pcoa)
conditions=t0_full_adonis[, c("frag","treat","sitename","reef","lineage")] #make sure to change dataframe here
# PERMANOVA
head(scores)
head(conditions)
t0_model = adonis(scores~lineage+sitename, data=conditions, method="euclidean", permutations = 10000)
t0_model
t0_model = adonis(scores~lineage*sitename, data=conditions, method="euclidean", permutations = 10000)
t0_model
library(plyr)
library(dplyr)
library(tidyverse)
library(vegan)
setwd("/Users/hannahaichelman/Documents/BU/TVE/2bRAD/Analysis/")
bams=data.frame(read.table("tuftscustompipeline_denovo_nosyms/bams.txt", header=FALSE)) # list of bam files
colnames(bams)<- "bam"
setwd("/Users/hannahaichelman/Documents/BU/TVE/2bRAD/Analysis/")
bams=data.frame(read.table("tuftscustompipeline_denovo_nosyms/bams.txt", header=FALSE)) # list of bam files
colnames(bams)<- "bam"
# loading individual to population correspondences
i2p=read.table("bam_barcode_names_tuftscustom.csv",sep=",",header=TRUE) # 2-column tab-delimited table of individual assignments to populations; must be in the same order as samples in the bam list or vcf file.
row.names(i2p)=i2p[,1]
#i2p=i2p[goods,]
site=i2p[,2]
# add in site name
i2p$sitename <- ifelse(i2p$pop == 'I2', 'SP',
ifelse(i2p$pop == 'I3', 'CI',
ifelse(i2p$pop == 'I4', 'PD',
ifelse(i2p$pop == 'O2', 'BS',
ifelse(i2p$pop == 'O3', 'CA',
'BN')))))
# create new data frame using i2p without clones (duplicated preps), but still with two actual clones (I4G + I4F)
# this is removing files that have the lower coverage/fewer reads
i2p_noclones_allsamps = i2p %>%
dplyr::filter(bam != "4-MullenDavies_S4_TCAC.nosymbio.fastq.bam") %>% # O4E
dplyr::filter(bam != "1-MullenDavies_S1_GCTT.nosymbio.fastq.bam") %>% # O2A
dplyr::filter(prepped_id != "I4A_CLONE") %>% # I4A
dplyr::filter(bam != "2-MullenDavies_S2_AGTG.nosymbio.fastq.bam") %>% # O4A
dplyr::filter(bam != "3-MullenDavies_S3_TGGT.nosymbio.fastq.bam") %>% # I3H
dplyr::filter(prepped_id != "O3B_CLONE") %>% # O3B
dplyr::filter(bam != "4-MullenDavies_S4_TCAG.nosymbio.fastq.bam") %>% # O2E
dplyr::filter(bam != "1-MullenDavies_S1_TGGT.nosymbio.fastq.bam") %>% # I2E sample 1
dplyr::filter(bam != "5-MullenDavies_S5_TGGT.nosymbio.fastq.bam") %>% # I2E sample 2
dplyr::filter(bam != "1-MullenDavies_S1_ACCA.nosymbio.fastq.bam") # I3C
# make a new bams file with this filtered i2p file and write out a csv file
bams_noclones_allsamps = i2p_noclones_allsamps %>%
select(bam)
# Remove I4G so this is actually no clones here - I4G was a smaller bam file
i2p_noclones = i2p_noclones_allsamps %>%
dplyr::filter(bam != "1-MullenDavies_S1_GTGA.nosymbio.fastq.bam") # I4G
# make new bams file for this filtered i2p file with no clones at all
bams_noclones = i2p_noclones %>%
select(bam)
site=i2p_noclones[,8]
cols_site <- c("CI" = "#543005", "PD"= "#bf812d",  "SP"= "#dfc27d",  "BN" = "#003c30", "BS"= "#35978f", "CA"= "#80cdc1")
cols_treat <- c("darkgrey", "#FF9966","#CC3300","#7f0000")
cols_lineage <- c("#bcbddc","#756bb1")
#-------------
# clustering / PCoA based on identity by state (IBS) based on single read resampling
# (for low and/or uneven coverage)
# all clones removed
ma = as.matrix(read.table("tuftscustompipeline_denovo_nosyms/myresult2.noclone.ibsMat"))
colnames(ma)=i2p_noclones$sample_id
rownames(ma)=i2p_noclones$sample_id
# to make cluster dendrogram with all samples included:
ma = as.matrix(read.table("tuftscustompipeline_denovo_nosyms/myresult2.ibsMat"))
colnames(ma)=i2p$sample_id
rownames(ma)=i2p$sample_id
hc=hclust(as.dist(ma),"ave")
plot(hc,cex=0.5)  # this shows how similar clones are
abline(h=0.265, lwd = 2, lty = 2, col = "grey")
# performing PCoA and CAP
conds=data.frame(cbind(site))
pp0=capscale(ma~1)
pp=capscale(ma~site,conds)
#-------------
# clustering / PCoA based on identity by state (IBS) based on single read resampling
# (for low and/or uneven coverage)
# all clones removed
ma = as.matrix(read.table("tuftscustompipeline_denovo_nosyms/myresult2.noclone.ibsMat"))
pp0=capscale(ma~1)
pp=capscale(ma~site,conds)
# significance of by-site divergence
adonis2(ma~site,conds)
head(i2p)

# add inshore/offshore designation
calc_phys$reef <- substr(calc_phys$frag,1,1)
calc_phys$reef <- ifelse(calc_phys$reef == 'O', 'Outer Reef', 'Inner Reef')
calc_phys$reef <- as.factor(calc_phys$reef)
# add in genotype
calc_phys$genet <- substr(calc_phys$fragid,1,1)
#create a new column of combined genotype that will be used as a random effect in stats later
calc_phys = calc_phys %>%
unite(gen_site, c(origsitecode,genet), sep = "", remove = FALSE) %>%
mutate(gen_site = as.factor(gen_site))
# re-level and re-name treatment
calc_phys$treat <- factor(calc_phys$treat, levels = c("init", "1", "2", "3","4","5"))
levels(calc_phys$treat) <- c("Initial","Control","Low Var","Mod Var","High Var","Control 2")
# calculate average weight at each time point
calc_phys = calc_phys %>%
mutate(paavgbw=rowMeans(.[ , c("pabwrec1","pabwrec2","pabwrec3")], na.rm=TRUE)) %>%
mutate(t0avgbw=rowMeans(.[ , c("t0bwrec1","t0bwrec2","t0bwrec3")], na.rm=TRUE)) %>%
mutate(t1avgbw=rowMeans(.[ , c("t1bwrec1","t1bwrec2","t1bwrec3")], na.rm=TRUE)) %>%
mutate(t2avgbw=rowMeans(.[ , c("t2bwrec1","t2bwrec2","t2bwrec3")], na.rm=TRUE)) %>%
mutate(t3avgbw=rowMeans(.[ , c("t3bwrec1","t3bwrec2","t3bwrec3")], na.rm=TRUE))
# calculate growth rate at the time point intervals - can't use this though because we do not have dry weights
calc_phys = calc_phys %>%
mutate(T0_PA_g_cm2_day=((t0avgbw-paavgbw)/16)/SAcm2_t0) %>%
mutate(T2_T0_g_cm2_day=((t2avgbw-t0avgbw)/57)/SAcm2_t2) %>%
mutate(T2_T1_g_cm2_day=((t2avgbw-t1avgbw)/22)/SAcm2_t2) %>%
mutate(T3_T2_g_cm_day2=((t3avgbw-t2avgbw)/32)/SAcm2_t3) %>%
mutate(T3_T0_g_cm_day2=((t3avgbw-t0avgbw)/79)/SAcm2_t3)
# calculate percent change in growth
calc_phys = calc_phys %>%
mutate(T0_PA_perc=((t0avgbw-paavgbw)/paavgbw)*100) %>%
mutate(T1_T0_perc=((t1avgbw-t0avgbw)/t0avgbw)*100) %>%
mutate(T2_T1_perc=((t2avgbw-t1avgbw)/t1avgbw)*100) %>%
mutate(T3_T2_perc=((t3avgbw-t2avgbw)/t2avgbw)*100) %>%  # this is from before to after stress
mutate(T2_T0_perc=((t2avgbw-t0avgbw)/t0avgbw)*100) %>%  # this is time 0 til before the stress
mutate(T3_T0_perc=((t3avgbw-t0avgbw)/t0avgbw)*100)      # this is time 0 til after the stress
# calculate relative growth rate (RGR)
calc_phys = calc_phys %>%
mutate(T0_PA_rgr=((ln(t0avgbw)-ln(paavgbw))/16)) %>%
mutate(T2_T0_rgr=((ln(t2avgbw)-ln(t0avgbw))/57)) %>%
mutate(T2_T1_rgr=((ln(t2avgbw)-ln(t1avgbw))/22)) %>%
mutate(T3_T2_rgr=((ln(t3avgbw)-ln(t2avgbw))/32)) %>%
mutate(T3_T0_rgr=((ln(t3avgbw)-ln(t0avgbw))/79))
# take a look at the dataset
str(calc_phys)
# un-comment the drop_na() corresponding to the time point of data you want to look at.
calc_phys2 = calc_phys %>%
drop_na(T2_T0_rgr) %>%
#drop_na(T3_T2_rgr) %>%
dplyr::filter(treat!="Control 2") %>%
dplyr::filter(treat!="Low Var") %>%
dplyr::filter(treat!="High Var") %>%
dplyr::filter(gen_site != "I4G") # clone with I4F, remove from dataset
# merge with lineage info for later plotting
lineages = read.csv("Physiology_Data/data_files/tve_lineages_noclones.csv")
calc_phys_all_lin <- left_join(calc_phys2, lineages, by = "gen_site")
calc_phys_all_lin$lineage = as.factor(calc_phys_all_lin$lineage)
calc_phys_2_lin = calc_phys_all_lin %>%
dplyr::filter(is.na(lineage) | lineage!="L3") # want to keep NA values for lineage here since they still have other info, will remove na's for lineage specific plots
# exploratory figure
#scatter plot with linear regression and confidence interval
ggplot(calc_phys, aes(treat, T2_T0_perc, color = sitename))+
geom_point()+
geom_smooth(aes(group=sitename), method=lm)+
theme_classic()
## Mixed Model
# interested in the effects of dtv treatment and lineage
#m1 <- lmer(T2_T0_rgr ~ treat+lineage + (1|gen_site), data = calc_phys_2_lin, REML=TRUE)
m1 <- lmer(T3_T2_rgr ~ treat+lineage + (1|gen_site), data = calc_phys_2_lin, REML=TRUE)
summary(m1)
#specify model (because we are interested in pairwise, have to include the interaction)
m.emm<- lmer(T2_T0_rgr ~ treat*lineage + (1|gen_site), data = calc_phys_2_lin, REML=FALSE)
emms<-emmeans(m.emm, ~lineage|treat) #, adjust="Bonferoni"
pairs(emms, interaction = "pairwise") %>% rbind(adjust="fdr")
calc_phys_2_lin_nona = calc_phys_2_lin %>%
drop_na(lineage)
growth_means_2_lin <- summarySE(calc_phys_2_lin_nona, measurevar="T2_T0_rgr", groupvars=c("treat","lineage"))
# plot, treatment x axis colored by lineage data figure
calc_plot_lineage <- ggplot(calc_phys_2_lin_nona,aes(x = treat, y = T2_T0_rgr))+
theme_bw()+
geom_jitter(aes(color = lineage, fill = lineage),
position=position_dodge(width=0.3),
alpha=0.2, pch = 21,
color = "black") +
geom_errorbar(data = growth_means_2_lin, aes(x = treat, ymax = T2_T0_rgr+se, ymin = T2_T0_rgr-se, color = lineage), width = .2, position = position_dodge(width=0.4)) +
geom_point(data = growth_means_2_lin, mapping = aes(x=treat, y=T2_T0_rgr, color = lineage, fill = lineage), size = 3.5, pch = 21, color = "black", position = position_dodge(width=0.4))+
scale_fill_manual(name = "Lineage",
breaks = c("L1","L2"),
values = cols_lineage)+
scale_color_manual(name = "Lineage",
breaks = c("L1","L2"),
values = cols_lineage)+
xlab("Treatment")+
ylab(bquote("Specific growth rate ("~day^-1~')'))+
ylim(-0.0006,0.0015) +
geom_hline(yintercept=0, linetype='dotted', color = 'gray')+
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1))
calc_plot_lineage
# set color palettes used throughout
cols_site <- c("CI" = "#543005", "PD"= "#bf812d",  "SP"= "#dfc27d",  "BN" = "#003c30", "BS"= "#35978f", "CA"= "#80cdc1")
#cols_treat <- c("darkgrey", "#FF9966","#CC3300","#7f0000")
cols_treat <- c("darkgrey","#CC3300")
cols_lineage <- c("L1" = "#3f007d", "L2" = "#807dba", "L3" = "#bcbddc")
its2_cols_greens = c("A4" = "#ffeda0", "C1" = "#edf8e9", "C3af" = "#238b45","C3" = "#a1d99b","D1" = "#00441b")
# plot, treatment x axis colored by lineage data figure
calc_plot_lineage <- ggplot(calc_phys_2_lin_nona,aes(x = treat, y = T2_T0_rgr))+
theme_bw()+
geom_jitter(aes(color = lineage, fill = lineage),
position=position_dodge(width=0.3),
alpha=0.2, pch = 21,
color = "black") +
geom_errorbar(data = growth_means_2_lin, aes(x = treat, ymax = T2_T0_rgr+se, ymin = T2_T0_rgr-se, color = lineage), width = .2, position = position_dodge(width=0.4)) +
geom_point(data = growth_means_2_lin, mapping = aes(x=treat, y=T2_T0_rgr, color = lineage, fill = lineage), size = 3.5, pch = 21, color = "black", position = position_dodge(width=0.4))+
scale_fill_manual(name = "Lineage",
breaks = c("L1","L2"),
values = cols_lineage)+
scale_color_manual(name = "Lineage",
breaks = c("L1","L2"),
values = cols_lineage)+
xlab("Treatment")+
ylab(bquote("Specific growth rate ("~day^-1~')'))+
ylim(-0.0006,0.0015) +
geom_hline(yintercept=0, linetype='dotted', color = 'gray')+
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1))
calc_plot_lineage
growth_means_2_lin
growth_means_2_lin <- summarySE(calc_phys_2_lin_nona, measurevar="T2_T0_rgr", groupvars=c("treat"))
growth_means_2_lin
growth_means_2_lin <- summarySE(calc_phys_2_lin_nona, measurevar="T2_T0_rgr", groupvars=c("treat","lineage"))
growth_means_2_lin
growth_means_2_lin <- summarySE(calc_phys_2_lin_nona, measurevar="T2_T0_rgr", groupvars=c("lineage"))
growth_means_2_lin
# un-comment the drop_na() corresponding to the time point of data you want to look at.
calc_phys2 = calc_phys %>%
#drop_na(T2_T0_rgr) %>%
drop_na(T3_T2_rgr) %>%
dplyr::filter(treat!="Control 2") %>%
dplyr::filter(treat!="Low Var") %>%
dplyr::filter(treat!="High Var") %>%
dplyr::filter(gen_site != "I4G") # clone with I4F, remove from dataset
# merge with lineage info for later plotting
lineages = read.csv("Physiology_Data/data_files/tve_lineages_noclones.csv")
calc_phys_all_lin <- left_join(calc_phys2, lineages, by = "gen_site")
calc_phys_all_lin$lineage = as.factor(calc_phys_all_lin$lineage)
calc_phys_2_lin = calc_phys_all_lin %>%
dplyr::filter(is.na(lineage) | lineage!="L3") # want to keep NA values for lineage here since they still have other info, will remove na's for lineage specific plots
## Mixed Model
# interested in the effects of dtv treatment and lineage
#m1 <- lmer(T2_T0_rgr ~ treat+lineage + (1|gen_site), data = calc_phys_2_lin, REML=TRUE)
m1 <- lmer(T3_T2_rgr ~ treat+lineage + (1|gen_site), data = calc_phys_2_lin, REML=TRUE)
summary(m1)
m.emm<- lmer(T3_T2_rgr ~ treat*lineage + (1|gen_site), data = calc_phys_2_lin, REML=FALSE)
emms<-emmeans(m.emm, ~lineage|treat) #, adjust="Bonferoni"
pairs(emms, interaction = "pairwise") %>% rbind(adjust="fdr")
calc_phys_2_lin_nona = calc_phys_2_lin %>%
drop_na(lineage)
growth_means_2_lin <- summarySE(calc_phys_2_lin_nona, measurevar="T3_T2_rgr", groupvars=c("treat","lineage"))
#growth_means_2_lin <- summarySE(calc_phys_2_lin_nona, measurevar="T2_T0_rgr", groupvars=c("treat","lineage"))
growth_means_2_lin <- summarySE(calc_phys_2_lin_nona, measurevar="T3_T2_rgr", groupvars=c("treat"))
growth_means_2_lin
#growth_means_2_lin <- summarySE(calc_phys_2_lin_nona, measurevar="T2_T0_rgr", groupvars=c("treat","lineage"))
growth_means_2_lin <- summarySE(calc_phys_2_lin_nona, measurevar="T3_T2_rgr", groupvars=c("lineage"))
growth_means_2_lin
##### PAM (Fv/Fm) #####
# need to re-read in the data sheet for pam only until I can organize better
post_phys_forpam <- read.csv('Physiology_Data/data_files/dtvmaster.csv')
# analyzing separately because not sure of timing yet
pam_phys = post_phys_forpam %>%
dplyr::select(frag, survivedtoend, treat, t3sastan1, t3sastan2, t3sastan3, t3sarec1, t3sarec2, t3sarec3, blastvol, blaster,
papamrec1,papamrec2,papamrec3,t0pamrec1,t0pamrec2,t0pamrec3,t1pamrec1,t1pamrec2,t1pamrec3,t2pamrec1,t2pamrec2,t2pamrec3,t3pamrec1,t3pamrec2,t3pamrec3,
t4pamrec1,t4pamrec2,t4pamrec3,t5pamrec1,t5pamrec2,t5pamrec3,t6pamrec1,t6pamrec2,t6pamrec3,t7pamrec1,t7pamrec2,t7pamrec3,t8pamrec1,t8pamrec2,t8pamrec3,t9pamrec1,t9pamrec2,t9pamrec3) %>%
dplyr::rename(sastan1 = t3sastan1, sastan2 = t3sastan2, sastan3 = t3sastan3, sarec1 = t3sarec1, sarec2 = t3sarec2, sarec3 = t3sarec3) %>%
mutate(treat = as.factor(treat), sarec3 = as.numeric(sarec3), blastvol = as.numeric(blastvol)) %>%
dplyr::filter(frag!="I2A12", frag!="I2A7", frag!="O4D8", frag!="I3E10", frag!="I3I10") #these frags are being removed because they were duplicate genotypes within treatment and had the most complete information of the two
# add identifying data
pam_phys$origsitecode <- substr(pam_phys$frag, 1, 2)
# add in site name with inshore/offshore indicator
pam_phys$sitename <- ifelse(pam_phys$origsitecode == 'I2', 'SP',
ifelse(pam_phys$origsitecode == 'I3', 'CI',
ifelse(pam_phys$origsitecode == 'I4', 'PD',
ifelse(pam_phys$origsitecode == 'O2', 'BS',
ifelse(pam_phys$origsitecode == 'O3', 'CA',
'BN')))))
pam_phys$sitename <- as.factor(pam_phys$sitename)
# make new nubbin IDs based on the new, more informative site codes
# extract the genotype and frag number
pam_phys$fragid <- substr(pam_phys$frag,3,5)
# add inshore/offshore designation
pam_phys$reef <- substr(pam_phys$frag,1,1)
pam_phys$reef <- ifelse(pam_phys$reef == 'O', 'Outer Reef', 'Inner Reef')
pam_phys$reef <- as.factor(pam_phys$reef)
pam_phys$genet <- substr(pam_phys$fragid,1,1)
#create a new column of combined genotype and site for stats later
pam_phys = pam_phys %>%
unite(gen_site, c(origsitecode,genet), sep = "", remove = FALSE) %>%
mutate(gen_site = as.factor(gen_site))
# re-level and re-name treatment
pam_phys$treat <- factor(pam_phys$treat, levels = c("init", "1", "2", "3","4","5"))
levels(pam_phys$treat) <- c("Initial","Control","Low Var","Mod Var","High Var","Control 2")
pam_phys$treat <- as.factor(pam_phys$treat)
# calculate average PAM at each time point
pam_phys = pam_phys %>%
mutate(paavgpam=rowMeans(.[ , c("papamrec1","papamrec2","papamrec3")], na.rm=TRUE)) %>%
mutate(t0avgpam=rowMeans(.[ , c("t0pamrec1","t0pamrec2","t0pamrec3")], na.rm=TRUE)) %>%
mutate(t1avgpam=rowMeans(.[ , c("t1pamrec1","t1pamrec2","t1pamrec3")], na.rm=TRUE)) %>%
mutate(t2avgpam=rowMeans(.[ , c("t2pamrec1","t2pamrec2","t2pamrec3")], na.rm=TRUE)) %>%
mutate(t3avgpam=rowMeans(.[ , c("t3pamrec1","t3pamrec2","t3pamrec3")], na.rm=TRUE)) %>%
mutate(t4avgpam=rowMeans(.[ , c("t4pamrec1","t4pamrec2","t4pamrec3")], na.rm=TRUE)) %>%
mutate(t5avgpam=rowMeans(.[ , c("t5pamrec1","t5pamrec2","t5pamrec3")], na.rm=TRUE)) %>%
mutate(t6avgpam=rowMeans(.[ , c("t6pamrec1","t6pamrec2","t6pamrec3")], na.rm=TRUE)) %>%
mutate(t7avgpam=rowMeans(.[ , c("t7pamrec1","t7pamrec2","t7pamrec3")], na.rm=TRUE)) %>%
mutate(t8avgpam=rowMeans(.[ , c("t8pamrec1","t8pamrec2","t8pamrec3")], na.rm=TRUE)) %>%
mutate(t9avgpam=rowMeans(.[ , c("t9pamrec1","t9pamrec2","t9pamrec3")], na.rm=TRUE)) %>%
mutate(pamdiff=t9avgpam-t3avgpam)
# explore difference in PAM values from the end of recovery period to start of the heat stress ramp
str(pam_phys)
plot(x=pam_phys$sitename,y=pam_phys$pamdiff, data = pam_phys)
lm02 = aov(pamdiff ~ sitename + treat, data = pam_phys)
summary(lm02)
# summarySE doesn't work with NA's, so use this!!
phys_pam_wide = pam_phys %>%
dplyr::filter(complete.cases(paavgpam,t0avgpam,t1avgpam,t2avgpam,t3avgpam,t4avgpam,t5avgpam,t6avgpam,t7avgpam,t8avgpam,t9avgpam)) %>% #drop any row that has an NA for any time point
dplyr::filter(treat!="Control 2") %>%
dplyr::filter(treat!="Low Var") %>%
dplyr::filter(treat!="High Var") %>%
select(frag,treat,reef,gen_site,sitename,paavgpam,t0avgpam,t1avgpam,t2avgpam,t3avgpam,t4avgpam,t5avgpam,t6avgpam,t7avgpam,t8avgpam,t9avgpam) %>%
dplyr::filter(gen_site != "I4G") # remove clone
# transform the data to long format so time point is its own column
phys_pam_long = phys_pam_wide %>%
gather(time, pam, paavgpam:t9avgpam)
# re-level and re-name treatment
phys_pam_long$time <- as.factor(phys_pam_long$time)
levels(phys_pam_long$time) <- c("-18","0", "15","35","45","54","61","65","70","74","79")
# merge with lineage info for later plotting
lineages = read.csv("Physiology_Data/data_files/tve_lineages_noclones.csv")
pam_phys_all_lin <- left_join(phys_pam_long, lineages, by = "gen_site")
pam_phys_all_lin$lineage = as.factor(pam_phys_all_lin$lineage)
# merge with its2 types for plotting
its2_types = read.csv("Physiology_Data/data_files/ITS2.dominanttype.prestress.csv") %>%
select(frag, dominant_type)
pam_phys_all_lin <- left_join(pam_phys_all_lin, its2_types, by = "frag")
pam_phys_all_lin$dominant_type = as.factor(pam_phys_all_lin$dominant_type)
# filter to only include T3-T9 for plotting and stats
phys_pam_all_lin_plots = pam_phys_all_lin %>%
dplyr::filter(time != "-18" & time != "0" & time != "15" & time != "35")
phys_pam_2_lin_plots = phys_pam_all_lin_plots %>%
dplyr::filter(is.na(lineage) | lineage!="L3") # want to keep NA values for lineage here since they still have other info, will remove na's for lineage specific plots
phys_pam_lin1 = phys_pam_2_lin_plots %>%
dplyr::filter(lineage == "L1")
phys_pam_lin2 = phys_pam_2_lin_plots %>%
dplyr::filter(lineage == "L2")
# Stats
# Using the full model with interactions of all our parameters of interest
m.full <- lmer(pam ~ time*lineage*treat + (1|gen_site), data = phys_pam_2_lin_plots, REML=TRUE)
summary(m.full)
anova(m.full)
# check interactions
m.emm<- lmer(pam ~ time*lineage + (1|gen_site), data = phys_pam_2_lin_plots, REML=FALSE)
emms<-emmeans(m.emm, ~lineage|time) #, adjust="Bonferoni"
pairs(emms, interaction = "pairwise") %>% rbind(adjust="fdr")
#SummarySE to format data for plotting - dtv treatment
pam_means_treat_all_lin <- summarySE(phys_pam_all_lin_plots, measurevar="pam", groupvars=c("treat","time"))
pam_means_treat_all_lin$time <- as.numeric(as.character(pam_means_treat_all_lin$time))
pam_means_treat_2_lin <- summarySE(phys_pam_2_lin_plots, measurevar="pam", groupvars=c("treat","time"))
pam_means_treat_2_lin$time <- as.numeric(as.character(pam_means_treat_2_lin$time))
pam_plot_treatment <- ggplot(pam_means_treat_2_lin,aes(x = time, y = pam, color = treat, fill = treat))+
theme_bw()+
annotate("rect", xmin = 51, xmax = 64, ymin = - Inf, ymax = Inf, fill = "red4", alpha = 0.15)+
annotate("rect", xmin = 64, xmax = 80, ymin = - Inf, ymax = Inf, fill = "royalblue4", alpha = 0.15)+
geom_errorbar(aes(x = time, ymax = pam+se, ymin = pam-se), width = .2, position = position_dodge(width=0.3)) +
geom_point(size = 3, pch = 21, color = "black", position = position_dodge(width=0.3))+
geom_line(aes(group = treat), size = 0.5, linetype="dashed", position = position_dodge(width=0.3))+
scale_fill_manual(name = "Treatment",
labels = c("Control","Mod Var"),
values = cols_treat)+
scale_color_manual(name = "Treatment",
labels = c("Control","Mod Var"),
values = cols_treat)+
ylab("Fv/Fm")+
scale_x_continuous(name = "Time Point", breaks = c(45,54,61,65,70,74,79))
#ylim(0.4,0.7) +
pam_plot_treatment
#SummarySE to format data for plotting - lineage
phys_pam_all_lin_plots_nona = phys_pam_all_lin_plots %>%
drop_na(lineage)
phys_pam_2_lin_plots_nona = phys_pam_2_lin_plots %>%
drop_na(lineage)
pam_means_all_lin <- summarySE(phys_pam_all_lin_plots_nona, measurevar="pam", groupvars=c("lineage","time"))
pam_means_all_lin$time <- as.numeric(as.character(pam_means_all_lin$time))
pam_means_2_lin <- summarySE(phys_pam_2_lin_plots_nona, measurevar="pam", groupvars=c("lineage","time"))
pam_means_2_lin$time <- as.numeric(as.character(pam_means_2_lin$time))
# plot, treatment x axis colored by site data figure
pam_plot_lineage <- ggplot(pam_means_2_lin,aes(x = time, y = pam, color = lineage, fill = lineage))+
theme_bw()+
annotate("rect", xmin = 51, xmax = 64, ymin = - Inf, ymax = Inf, fill = "red4", alpha = 0.15)+
annotate("rect", xmin = 64, xmax = Inf, ymin = - Inf, ymax = Inf, fill = "royalblue4", alpha = 0.15)+
geom_errorbar(aes(x = time, ymax = pam+se, ymin = pam-se), width = .2, color = "black", position = position_dodge(width=0.3)) +
geom_line(aes(group = lineage), size = 1, linetype="dashed", position = position_dodge(width=0.3))+
geom_point(size = 3.5, color = "black", pch = 21, position = position_dodge(width=0.3))+
#geom_smooth(aes(group=sitename), position = position_dodge(width=0.3), size = 0.5, method='lm', se = FALSE)+
scale_fill_manual(name = "Lineage",
breaks = c("L1","L2"),
#breaks = c("L1","L2","L3"),
values = cols_lineage)+
scale_color_manual(name = "Lineage",
breaks = c("L1","L2"),
#breaks = c("L1","L2","L3"),
values = cols_lineage)+
ylab("Fv/Fm")+
scale_x_continuous(name = "Time Point", breaks = c(45,54,61,65,70,74,79)) +
#ylim(-0.5,4) +
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1))
pam_plot_lineage
pam_means_2_lin
pam_means_2_lin <- summarySE(phys_pam_2_lin_plots_nona, measurevar="pam", groupvars=c("lineage"))
pam_means_2_lin
#### Set-Up ####
library(tidyverse)
library(Rmisc)
library(lme4)
library(ggpubr)
#### Coring Data ####
cores = read.csv("Coring_Data/data_files/Growth_allRegions_JPcoringdata.csv")
head(cores)
pan_cores = cores %>%
filter(region == "w") %>%
filter(spp == "s")
str(pan_cores)
pan_cores$rz = as.factor(pan_cores$rz)
pan_cores$site = as.factor(pan_cores$site)
pan_cores$spp = as.factor(pan_cores$spp)
# Re-name factor levels for sites
pan_cores$site <- dplyr::recode(pan_cores$site,
wirci = 'CI',
wirpd = 'PD',
wirpl = 'PL',
wirsp = 'SP',
worbn = 'BN',
worbs = 'BS',
worca = 'CA',
wordm = 'DM')
# Re-name core IDs
pan_cores$coreID <- dplyr::recode(pan_cores$coreID,
wordm37s='W_OR_DM_37_S',
worbn15s='W_OR_BN_15_S',
worbs17s='W_OR_BS_17_S',
worca35s='W_OR_CA_35_S',
wirsp05s='W_IR_SP_5_S',
worbn09s='W_OR_BN_9_S',
wirsp02s='W_IR_SP_2_S',
worca27s='W_OR_CA_27_S',
wirpd59s='W_IR_PD_59_S',
worbn14s='W_OR_BN_14_S',
wordm42s='W_OR_DM_42_S',
worbn16s='W_OR_BN_16_S',
worbs23s='W_OR_BS_23_S',
worbs22s='W_OR_BS_22_S',
wirsp03s='W_IR_SP_3_S',
worca30s='W_OR_CA_30_S',
worbs25s='W_OR_BS_25_S',
wordm40s='W_OR_DM_40_S',
worbn07s='W_OR_BN_7_S',
wordm41s='W_OR_DM_41_S',
wirpd63s='W_IR_PD_63_S',
wirci57s='W_IR_CI_57_S',
wirpl51s='W_IR_PL_51_S',
wirpd60s='W_IR_PD_60_S',
wirpd61s='W_IR_PD_61_S',
wirpl47s='W_IR_PL_47_S',
wirsp04s='W_IR_SP_4_S',
worbs20s='W_OR_BS_20_S',
wordm38s='W_OR_DM_38_S',
wirpl48s='W_IR_PL_48_S')
# take a look at the metadata that Annabel gave us
#loading in RAD data with core ID and bam file name
rad_meta <- read.csv("Physiology_Data/data_files/all_SSID_updated.csv")
rad_meta <- filter(rad_meta, Project=="cores")
head(rad_meta)
dim(rad_meta)
# loading in and cleaning up lineage assignment data to only include core info
lineages <- read.csv("Physiology_Data/data_files/samples_on_plate_somelineages.csv")
colnames(lineages)[1] ="SampleID"
colnames(lineages)[3] ="lineage"
lineages <- dplyr::filter(lineages, PROJECT=="Panama cores")
head(lineages)
dim(lineages)
lineages$SampleID %in% rad_meta$SampleID
# loading in and cleaning up lineage assignment data to only include core info
lineages <- read.csv("Physiology_Data/data_files/samples_on_plate_somelineages.csv")
lineages2 = lineages %>%
dplyr::rename(coreID = SAMPLE_ID) %>%
dplyr::rename(lineage = X) %>%
dplyr::filter(PROJECT=="Panama cores") %>%
select(coreID, lineage)
head(lineages2)
dim(lineages2)
#combining JP metadata with lineage associations
lineages_meta <- left_join(pan_cores, lineages2, by="coreID")
head(lineages_meta)
str(lineages_meta)
lineages_meta$coreID = as.factor(lineages_meta$coreID)
lineages_meta$lineage = as.factor(lineages_meta$lineage)
## Data Analysis
# Subset to only include recent years (more confident in these core data) as in JP's analysis
pan_cores_recent = lineages_meta %>%
dplyr::filter(Year >= "1980" & Year <= "2014") %>%
drop_na(lineage) %>%
dplyr::filter(lineage != "3")
head(pan_cores_recent)
count(unique(pan_cores_recent$coreID)) # lines up with 24 cores with lineage and growth data - phew.
pan_cores_allyears = lineages_meta %>%
drop_na(lineage) %>%
dplyr::filter(lineage != "3")
count(unique(pan_cores_allyears$coreID)) # lines up with 24 cores with lineage and growth data - phew.
# make a histogram of how many cores we have through time
cols_lineage <- c("#3f007d","#807dba")
str(pan_cores_allyears)
yearmeans = summarySE(data = pan_cores_allyears, measurevar = c("calc"), groupvars = c("Year","lineage"))
yearmeans = yearmeans %>%
select(Year, lineage, N)
samplesize_hist =
ggplot(yearmeans) +
theme_bw()+
geom_bar(aes(x=Year, y=N, fill = lineage), stat="identity") +
scale_fill_manual(name = "Lineage",
breaks = c("1","2"),
values = cols_lineage)+
scale_x_continuous(name="Year",breaks = seq(1880,2014,by=10))+
facet_wrap(~lineage)
samplesize_hist
#### 1980 - 2014 data ####
# Average density, calcification, and linear extension by lineage only - recent data only
sitemeans_linext_all_recent = summarySE(data = pan_cores_recent, measurevar = c("linext"), groupvars = c("lineage"))
sitemeans_den_all_recent = summarySE(data = pan_cores_recent, measurevar = c("density"), groupvars = c("lineage"))
sitemeans_calc_all_recent = summarySE(data = pan_cores_recent, measurevar = c("calc"), groupvars = c("lineage"))
sitemeans_linext_cores_recent = summarySE(data = pan_cores_recent, measurevar = c("linext"), groupvars = c("lineage","coreID","site"))
sitemeans_den_cores_recent = summarySE(data = pan_cores_recent, measurevar = c("density"), groupvars = c("lineage","coreID","site"))
sitemeans_calc_cores_recent = summarySE(data = pan_cores_recent, measurevar = c("calc"), groupvars = c("lineage","coreID","site"))
sitemeans_linext_all_recent
sitemeans_den_all_recent
sitemeans_calc_all_recent
# stats for these recent data
calc_recent_lm = lm(calc~lineage, data = sitemeans_calc_cores_recent)
summary(calc_recent_lm)
# stats for these recent data
calc_recent_lm = lm(calc~lineage*site, data = sitemeans_calc_cores_recent)
summary(calc_recent_lm)
# stats for these recent data
calc_recent_lm = lm(calc~lineage+site, data = sitemeans_calc_cores_recent)
summary(calc_recent_lm)
# stats for these recent data
calc_recent_lm = lm(calc~lineage, data = sitemeans_calc_cores_recent)
summary(calc_recent_lm)
linext_recent_lm = lm(linext~lineage, data = sitemeans_linext_cores_recent)
summary(linext_recent_lm)
linext_recent_lm = lm(linext~lineage+site, data = sitemeans_linext_cores_recent)
summary(linext_recent_lm)
linext_recent_lm = lm(linext~lineage, data = sitemeans_linext_cores_recent)
summary(linext_recent_lm)
density_recent_lm = lm(density~lineage+site, data = sitemeans_den_cores_recent)
summary(density_recent_lm)
anova(density_recent_lm)
density_recent_lm = lm(density~lineage, data = sitemeans_den_cores_recent)
summary(density_recent_lm)
m.emm<- lm(density ~ site*lineage, data = sitemeans_den_cores_recent, REML=FALSE)
emms<-emmeans(m.emm, ~lineage|site) #, adjust="Bonferoni"
emms<-emmeans(m.emm, ~site|lineage) #, adjust="Bonferoni"
pairs(emms, interaction = "pairwise") %>% rbind(adjust="fdr")
emms<-emmeans(m.emm, ~lineage|site) #, adjust="Bonferoni"
pairs(emms, interaction = "pairwise") %>% rbind(adjust="fdr")
emms<-emmeans(m.emm, ~lineage) #, adjust="Bonferoni"
pairs(emms, interaction = "pairwise") %>% rbind(adjust="fdr")
emms<-emmeans(m.emm, ~lineage|site) #, adjust="Bonferoni"
pairs(emms, interaction = "pairwise") %>% rbind(adjust="fdr")
emms
m.emm<- lm(density ~ site*lineage, data = sitemeans_den_cores_recent)
emms<-emmeans(m.emm, ~site|lineage) #, adjust="Bonferoni"
pairs(emms, interaction = "pairwise") %>% rbind(adjust="fdr")
str(sitemeans_den_cores_recent)
emms<-emmeans(m.emm, ~lineage|site) #, adjust="Bonferoni"
pairs(emms, interaction = "pairwise") %>% rbind(adjust="fdr")
pairs(emms) %>% rbind(adjust="fdr")
emms
emms<-emmeans(m.emm, pairwise~lineage|site) #, adjust="Bonferoni"
m.emm<- lmer(density ~ site*lineage, data = sitemeans_den_cores_recent)
anova(m.emm)
m.emm<- lm(density ~ lineage*site, data = sitemeans_den_cores_recent)
anova(m.emm)
emms<-emmeans(m.emm, ~lineage|site) #, adjust="Bonferoni"
pairs(emms, interaction = "pairwise") %>% rbind(adjust="fdr")
TukeyHSD(m.emm)
m.emm<- aov(density ~ lineage*site, data = sitemeans_den_cores_recent)
emms<-emmeans(m.emm, ~lineage|site) #, adjust="Bonferoni"
TukeyHSD(m.emm)
m.emm<- lm(density ~ lineage*site, data = sitemeans_den_cores_recent)
emms<-emmeans(m.emm, ~lineage*site) #, adjust="Bonferoni"
emms
pairs(emms, interaction = "pairwise") %>% rbind(adjust="fdr")
pairs(emms, simple = "site") %>% rbind(adjust="fdr")
pairs(emms, simple = "lineage") %>% rbind(adjust="fdr")
m.emm<- lm(density ~ lineage*site, data = sitemeans_den_cores_recent)
emms<-emmeans(m.emm, ~lineage*site) #, adjust="Bonferoni"
pairs(emms, simple = "lineage") %>% rbind(adjust="fdr")
pairs(emms, simple = "site") %>% rbind(adjust="fdr")
setwd("/Users/hannahaichelman/Dropbox/BU_Postdoc/Panama_2022_23_Data")
library("ggplot2")
library ("Rmisc")
library("tidyverse")
library("dplyr")
library("gplots")
install.packages("gplots")
#### Bleaching & Mortality Data ####
bleach = read.table("/Users/hannahaichelman/Dropbox/BU_Postdoc/Panama_2022_23_Data/Panama2023_BleachingMetadata.csv", sep = ',', header = TRUE, na.strings=c("","NA"))

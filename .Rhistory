aggregate(temp ~ logger, data = master.melt, FUN = "min")
aggregate(temp ~ logger, data = master.melt, FUN = "max")
aggregate(temp ~ logger, data = master.melt, FUN = "mean")
Jul.Aug.Sep <-
master.melt %>%
dplyr::filter(datetime >= '2015-07-1 00:00:00', datetime <= '2015-09-30 11:59:59')
Jul.Aug.Sep <-
master.melt %>%
dplyr::filter(datetime >= '2015-08-1 00:00:00', datetime <= '2015-09-30 11:59:59' | datetime >= '2017-07-1 00:00:00', datetime <= '2016-09-30 11:59:59')
Jul.Aug.Sep
View(Jul.Aug.Sep)
Jul.Aug.Sep <-
master.melt %>%
dplyr::filter(datetime >= '2015-08-1 00:00:00', datetime <= '2015-09-30 11:59:59' & datetime >= '2017-07-1 00:00:00', datetime <= '2016-09-30 11:59:59')
Jul.Aug.Sep
Jul.Aug.Sep <-
master.melt %>%
dplyr::filter(datetime >= '2015-08-1 00:00:00', datetime <= '2015-09-30 11:59:59' | datetime >= '2016-07-1 00:00:00', datetime <= '2016-09-30 11:59:59')
Jul.Aug.Sep$season <- 'julaugsep'
Oct.Nov.Dec <-
master.melt %>%
dplyr::filter(datetime >= '2015-10-1 00:00:00', datetime <= '2015-12-31 11:59:59')
Oct.Nov.Dec$season <- 'octnovdec'
Jan.Feb.Mar <-
master.melt %>%
dplyr::filter(datetime >= '2016-01-1 00:00:00', datetime <= '2016-03-31 11:59:59')
Jan.Feb.Mar$season <- 'janfebmar'
Apr.May.Jun <-
master.melt %>%
dplyr::filter(datetime >= '2016-04-1 00:00:00', datetime <= '2016-06-30 11:59:59')
Apr.May.Jun$season <- 'aprmayjun'
seas <- rbind(Oct.Nov.Dec,Jan.Feb.Mar,Apr.May.Jun,Jul.Aug.Sep)
head(seas)
dailys<-setDT(master.melt)[, list(max = max(temp), min = min(temp), mean=mean(temp)), by=list(logger,date)]
dailys$range <- (dailys$max - dailys$min)
head(seas)
head(dailys)
head(seas)
head(dailys)
dailys$season <- ifelse(dailys$date >= '2015-10-1' & dailys$date <= '2015-12-31', 'octnovdec',
ifelse(dailys$date >= '2016-01-1' & dailys$date <= '2016-03-31', 'janfebmar',
ifelse(dailys$date >= '2016-04-1' & dailys$date <= '2016-06-30', 'aprmayjun',
'julaugsep')))
head(dailys)
View(dailys)
write.csv(dailys, file = "/Users/hannahaichelman/Documents/BU/TVE/TemperatureData/Hobo_Loggers/data_sheets/SeasonalDailyTempData.csv", row.names = FALSE)
write.csv(dailys, file = "/Users/hannahaichelman/Documents/BU/TVE/TemperatureData/Field_Hobo_Loggers/data_sheets/SeasonalDailyTempData.csv", row.names = FALSE)
# rank sites by daily variability by season
aggregate(range ~ logger + season, data = dailys, FUN = "mean")
dailys$season = as.factor(dailys$season)
dailys$season <- factor(dailys$season, levels = c('janfebmar','aprmayjun','julaugsep','octnovdec'))
levels(dailys$season) <- c('JanFebMar','AprMayJun','JulAugSep','OctNovDec')
dailys$logger = as.factor(dailys$logger)
levels(dailys$logger) <- c("CA", "CI", "Drago.OR4", "PD","SP")
dailys_plot = dailys %>%
dplyr::filter(logger!="Drago.OR4")
#plot mean temperature by season
mean_boxplot_season <- ggplot(dailys_plot, aes(x=logger, y=mean)) +
geom_jitter(shape=16,
position=position_jitter(0.2),
alpha=0.99,
aes(color = logger)) +
scale_color_manual(values = cols_site) + # for jittered points
geom_boxplot(outlier.shape = NA,
alpha = 0.85,
aes(fill = logger))+
scale_fill_manual(values = cols_site) + # for boxplot
ylab("Mean Temperature (°C)") +
xlab("Site") +
theme(axis.text.x = element_text(angle = 45, vjust=0.7, hjust=.6)) +
theme_bw() +
theme(legend.position = "none") +
facet_wrap(~season, nrow = 1, ncol = 4)
mean_boxplot_season
dailys$logger
dailys <- read.csv(file = "/Users/hannahaichelman/Documents/BU/TVE/TemperatureData/Field_Hobo_Loggers/data_sheets/SeasonalDailyTempData.csv")
dailys$season = as.factor(dailys$season)
dailys$season
dailys$season <- factor(dailys$season, levels = c('janfebmar','aprmayjun','julaugsep','octnovdec'))
levels(dailys$season) <- c('JanFebMar','AprMayJun','JulAugSep','OctNovDec')
dailys$logger = as.factor(dailys$logger)
dailys$logger
levels(dailys$logger) <- c("CA", "CI", "Drago.OR4", "PD","SP")
dailys_plot = dailys %>%
dplyr::filter(logger!="Drago.OR4")
#plot mean temperature by season
mean_boxplot_season <- ggplot(dailys_plot, aes(x=logger, y=mean)) +
geom_jitter(shape=16,
position=position_jitter(0.2),
alpha=0.99,
aes(color = logger)) +
scale_color_manual(values = cols_site) + # for jittered points
geom_boxplot(outlier.shape = NA,
alpha = 0.85,
aes(fill = logger))+
scale_fill_manual(values = cols_site) + # for boxplot
ylab("Mean Temperature (°C)") +
xlab("Site") +
theme(axis.text.x = element_text(angle = 45, vjust=0.7, hjust=.6)) +
theme_bw() +
theme(legend.position = "none") +
facet_wrap(~season, nrow = 1, ncol = 4)
mean_boxplot_season
#plot mean temperature by season
dtv_boxplot_season <- ggplot(dailys_plot, aes(x=logger, y=range)) +
geom_jitter(shape=16,
position=position_jitter(0.2),
alpha=0.99,
aes(color = logger)) +
scale_color_manual(values = cols_site) + # for jittered points
geom_boxplot(outlier.shape = NA,
alpha = 0.85,
aes(fill = logger))+
scale_fill_manual(values = cols_site) + # for boxplot
ylab("Daily Temperature Range (°C)") +
xlab("Site") +
theme(axis.text.x = element_text(angle = 45, vjust=0.7, hjust=.6)) +
theme_bw() +
theme(legend.position = "none") +
facet_wrap(~season, nrow = 1, ncol = 4)
dtv_boxplot_season
boxplots_season = ggarrange(mean_boxplot_season, dtv_boxplot_season, nrow = 2, ncol = 1)
ggsave(boxplots_season, filename = "/Users/hannahaichelman/Documents/BU/TVE/TemperatureData/Field_Hobo_Loggers/Figures/SeasonTemps_boxplot.pdf", width=8, height=6, units=c("in"), useDingbats=FALSE)
# rank sites by daily variability by season
aggregate(range ~ logger + season, data = dailys_plot, FUN = "mean")
# rank sites by mean by season
aggregate(mean ~ logger + season, data = dailys_plot, FUN = "mean")
tail(master.melt)
# try looking at just the month before collection
collection <- master.melt %>%
dplyr::filter(datetime >= '2016-07-12 00:00:00', datetime <= '2016-08-12 00:00:00')
collection
aggregate(mean ~ logger, data = collection, FUN = "mean")
aggregate(temp ~ logger, data = collection, FUN = "mean")
head(dailys)
str(dailys)
aggregate(temp ~ logger, data = collection, FUN = "mean")
head(collection)
collections<-setDT(collection)[, list(max = max(temp), min = min(temp), mean=mean(temp)), by=list(logger,date)]
collections$range <- (collections$max - collections$min)
head(collections)
aggregate(mean ~ logger, data = collections, FUN = "mean")
aggregate(range ~ logger, data = collections, FUN = "mean")
aggregate(mean ~ logger, data = collections, FUN = "mean")
# it's easier to do use setDT to get "typical day" patterns than xtx/zoo because the unique datetime values in the xts/zoo preclude looking at things by time of day
daily.mmm<-setDT(master.melt)[, list(max = max(temp), min = min(temp), mean=mean(temp)), by=list(logger,date)]
# add in range
daily.mmm$range <- (daily.mmm$max - daily.mmm$min)
daily.mmm$logger <- factor(daily.mmm$logger, levels = c('Punta.IR1', 'STRI.IR2', 'Cristo.IR3.arr1', 'Cayo.OR3.arr3', 'Drago.OR4'))
head(daily.mmm)
write.csv(daily.mmm, file = "/Users/hannahaichelman/Documents/BU/TVE/TemperatureData/Hobo_Loggers/data_sheets/DailyTempRangeData.csv", row.names = FALSE)
write.csv(daily.mmm, file = "/Users/hannahaichelman/Documents/BU/TVE/TemperatureData/Field_Hobo_Loggers/data_sheets/DailyTempRangeData.csv", row.names = FALSE)
daily.mmm = daily.mmm %>%
dplyr::filter(logger!="Drago.OR4")
# rank sites by daily variability overall
aggregate(range ~ logger, data = daily.mmm, FUN = "mean")
daily.mmm
View(daily.mmm)
# main loggers (one logger per site)
Cayo.OR3.arr3 <- xts(zoo(read.table("Cayo.OR3.arr3.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,8,13,0,0,0),ISOdate(2016,8,12,0,0,0), "15 min", tz="GMT")))
head(Cayo.OR3.arr3)
# main loggers (one logger per site)
Cayo.OR3.arr3 <- xts(zoo(read.table("Cayo.OR3.arr3.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
Drago.OR4 <- xts(zoo(read.table("Drago.OR4.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
Punta.IR1 <- xts(zoo(read.table("Punta.IR1.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2 <- xts(zoo(read.table("STRI.IR2.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
Cristo.IR3.arr1 <- xts(zoo(read.table("Cristo.IR3.arr1.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
# fix cristobal temp to degrees C because the logger was deployed in F
Cristo.IR3.arr1 <- ((Cristo.IR3.arr1 - 32) * (5/9))
head(Cayo.OR3.arr3)
tail(Cayo.OR3.arr3)
# main loggers (one logger per site)
Cayo.OR3.arr3 <- xts(zoo(read.table("Cayo.OR3.arr3.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,15,0,0,0), "15 min", tz="GMT")))
tail(Cayo.OR3.arr3)
# main loggers (one logger per site)
Cayo.OR3.arr3 <- xts(zoo(read.table("Cayo.OR3.arr3.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
Drago.OR4 <- xts(zoo(read.table("Drago.OR4.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
Punta.IR1 <- xts(zoo(read.table("Punta.IR1.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2 <- xts(zoo(read.table("STRI.IR2.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
Cristo.IR3.arr1 <- xts(zoo(read.table("Cristo.IR3.arr1.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
tail(Cayo.OR3.arr3)
tail(Punta.IR1)
# main loggers (one logger per site)
Cayo.OR3.arr3 <- xts(zoo(read.table("Cayo.OR3.arr3.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
Drago.OR4 <- xts(zoo(read.table("Drago.OR4.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
Punta.IR1 <- xts(zoo(read.table("Punta.IR1.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2 <- xts(zoo(read.table("STRI.IR2.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
Cristo.IR3.arr1 <- xts(zoo(read.table("Cristo.IR3.arr1.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
# fix cristobal temp to degrees C because the logger was deployed in F
Cristo.IR3.arr1 <- ((Cristo.IR3.arr1 - 32) * (5/9))
tail(Punta.IR1)
tail(Cayo.OR3.arr3)
head(STRI.IR2)
tail(STRI.IR2)
STRI.IR2.arr4 <- xts(zoo(read.table("STRI.IR2.arr4.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2.arr5 <- xts(zoo(read.table("STRI.IR2.arr5.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2.arr6 <- xts(zoo(read.table("STRI.IR2.arr6.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2.arr7 <- xts(zoo(read.table("STRI.IR2.arr7.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2.arr10 <- xts(zoo(read.table("STRI.IR2.arr10.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2.arr12 <- xts(zoo(read.table("STRI.IR2.arr12.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
Cristo.IR3.arr1
library(shiny)
library(plotly)
library(plyr)
library(dplyr)
library(reshape2)
library(tidyr)
library(ggplot2)
library(xts)
library(zoo)
library(TTR)
library(scales)
library(ggpubr)
library(signal)
library(data.table)
library(ggridges)
library(Rmisc)
##### II: Frequent Color Palettes ####
cols_site <- c("CI" = "#543005", "PD"= "#bf812d",  "SP"= "#dfc27d",  "BN" = "#003c30", "BS"= "#35978f", "CA"= "#80cdc1")
cols_treat <- c("darkgrey", "#FF9966","#CC3300","#7f0000")
cols_lineage <- c("L1" = "#3f007d", "L2" = "#807dba", "L3" = "#bcbddc")
its2_cols_greens = c("C1" = "#edf8e9", "C3af" = "#238b45","C3" = "#a1d99b","D1" = "#00441b")
# set wd
setwd("/Users/hannahaichelman/Documents/BU/TVE/TemperatureData/Field_Hobo_Loggers/Trimmed HOBO txt files")
# what's in the wd
list.files("/Users/hannahaichelman/Documents/BU/TVE/TemperatureData/Field_Hobo_Loggers/Trimmed HOBO txt files")
Cayo.OR3.arr3 <- xts(zoo(read.table("Cayo.OR3.arr3.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
Drago.OR4 <- xts(zoo(read.table("Drago.OR4.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
Punta.IR1 <- xts(zoo(read.table("Punta.IR1.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2 <- xts(zoo(read.table("STRI.IR2.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
Cristo.IR3.arr1 <- xts(zoo(read.table("Cristo.IR3.arr1.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
# fix cristobal temp to degrees C because the logger was deployed in F
Cristo.IR3.arr1 <- ((Cristo.IR3.arr1 - 32) * (5/9))
# STRI array loggers
STRI.IR2.arr4 <- xts(zoo(read.table("STRI.IR2.arr4.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2.arr5 <- xts(zoo(read.table("STRI.IR2.arr5.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2.arr6 <- xts(zoo(read.table("STRI.IR2.arr6.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2.arr7 <- xts(zoo(read.table("STRI.IR2.arr7.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2.arr10 <- xts(zoo(read.table("STRI.IR2.arr10.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2.arr12 <- xts(zoo(read.table("STRI.IR2.arr12.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
head(Cayo.OR3.arr3)
tail(Cayo.OR3.arr3)
# main loggers (one logger per site)
Cayo.OR3.arr3 <- xts(zoo(read.table("Cayo.OR3.arr3.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,15,0,0,0), "15 min", tz="GMT")))
tail(Cayo.OR3.arr3)
# main loggers (one logger per site)
Cayo.OR3.arr3 <- xts(zoo(read.table("Cayo.OR3.arr3.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
tail(Cayo.OR3.arr3)
Cayo.OR3.arr3 <- xts(zoo(read.table("Cayo.OR3.arr3.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
Drago.OR4 <- xts(zoo(read.table("Drago.OR4.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
Punta.IR1 <- xts(zoo(read.table("Punta.IR1.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2 <- xts(zoo(read.table("STRI.IR2.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
Cristo.IR3.arr1 <- xts(zoo(read.table("Cristo.IR3.arr1.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
# fix cristobal temp to degrees C because the logger was deployed in F
Cristo.IR3.arr1 <- ((Cristo.IR3.arr1 - 32) * (5/9))
# STRI array loggers
STRI.IR2.arr4 <- xts(zoo(read.table("STRI.IR2.arr4.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2.arr5 <- xts(zoo(read.table("STRI.IR2.arr5.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2.arr6 <- xts(zoo(read.table("STRI.IR2.arr6.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2.arr7 <- xts(zoo(read.table("STRI.IR2.arr7.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2.arr10 <- xts(zoo(read.table("STRI.IR2.arr10.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
STRI.IR2.arr12 <- xts(zoo(read.table("STRI.IR2.arr12.trmd.txt", header=TRUE, sep = '\t')$temp,seq.POSIXt(ISOdate(2015,6,10,0,0,0),ISOdate(2016,8,14,0,0,0), "15 min", tz="GMT")))
Cayo.OR3.arr3.mmax <- apply.monthly(Cayo.OR3.arr3['/'], FUN = max)
Drago.OR4.mmax <- apply.monthly(Drago.OR4['/'], FUN = max)
Punta.IR1.mmax <- apply.monthly(Punta.IR1['/'], FUN = max)
STRI.IR2.mmax <- apply.monthly(STRI.IR2['/'], FUN = max)
Cristo.IR3.arr1.mmax <- apply.monthly(Cristo.IR3.arr1['/'], FUN = max)
# (step 2) merge the sites together
#          can only merge two objects at a time
merge <- merge(Cayo.OR3.arr3.mmax,Drago.OR4.mmax)
merge <- merge(merge, Punta.IR1.mmax)
merge <- merge(merge,STRI.IR2.mmax)
merged <- merge(merge, Cristo.IR3.arr1.mmax)
# (step 3) rename the columns to keep identifying info
colnames(merged) <- c('Cayo.OR3.arr3','Drago.OR4','Punta.IR1','STRI.IR2','Cristo.IR3.arr1')
# (step 4) make it a data.frame and carry over the datetime info as a variable via keep row names, rename column
merged <- as.data.frame(merged)
merged <- setDT(merged, keep.rownames = T)
colnames(merged) <- c('datetime','Cayo.OR3.arr3','Drago.OR4','Punta.IR1','STRI.IR2','Cristo.IR3.arr1')
# (step 5) melt to put the data in longform
melt.mmax <- melt(merged, id.vars = 'datetime', measure.vars = c('Cayo.OR3.arr3','Drago.OR4','Punta.IR1','STRI.IR2','Cristo.IR3.arr1'))
colnames(melt.mmax) <- c('datetime', 'logger', 'mmax')
head(melt.mmax)
# ii. minimum temperature by month #
Cayo.OR3.arr3.mmin<- apply.monthly(Cayo.OR3.arr3['/'], FUN = min)
Drago.OR4.mmin <- apply.monthly(Drago.OR4['/'], FUN = min)
Punta.IR1.mmin <- apply.monthly(Punta.IR1['/'], FUN = min)
STRI.IR2.mmin <- apply.monthly(STRI.IR2['/'], FUN = min)
Cristo.IR3.arr1.mmin <- apply.monthly(Cristo.IR3.arr1['/'], FUN = min)
merge <- merge(Cayo.OR3.arr3.mmin,Drago.OR4.mmin)
merge <- merge(merge, Punta.IR1.mmin)
merge <- merge(merge,STRI.IR2.mmin)
merged <- merge(merge, Cristo.IR3.arr1.mmin)
colnames(merged) <- c('Cayo.OR3.arr3','Drago.OR4','Punta.IR1','STRI.IR2','Cristo.IR3.arr1')
merged <- as.data.frame(merged)
merged <- setDT(merged, keep.rownames = T)
colnames(merged) <- c('datetime','Cayo.OR3.arr3','Drago.OR4','Punta.IR1','STRI.IR2','Cristo.IR3.arr1')
melt.mmin <- melt(merged, id.vars = 'datetime', measure.vars = c('Cayo.OR3.arr3','Drago.OR4','Punta.IR1','STRI.IR2','Cristo.IR3.arr1'))
colnames(melt.mmin) <- c('datetime', 'logger', 'mmin')
head(melt.mmin)
# iii. mean temperature by month #
Cayo.OR3.arr3.mmean<- apply.monthly(Cayo.OR3.arr3['/'], FUN = mean)
Drago.OR4.mmean <- apply.monthly(Drago.OR4['/'], FUN = mean)
Punta.IR1.mmean <- apply.monthly(Punta.IR1['/'], FUN = mean)
STRI.IR2.mmean <- apply.monthly(STRI.IR2['/'], FUN = mean)
Cristo.IR3.arr1.mmean <- apply.monthly(Cristo.IR3.arr1['/'], FUN = mean)
merge <- merge(Cayo.OR3.arr3.mmean,Drago.OR4.mmean)
merge <- merge(merge, Punta.IR1.mmean)
merge <- merge(merge,STRI.IR2.mmean)
merged <- merge(merge, Cristo.IR3.arr1.mmean)
colnames(merged) <- c('Cayo.OR3.arr3','Drago.OR4','Punta.IR1','STRI.IR2','Cristo.IR3.arr1')
merged <- as.data.frame(merged)
merged <- setDT(merged, keep.rownames = T)
colnames(merged) <- c('datetime','Cayo.OR3.arr3','Drago.OR4','Punta.IR1','STRI.IR2','Cristo.IR3.arr1')
melt.mmean <- melt(merged, id.vars = 'datetime', measure.vars = c('Cayo.OR3.arr3','Drago.OR4','Punta.IR1','STRI.IR2','Cristo.IR3.arr1'))
colnames(melt.mmean) <- c('datetime', 'logger', 'mmean')
head(melt.mmean)
# merge the max, min, and mean and melt
m.maxmin <- merge(melt.mmax, melt.mmin)
m.maxminmean <- merge(m.maxmin, melt.mmean)
melt.mmmm <- melt(m.maxminmean, id.vars = c('datetime','logger'), measure.vars = c('mmax','mmin','mmean'))
head(melt.mmmm)
# it's easier to do use setDT to get "typical day" patterns than xtx/zoo because the unique datetime values in the xts/zoo preclude looking at things by time of day
monthly.mmm<-setDT(melt.mmmm)[, list(max = max(value), min = min(value), mean=mean(value)), by=list(logger,datetime)]
# add in range
monthly.mmm$range <- (monthly.mmm$max - monthly.mmm$min)
monthly.mmm$logger <- factor(monthly.mmm$logger, levels = c('Punta.IR1', 'STRI.IR2', 'Cristo.IR3.arr1', 'Cayo.OR3.arr3', 'Drago.OR4'))
head(monthly.mmm)
#add in separate date column, since time doesn't matter for weekly data
monthly.mmm$date <- as.Date(monthly.mmm$datetime,"%Y-%m-%d" )
# add in separate month column
head(monthly.mmm)
monthly.mmm$datetime
monthly.mmm$month <- ifelse(monthly.mmm$date == '2015-06-30', 'jun',
ifelse(monthly.mmm$date == '2015-07-31', 'jul',
ifelse(monthly.mmm$date == '2015-08-31', 'aug',
ifelse(monthly.mmm$date == '2015-09-30', 'sep',
ifelse(monthly.mmm$date == '2015-10-31', 'oct',
ifelse(monthly.mmm$date == '2015-11-30', 'nov',
ifelse(monthly.mmm$date == '2015-12-31', 'dec',
ifelse(monthly.mmm$date == '2016-01-31', 'jan',
ifelse(monthly.mmm$date == '2016-02-29', 'feb',
ifelse(monthly.mmm$date == '2016-03-31', 'mar',
ifelse(monthly.mmm$date == '2016-04-30', 'apr',
ifelse(monthly.mmm$date == '2016-05-31', 'may',
ifelse(monthly.mmm$date == '2016-06-30', 'jun',
ifelse(monthly.mmm$date == '2016-07-31', 'jul',
ifelse(monthly.mmm$date == '2016-08-12', 'aug',
'NA')))))))))))))))
write.csv(monthly.mmm, file = "/Users/hannahaichelman/Documents/BU/TVE/TemperatureData/Field_Hobo_Loggers/data_sheets/MonthlyTempParams.csv", row.names = FALSE)
aggregate(range ~ logger, data = monthly.mmm, FUN = "mean")
Cayo.OR3.arr3.wmax <- apply.weekly(Cayo.OR3.arr3['/'], FUN = max)
Drago.OR4.wmax <- apply.weekly(Drago.OR4['/'], FUN = max)
Punta.IR1.wmax <- apply.weekly(Punta.IR1['/'], FUN = max)
STRI.IR2.wmax <- apply.weekly(STRI.IR2['/'], FUN = max)
Cristo.IR3.arr1.wmax <- apply.weekly(Cristo.IR3.arr1['/'], FUN = max)
# (step 2) merge the sites together
#          can only merge two objects at a time
weekmerge <- merge(Cayo.OR3.arr3.wmax,Drago.OR4.wmax)
weekmerge <- merge(weekmerge, Punta.IR1.wmax)
weekmerge <- merge(weekmerge,STRI.IR2.wmax)
weekmerged <- merge(weekmerge, Cristo.IR3.arr1.wmax)
# (step 3) rename the columns to keep identifying info
colnames(weekmerged) <- c('Cayo.OR3.arr3','Drago.OR4','Punta.IR1','STRI.IR2','Cristo.IR3.arr1')
# (step 4) make it a data.frame and carry over the datetime info as a variable via keep row names, rename column
weekmerged <- as.data.frame(weekmerged)
weekmerged <- setDT(weekmerged, keep.rownames = T)
colnames(weekmerged) <- c('datetime','Cayo.OR3.arr3','Drago.OR4','Punta.IR1','STRI.IR2','Cristo.IR3.arr1')
# (step 5) melt to put the data in longform
melt.wmax <- melt(weekmerged, id.vars = 'datetime', measure.vars = c('Cayo.OR3.arr3','Drago.OR4','Punta.IR1','STRI.IR2','Cristo.IR3.arr1'))
colnames(melt.wmax) <- c('datetime', 'logger', 'wmax')
head(melt.wmax)
# ii. minimum temperature by week #
Cayo.OR3.arr3.wmin<- apply.weekly(Cayo.OR3.arr3['/'], FUN = min)
Drago.OR4.wmin <- apply.weekly(Drago.OR4['/'], FUN = min)
Punta.IR1.wmin <- apply.weekly(Punta.IR1['/'], FUN = min)
STRI.IR2.wmin <- apply.weekly(STRI.IR2['/'], FUN = min)
Cristo.IR3.arr1.wmin <- apply.weekly(Cristo.IR3.arr1['/'], FUN = min)
weekmerge <- merge(Cayo.OR3.arr3.wmin,Drago.OR4.wmin)
weekmerge <- merge(weekmerge, Punta.IR1.wmin)
weekmerge <- merge(weekmerge,STRI.IR2.wmin)
weekmerged <- merge(weekmerge, Cristo.IR3.arr1.wmin)
colnames(weekmerged) <- c('Cayo.OR3.arr3','Drago.OR4','Punta.IR1','STRI.IR2','Cristo.IR3.arr1')
weekmerged <- as.data.frame(weekmerged)
weekmerged <- setDT(weekmerged, keep.rownames = T)
colnames(weekmerged) <- c('datetime','Cayo.OR3.arr3','Drago.OR4','Punta.IR1','STRI.IR2','Cristo.IR3.arr1')
melt.wmin <- melt(weekmerged, id.vars = 'datetime', measure.vars = c('Cayo.OR3.arr3','Drago.OR4','Punta.IR1','STRI.IR2','Cristo.IR3.arr1'))
colnames(melt.wmin) <- c('datetime', 'logger', 'wmin')
head(melt.wmin)
# iii. mean temperature by week #
Cayo.OR3.arr3.wmean<- apply.weekly(Cayo.OR3.arr3['/'], FUN = mean)
Drago.OR4.wmean <- apply.weekly(Drago.OR4['/'], FUN = mean)
Punta.IR1.wmean <- apply.weekly(Punta.IR1['/'], FUN = mean)
STRI.IR2.wmean <- apply.weekly(STRI.IR2['/'], FUN = mean)
Cristo.IR3.arr1.wmean <- apply.weekly(Cristo.IR3.arr1['/'], FUN = mean)
weekmerge <- merge(Cayo.OR3.arr3.wmean,Drago.OR4.wmean)
weekmerge <- merge(weekmerge, Punta.IR1.wmean)
weekmerge <- merge(weekmerge,STRI.IR2.wmean)
weekmerged <- merge(weekmerge, Cristo.IR3.arr1.wmean)
colnames(weekmerged) <- c('Cayo.OR3.arr3','Drago.OR4','Punta.IR1','STRI.IR2','Cristo.IR3.arr1')
weekmerged <- as.data.frame(weekmerged)
weekmerged <- setDT(weekmerged, keep.rownames = T)
colnames(weekmerged) <- c('datetime','Cayo.OR3.arr3','Drago.OR4','Punta.IR1','STRI.IR2','Cristo.IR3.arr1')
melt.wmean <- melt(weekmerged, id.vars = 'datetime', measure.vars = c('Cayo.OR3.arr3','Drago.OR4','Punta.IR1','STRI.IR2','Cristo.IR3.arr1'))
colnames(melt.wmean) <- c('datetime', 'logger', 'wmean')
head(melt.wmean)
# merge the max, min, and mean and melt
w.maxmin <- merge(melt.wmax, melt.wmin)
w.maxminmean <- merge(w.maxmin, melt.wmean)
melt.wmmm <- melt(w.maxminmean, id.vars = c('datetime','logger'), measure.vars = c('wmax','wmin','wmean'))
head(melt.wmmm)
# it's easier to do use setDT to get "typical day" patterns than xtx/zoo because the unique datetime values in the xts/zoo preclude looking at things by time of day
weekly.mmm<-setDT(melt.wmmm)[, list(max = max(value), min = min(value), mean=mean(value)), by=list(logger,datetime)]
# add in range
weekly.mmm$range <- (weekly.mmm$max - weekly.mmm$min)
weekly.mmm$logger <- factor(weekly.mmm$logger, levels = c('Punta.IR1', 'STRI.IR2', 'Cristo.IR3.arr1', 'Cayo.OR3.arr3', 'Drago.OR4'))
head(weekly.mmm)
#add in separate date column, since time doesn't matter for weekly data
weekly.mmm$date <- as.Date(weekly.mmm$datetime,"%Y-%m-%d" )
# add in separate month column
head(weekly.mmm)
write.csv(weekly.mmm, file = "/Users/hannahaichelman/Documents/BU/TVE/TemperatureData/Field_Hobo_Loggers/data_sheets/WeeklyTempParams.csv", row.names = FALSE)
# merge the sites together
# can only merge two objects at a time
merge <- merge(Cayo.OR3.arr3,Drago.OR4)
merge <- merge(merge, Punta.IR1)
merge <- merge(merge,STRI.IR2)
merged <- merge(merge, Cristo.IR3.arr1)
head(merged)
# rename the columns to keep identifying info
colnames(merged) <- c('Cayo.OR3.arr3','Drago.OR4','Punta.IR1','STRI.IR2','Cristo.IR3.arr1')
merged <- as.data.frame(merged)
merged <- setDT(merged, keep.rownames = T)
colnames(merged) <- c('datetime','Cayo.OR3.arr3','Drago.OR4','Punta.IR1','STRI.IR2','Cristo.IR3.arr1')
head(merged)
# melt, format, add in separate date and time columns
master.melt<- melt(merged, id.vars = 'datetime', measure.vars = c('Cayo.OR3.arr3','Drago.OR4','Punta.IR1','STRI.IR2','Cristo.IR3.arr1'))
colnames(master.melt) <- c('datetime','logger','temp')
head(master.melt)
# when you converted master.melt to a data.table, the datetime became a character string. this is useful because we can pull date and time out individually.
master.melt$time <- substr(master.melt$datetime, 12, 19)
master.melt$date <- as.Date(master.melt$datetime,"%Y-%m-%d" )
# but now put them back in POSIX format so R knows they're dates
# note that when you do this, the time column will be arbitrarily assigned all the same date (current date)
master.melt$datetime <- as.POSIXct(strptime(master.melt$datetime, "%Y-%m-%d %H:%M:%S"))
master.melt$time <- as.POSIXct(strptime(master.melt$time, "%H:%M:%S"))
head(master.melt)
tail(master.melt)
write.csv(master.melt, file = "/Users/hannahaichelman/Documents/BU/TVE/TemperatureData/Field_Hobo_Loggers/data_sheets/AllTempData.csv", row.names = FALSE)
head(master.melt)
aggregate(temp ~ logger, data = master.melt, FUN = "min")
aggregate(temp ~ logger, data = master.melt, FUN = "max")
aggregate(temp ~ logger, data = master.melt, FUN = "mean")
# it's easier to do use setDT to get "typical day" patterns than xtx/zoo because the unique datetime values in the xts/zoo preclude looking at things by time of day
daily.mmm<-setDT(master.melt)[, list(max = max(temp), min = min(temp), mean=mean(temp)), by=list(logger,date)]
# add in range
daily.mmm$range <- (daily.mmm$max - daily.mmm$min)
daily.mmm$logger <- factor(daily.mmm$logger, levels = c('Punta.IR1', 'STRI.IR2', 'Cristo.IR3.arr1', 'Cayo.OR3.arr3', 'Drago.OR4'))
head(daily.mmm)
write.csv(daily.mmm, file = "/Users/hannahaichelman/Documents/BU/TVE/TemperatureData/Field_Hobo_Loggers/data_sheets/DailyTempRangeData.csv", row.names = FALSE)
daily.mmm = daily.mmm %>%
dplyr::filter(logger!="Drago.OR4")
# rank sites by daily variability overall
aggregate(range ~ logger, data = daily.mmm, FUN = "mean")
aggregate(range ~ logger, data = daily.mmm, FUN = "max")
summarySE(data = daily.mmm, groupvar = "logger", measurevar = "mean")
summarySE(data = daily.mmm, groupvar = "logger", measurevar = "min")
summarySE(data = daily.mmm, groupvar = "logger", measurevar = "max")
summarySE(data = daily.mmm, groupvar = "logger", measurevar = "range")
# rank sites by daily variability overall
aggregate(range ~ logger, data = daily.mmm, FUN = "mean")
aggregate(range ~ logger, data = daily.mmm, FUN = "max")
# daily variability logger data
daily.mmm %>%
group_by(logger) %>%
summarise(percent90 = quantile(range, probs = 0.9))
str(daily.mmm)
# daily variability logger data
daily.mmm %>%
dplyr::group_by(logger) %>%
summarise(percent90 = quantile(range, probs = 0.9))
daily.mmm %>%
dplyr::group_by(logger)
# daily variability logger data
daily.mmm %>%
group_by(logger) %>%
summarise(percent90 = quantile(range, probs = 0.9))
daily.mmm %>%
group_by(logger) %>%
summarise(percent90 = quantile(range, probs = 0.9))
str(daily.mmm)
daily.mmm
head(daily.mmm)
daily.mmm$logger
daily.mmm.plot = daily.mmm %>%
dplyr::filter(logger != "Drago.OR4")
str(daily.mmm.plot)
daily.mmm.plot$logger = as.factor(daily.mmm.plot$logger)
daily.mmm.plot$logger
daily.mmm.plot = daily.mmm %>%
dplyr::filter(logger != "Drago.OR4")
str(daily.mmm.plot)
daily.mmm.plot$logger = as.factor(daily.mmm.plot$logger)
levels(daily.mmm.plot$logger) <- c("CA", "CI", "PD","SP")
daily.mmm.plot$logger <- factor(daily.mmm.plot$logger, levels = c("PD", "SP", "CI", "CA"))
daily.mmm.plot$logger
daily.mmm.plot = daily.mmm %>%
dplyr::filter(logger != "Drago.OR4")
daily.mmm.plot
str(daily.mmm.plot)
daily.mmm.plot$logger = as.factor(daily.mmm.plot$logger)
levels(daily.mmm.plot$logger) <- c("CA", "CI", "PD","SP")

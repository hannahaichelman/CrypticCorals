corrsa_phys <- read_excel("/Users/hannahaichelman/Documents/BU/TVE/Corallite_SA/Corallite_SA_Measurements.xlsx", sheet = "data")
library(ggplot2)
library(lme4)
library(plotly)
library(ggridges)
library(tidyverse)
library(arsenal) #easily compare two data frames
library(Rmisc)
library(lmerTest)
library(emmeans)
library(reshape)
library(readxl)
library(wesanderson)
library(ggpubr)
library(car)
##### Read in and format data #####
# set wd
setwd("/Users/hannahaichelman/Documents/BU/TVE")
# read in the data
post_phys <- read.csv('dtvmaster.csv')
init_phys <- read.csv('initial-phys-mod.csv')
# set color palettes
#palsite <- c('red4','indianred3','mistyrose3','royalblue4','cornflowerblue','lightblue')
cols_site <- c("CI" = "#543005", "PD"= "#bf812d",  "SP"= "#dfc27d",  "BN" = "#003c30", "BS"= "#35978f", "CA"= "#80cdc1")
cols_treat <- c("darkgrey", "#FF9966","#CC3300","#7f0000")
cols_lineage <- c("L1" = "#3f007d", "L2" = "#807dba", "L3" = "#bcbddc")
corrsa_phys <- read_excel("/Users/hannahaichelman/Documents/BU/TVE/Corallite_SA/Corallite_SA_Measurements.xlsx", sheet = "data")
head(corrsa_phys)
# remove test fragments and column of notes to look at data
corrsa_phys = corrsa_phys %>%
filter(sample.ID != "I2A6 (test)") %>%
filter(sample.ID != "I2A6 (test2)") %>%
select(sample.ID, std.area, corallite.avg.area, corallite.avg.poly) %>%
dplyr::rename(frag = sample.ID)
# re-name treatment
corrsa_phys$treat <- c("Initial")
# add identifying data
corrsa_phys$origsitecode <- substr(corrsa_phys$frag, 1, 2)
# add in site name with inshore/offshore indicator
corrsa_phys$sitename <- ifelse(corrsa_phys$origsitecode == 'I2', 'SP',
ifelse(corrsa_phys$origsitecode == 'I3', 'CI',
ifelse(corrsa_phys$origsitecode == 'I4', 'PD',
ifelse(corrsa_phys$origsitecode == 'O2', 'BS',
ifelse(corrsa_phys$origsitecode == 'O3', 'CA',
'BN')))))
corrsa_phys$sitename <- as.factor(corrsa_phys$sitename)
# make new nubbin IDs based on the new, more informative site codes
# add inshore/offshore designation
corrsa_phys$reef <- substr(corrsa_phys$frag,1,1)
corrsa_phys$reef <- ifelse(corrsa_phys$reef == 'O', 'Outer Reef', 'Inner Reef')
corrsa_phys$reef <- as.factor(corrsa_phys$reef)
corrsa_phys$genet <- substr(corrsa_phys$frag,3,3)
#create a new column of combined genotype and site for stats later
corrsa_phys = corrsa_phys %>%
unite(gen_site, c(origsitecode,genet), sep = "", remove = FALSE) %>%
mutate(gen_site = as.factor(gen_site)) %>%
filter(gen_site != "I4G") # clone with I4F, remove from dataset
plot(corrsa_phys$corallite.avg.area, corrsa_phys$corallite.avg.poly, pch = 16)
abline(lm(corrsa_phys$corallite.avg.poly ~ corrsa_phys$corallite.avg.area), col = "red", lwd = 3) # add regression line
text(paste("Correlation:", round(cor(corrsa_phys$corallite.avg.area, corrsa_phys$corallite.avg.poly), 2)), x = 10000, y = 4500) # add Pearson correlation
# now need to convert between pixel # and mm^2 for the corallite.avg.poly measurement
# cross multiply to solve for unknown number of mm^2
corrsa_phys = corrsa_phys %>%
mutate(corallite.avg.poly.mm2 = ((corallite.avg.poly*400)/std.area))
# merge with lineage info for later plotting
lineages = read.csv("/Users/hannahaichelman/Documents/BU/TVE/2bRAD/Analysis/tuftscustompipeline_denovo_nosyms/tve_lineages_noclones.csv")
corrsa_phys_all_lin <- left_join(corrsa_phys, lineages, by = "gen_site")
corrsa_phys_all_lin$lineage = as.factor(corrsa_phys_all_lin$lineage)
corrsa_phys_2_lin = corrsa_phys_all_lin %>%
filter(is.na(lineage) | lineage!="L3") # want to keep NA values for lineage here since they still have other info, will remove na's for lineage specific plots
# Stats by lineage
str(corrsa_phys_all_lin)
m1 <- lmer(corallite.avg.poly.mm2 ~ lineage + (1|gen_site), data = corrsa_phys_all_lin, REML=TRUE)
summary(m1)
anova(m1)
corrsa_phys_all_lin$gen_site = as.factor(corrsa_phys_all_lin$gen_site)
m1 <- lmer(corallite.avg.poly.mm2 ~ lineage + (1|gen_site), data = corrsa_phys_all_lin, REML=TRUE)
summary(m1)
anova(m1)
lsmeans(m1, pairwise~lineage, adjust="tukey")
summary(m1)
anova(m1)
lsmeans(m1, pairwise~lineage, adjust="tukey")
library(plyr)
library(dplyr)
library(tidyverse)
library(vegan)
setwd("/Users/hannahaichelman/Documents/BU/TVE/2bRAD/Analysis/")
bams=data.frame(read.table("tuftscustompipeline_denovo_nosyms/bams.txt", header=FALSE)) # list of bam files
colnames(bams)<- "bam"
# loading individual to population correspondences
i2p=read.table("bam_barcode_names_tuftscustom.csv",sep=",",header=TRUE) # 2-column tab-delimited table of individual assignments to populations; must be in the same order as samples in the bam list or vcf file.
row.names(i2p)=i2p[,1]
#i2p=i2p[goods,]
site=i2p[,2]
# add in site name
i2p$sitename <- ifelse(i2p$pop == 'I2', 'SP',
ifelse(i2p$pop == 'I3', 'CI',
ifelse(i2p$pop == 'I4', 'PD',
ifelse(i2p$pop == 'O2', 'BS',
ifelse(i2p$pop == 'O3', 'CA',
'BN')))))
# create new data frame using i2p without clones (duplicated preps), but still with two actual clones (I4G + I4F)
# this is removing files that have the lower coverage/fewer reads
i2p_noclones_allsamps = i2p %>%
dplyr::filter(bam != "4-MullenDavies_S4_TCAC.nosymbio.fastq.bam") %>% # O4E
dplyr::filter(bam != "1-MullenDavies_S1_GCTT.nosymbio.fastq.bam") %>% # O2A
dplyr::filter(prepped_id != "I4A_CLONE") %>% # I4A
dplyr::filter(bam != "2-MullenDavies_S2_AGTG.nosymbio.fastq.bam") %>% # O4A
dplyr::filter(bam != "3-MullenDavies_S3_TGGT.nosymbio.fastq.bam") %>% # I3H
dplyr::filter(prepped_id != "O3B_CLONE") %>% # O3B
dplyr::filter(bam != "4-MullenDavies_S4_TCAG.nosymbio.fastq.bam") %>% # O2E
dplyr::filter(bam != "1-MullenDavies_S1_TGGT.nosymbio.fastq.bam") %>% # I2E sample 1
dplyr::filter(bam != "5-MullenDavies_S5_TGGT.nosymbio.fastq.bam") %>% # I2E sample 2
dplyr::filter(bam != "1-MullenDavies_S1_ACCA.nosymbio.fastq.bam") # I3C
# make a new bams file with this filtered i2p file and write out a csv file
bams_noclones_allsamps = i2p_noclones_allsamps %>%
select(bam)
# Remove I4G so this is actually no clones here - I4G was a smaller bam file
i2p_noclones = i2p_noclones_allsamps %>%
dplyr::filter(bam != "1-MullenDavies_S1_GTGA.nosymbio.fastq.bam") # I4G
# make new bams file for this filtered i2p file with no clones at all
bams_noclones = i2p_noclones %>%
select(bam)
site=i2p_noclones[,8]
# setting up colors for plotting
palette(rainbow(length(unique(site))))
colors=as.numeric(as.factor(site))
colpops=as.numeric(as.factor(sort(unique(site))))
cols_site <- c("CI" = "#543005", "PD"= "#bf812d",  "SP"= "#dfc27d",  "BN" = "#003c30", "BS"= "#35978f", "CA"= "#80cdc1")
cols_treat <- c("darkgrey", "#FF9966","#CC3300","#7f0000")
cols_lineage <- c("#bcbddc","#756bb1")
#-------------
# clustering / PCoA based on identity by state (IBS) based on single read resampling
# (for low and/or uneven coverage)
# all clones removed
ma = as.matrix(read.table("tuftscustompipeline_denovo_nosyms/myresult2.noclone.ibsMat"))
colnames(ma)=i2p_noclones$sample_id
rownames(ma)=i2p_noclones$sample_id
# to make cluster dendrogram with all samples included:
ma = as.matrix(read.table("tuftscustompipeline_denovo_nosyms/myresult2.ibsMat"))
colnames(ma)=i2p$sample_id
rownames(ma)=i2p$sample_id
hc=hclust(as.dist(ma),"ave")
plot(hc,cex=0.5)  # this shows how similar clones are
abline(h=0.265, lwd = 2, lty = 2, col = "grey")
# performing PCoA and CAP
conds=data.frame(cbind(site))
pp0=capscale(ma~1)
pp=capscale(ma~site,conds)
# prettier ggplot option
axes2plot=c(1,2)
pca_s <- as.data.frame(cmd$CA$u[,axes2plot])
#-------------
# clustering / PCoA based on identity by state (IBS) based on single read resampling
# (for low and/or uneven coverage)
# all clones removed
ma = as.matrix(read.table("tuftscustompipeline_denovo_nosyms/myresult2.noclone.ibsMat"))
colnames(ma)=i2p_noclones$sample_id
rownames(ma)=i2p_noclones$sample_id
hc=hclust(as.dist(ma),"ave")
plot(hc,cex=0.5)  # this shows how similar clones are
abline(h=0.265, lwd = 2, lty = 2, col = "grey")
# performing PCoA and CAP
conds=data.frame(cbind(site))
pp0=capscale(ma~1)
pp=capscale(ma~site,conds)
# significance of by-site divergence
adonis(ma~site,conds)
# significance of by-site divergence
adonis = adonis(ma~site,conds)
head(adonis)
# significance of by-site divergence
adonis2(ma~site,conds)
# eigenvectors
plot(pp0$CA$eig)
# find % variance explained - eigenvector for MDS1 / sum of remaining eigenvectors
eigs = as.data.frame(pp0$CA$eig)
eigs$MDS = rownames(eigs)
head(eigs)
# % variance explained by MDS1 = 26.7% variance
eigs[1,1]/sum(eigs[2:49, 1])
# % variance explained by MDS2 = 3.9% variance explained
eigs[2,1]/sum(eigs[3:49, 1])
axes2plot=c(1,2)
library(adegenet) # for transp()
cmd=pp0
plot(cmd,choices=axes2plot,display="sites",type="n") # choices - axes to display
points(cmd,choices=axes2plot,pch=19,col=transp(colors,alpha=0.7))
#ordihull(cmd,choices= axes2plot,groups= conds$grp,draw="polygon",col=1+as.numeric(unique(as.factor(conds$grp))),label=T)
ordispider(cmd,choices= axes2plot,groups=conds$site,col="grey80")
ordiellipse(cmd,choices= axes2plot,groups= conds$site,draw="polygon",col=colpops,label=T)
# prettier ggplot option
axes2plot=c(1,2)
pca_s <- as.data.frame(cmd$CA$u[,axes2plot])
#colors=c('royalblue4','cornflowerblue','lightblue','red4','indianred3','mistyrose3')
cols_site <- c("CI" = "#543005", "PD"= "#bf812d",  "SP"= "#dfc27d",  "BN" = "#003c30", "BS"= "#35978f", "CA"= "#80cdc1")
MDS1_2 = ggplot(pca_s, aes(MDS1, MDS2)) +
theme_bw() +
geom_point(aes(colour=conds$site, shape =conds$site), size=2, stroke = 1)  +
stat_ellipse(type = "t",
aes(color = conds$site), show.legend = NA, lwd = 1) +
scale_color_manual(values=cols_site,
breaks = c("BN", "BS", "CA", "CI", "PD", "SP"),
name = "Site") +
scale_shape_manual(values = c(15,16,17,22,21,24),
breaks = c("BN", "BS", "CA", "CI", "PD", "SP"),
name = "Site") +
xlab("MDS1 (26.7% explained variance)") +
ylab("MDS2 (3.9% explained variance)")
MDS1_2
##### PCA Adonis Tests #####
#Use an Adonis test to get significance of factors on holobiont physiology
library(vegan)
library(MCMC.OTU)
library(MicEco)
t0_full = read.csv("/Users/hannahaichelman/Documents/BU/TVE/PCAs/t0_full.csv")
end_full = read.csv("/Users/hannahaichelman/Documents/BU/TVE/PCAs/end_full.csv")
str(t0_full)
str(end_full)
t0_full$sitename <- as.factor(t0_full$sitename)
t0_full$treat <- as.factor(t0_full$treat)
end_full$sitename <- as.factor(end_full$sitename)
end_full$treat <- as.factor(end_full$treat)
# add in genet id and combine with lineage dataframe to include 2bRAD population data in our T0 PCAs
t0_full$gen_site <- substr(t0_full$frag,1,3)
end_full$gen_site <- substr(end_full$frag,1,3)
lineages = read.csv("/Users/hannahaichelman/Documents/BU/TVE/2bRAD/Analysis/tuftscustompipeline_denovo_nosyms/tve_lineages_noclones.csv")
t0_full_lineage <- left_join(t0_full, lineages, by = "gen_site")
end_full_lineage <- left_join(end_full, lineages, by = "gen_site")
t0_full_lineage$lineage <- as.factor(t0_full_lineage$lineage)
end_full_lineage$lineage <- as.factor(end_full_lineage$lineage)
# add in dominant symbiont type dataframe
its2_types = read.csv("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/ITS2.dominanttype.csv") %>%
select(frag,  dominant_type) %>%
#mutate(D1_1 = D1_sum+1) %>%
#select(-D1_sum) %>%
mutate(dominant_type = as.factor(dominant_type))
end_full_lineage_its2 <- left_join(end_full_lineage, its2_types, by = "frag")
str(end_full_lineage_its2)
end_full_lineage_its2 = end_full_lineage_its2 %>%
unite(lin_sym, c(lineage,dominant_type), sep = "_", remove = FALSE) %>% # make new lineage_dominant type combined factor
mutate(lin_sym = as.factor(lin_sym))
# Dont want to use log transformed data here
# but need to remove NAs
t0_full_adonis = t0_full_lineage %>%
filter(complete.cases(.)) %>% #drop any row that has an NA for any time point
filter(lineage != "L3") # remove L3 individuals since these aren't in our PCAs
end_full_adonis = end_full_lineage_its2 %>%
filter(complete.cases(.)) %>% #drop any row that has an NA for any time point
mutate(T2_T0_perc_2 = T2_T0_perc + 2) %>%
select(-T2_T0_perc) %>% #get rid of the column with negative growth values before log transforming, just making sure to use the same data as we do in the PCAs
filter(lineage != "L3") # remove L3 individuals since these aren't in our PCAs
t0_full_adonis <- t0_full_adonis[, c(1,2,3,4,12,13,5,6,7,8,9,10,11)]
end_full_adonis <- end_full_adonis[, c(1,2,3,4,11,12,13,14,5,6,7,8,9,10,15)]
end_full_adonis_L1 = end_full_adonis %>%
filter(lineage == "L1")
end_full_adonis_L2 = end_full_adonis %>%
filter(lineage == "L2")
# Change dataframe here based on the comparison you are interested in
nl=startedLog(data=end_full_adonis,count.columns=9:15, logstart=1)
goods.dist=vegdist(nl, method="bray", na.rm = TRUE)
goods.pcoa=pcoa(goods.dist)
# PCA:
pcp=prcomp(nl, retx=TRUE, center=TRUE)
scores=goods.pcoa$vectors
summary(goods.pcoa)
conditions=end_full_adonis[, c("frag","treat","sitename","gen_site","reef","lineage","lin_sym","dominant_type")] #make sure to change dataframe here
# PERMANOVA
head(scores)
head(conditions)
end_model = adonis(scores~lineage+dominant_type+treat+sitename, data=conditions, method="euclidean", permutations = 10000)
adonis_OmegaSq(end_model, partial = TRUE)
end_model = adonis2(scores~lineage+dominant_type+treat+sitename, data=conditions, method="euclidean", permutations = 10000)
end_model
#packages
#install.packages("decontam")
library(decontam)
packageVersion("decontam") #‘1.10.0’ - NK's version - 1.16.0 HA's version
library(phyloseq)
library(tidyverse)
library(ggpubr)
library(dplyr)
library(viridis)
# SymPortal ITS2 DIV Analysis
# cleaned file up to remove extraneous info in the header in excel, but original file here:
# /Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/PreStress_Timepoint/20210421_aichelman_PreStress/its2_type_profiles/154_20210426_DBV_20210427T024417.profiles.absolute.abund_and_meta.txt
setwd("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/20210421_aichelman_PreStress/its2_type_profiles")
its2_prestress = read.csv("SymPortal_PreStress_RawDIVs.csv")
head(its2_prestress)
# Remove samples not included in this dataset
its2_prestress = its2_prestress %>%
filter(frag != "Alexa2") %>%
filter(frag != "Alexa1") %>%
filter(frag != "MA2") %>%
filter(frag != "ME1") %>%
filter(frag != "negcontrol1") %>%
filter(frag != "ITS-neg-old") %>%
filter(frag != "negcontrol2") %>%
filter(frag != "ITS-neg-new")
# Remove clades that are not symbiotic
its2_prestress2 = its2_prestress %>%
select(-contains("E1c"))
# Look for and remove DIVs with 0 reads after removing samples
colSums(its2_prestress2[,-1])
# Remove DIVs that have 0 reads
its2_prestress3 = its2_prestress2 %>%
select(-B2) %>%
select(-B1)
str(its2_prestress3)
its2_prestress3 = its2_prestress3 %>%
mutate_if(is.integer,as.numeric)
# Look for individual samples with 0 reads:
rowSums(its2_prestress3[, 2:21]) # I3H2 has 0 reads
# remove individuals with 0 reads and those in under-represented lineage 3
its2_prestress4 <- its2_prestress3 %>%
filter(frag!= "I3H2") %>% #have to remove sample I3H2 because 0 reads
filter(frag!="I2D4") %>% #lineage 3
filter(frag!="I2I7") %>% #lineage 3
filter(frag!="I2I4") %>% #lineage 3
filter(frag!="I2I3") %>% #lineage 3
filter(frag!="I2D1") %>% #lineage 3
filter(frag!="I2H13") %>% #lineage 3
filter(frag!="I2H2") %>% #lineage 3
filter(frag!="I2H12") %>% #lineage 3
filter(frag!="I2D3") %>% #lineage 3
filter(frag!="I2I10") %>% #lineage 3
filter(frag!="I2H4") %>% #lineage 3
column_to_rownames("frag")
head(its2_prestress4)
str(its2_prestress4)
# keep this df for div analysis
its2_divs = its2_prestress4
# read in sample data
# DIVs:
samdf = read.csv("SampleInfo.csv")
# add identifying data
phys_metadata = read.csv("/Users/hannahaichelman/Documents/BU/TVE/phys_metadata.csv") %>%
select(-dominant_type)
head(phys_metadata)
# combine with samdf
samdf = left_join(samdf, phys_metadata, by = "frag")
# remove the rows for samples that have been removed in data
samdf = samdf %>%
filter(frag != "negcontrol1") %>%
filter(frag != "ITS-neg-old") %>%
filter(frag != "negcontrol2") %>%
filter(frag != "ITS-neg-new") %>%
filter(frag != "I3H2") %>% #have to remove sample I3H2 'cause 0 reads
filter(is.na(lineage) | lineage!="L3") # remove lineage 3 from dataset but don't remove other NAs for lineage
str(samdf)
samdf$treat = as.factor(samdf$treat)
samdf$sitename = as.factor(samdf$sitename)
samdf$lineage = as.factor(samdf$lineage)
# change levels of treatment factor
samdf$treat = factor(samdf$treat,levels = c("Control","Control 2","Low Var","Mod Var","High Var"))
#rownames have to match between counts table & sample data table or else phyloseq will throw a fit
rownames(samdf) <- samdf$frag
#making a taxa table for phyloseq
taxa <- data.frame(colnames(its2_divs)) #extract sym data
colnames(taxa) <- c("DIV") #changing the column name to be more user-friendly
taxa$majority_its2 = c("B19",	"B5",	"C1",	"C1",	"C1",	"C3",	"C3af",	"C3",	"C1",	"C1",
"C1",	"C1",	"C1",	"C1",	"C15",	"D1",	"D1",	"D1",	"D1",	"D1")
taxa$genus = str_sub(taxa$DIV, 1, 1)
str(taxa)
taxa$DIV = as.factor(taxa$DIV)
taxa$majority_its2 = as.factor(taxa$majority_its2)
taxa$genus = as.factor(taxa$genus)
#rownmaes also have to match between the columns of the counts table & the taxa table or ps freaks out
rownames(taxa) <- taxa$DIV
taxa.m <- as.matrix(taxa) #also has to be a matrix
ps.its2 <- phyloseq(sample_data(samdf),
otu_table(its2_divs,taxa_are_rows=FALSE),
tax_table(taxa.m))
ps.its2
#### Bar plot - raw table pre-processing ####
# Skipping decontam for now since we are ignoring negative controls per ben hume
ps.rel <- transform_sample_counts(ps.its2, function(OTU) OTU/sum(OTU))
plot_bar(ps.rel, x="frag",fill="majority_its2")+
theme_classic()
#keeps samples with summed counts greater than 0
ps.its2.no0 <- prune_samples(sample_sums(ps.its2)!=0, ps.its2)
ps.its2.no0 # don't lose any
# Remove NA's to create ps object we will plot
ps.cleaner <- subset_samples(ps.its2.no0,(!is.na(lineage)))
ps.cleaner2 <- subset_samples(ps.cleaner,(!is.na(treat)))
ps.cleanest <- subset_samples(ps.cleaner2,(treat!="Control 2")) #156 samples remain
ps.cleanest.rel <- transform_sample_counts(ps.cleanest, function(OTU) OTU/sum(OTU))
# write this out as dataframe
seqtab.rel <- data.frame(ps.cleanest.rel@otu_table)
#write.csv(seqtab.rel, file="/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/ITS2.seqtab.rel.csv")
sample.data = data.frame(sample_data(ps.cleanest.rel))
taxa <- data.frame(ps.cleanest.rel@tax_table)
mtaxa <- as.matrix(taxa)
ps.cleanest = readRDS("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/ps.its2.RDS")
seqtab <- data.frame(ps.cleanest@otu_table)
samdf <- data.frame(ps.cleanest@sam_data)
ps.cleanest.rel = readRDS("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/ps.its2.rel.RDS")
seqtab.rel <- data.frame(ps.cleanest.rel@otu_table)
samdf.rel <- data.frame(ps.cleanest.rel@sam_data)
taxa = read.csv(file = "/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/symportal_taxa.csv", header = TRUE) %>%
select(-X)
rownames(taxa) <- as.factor(taxa$DIV)
sum(taxa$genus == "B") # 2 div
sum(taxa$genus == "C") # 13 div
sum(taxa$genus == "D") # 5 div
mtaxa <- as.matrix(taxa)
#### Bar plot - post-processing ####
#its2_cols_end = c("#D53E4F", "#F46D43", "#3288BD", "#FEE08B", "#E6F598", "#ABDDA4", "#66C2A5", "#3288BD", "#FDAE61")
#its2_cols_purple = c("white", "#efedf5","#bcbddc", "#756bb1")
its2_cols_greens = c("B19" = "#ffeda0", "B5" = "#fd8d3c",
"C1" = "#edf8e9", "C15" = "#feb24c",  "C3" = "#a1d99b",
"C3af" = "#238b45", "D1" = "#00441b")
plot_bar(ps.cleanest.rel, x="frag", fill="majority_its2") +
theme_bw()
ps.cleanest.rel.control = subset_samples(ps.cleanest.rel, treat=="Control")
ps.cleanest.rel.lowvar = subset_samples(ps.cleanest.rel, treat=="Low Var")
ps.cleanest.rel.modvar = subset_samples(ps.cleanest.rel, treat=="Mod Var")
ps.cleanest.rel.highvar = subset_samples(ps.cleanest.rel, treat=="High Var")
ps.cleanest.rel.CI = subset_samples(ps.cleanest.rel, sitename=="CI")
ps.cleanest.rel.CI.control = subset_samples(ps.cleanest.rel.CI, treat=="Control")
ps.cleanest.rel.CI.lowvar = subset_samples(ps.cleanest.rel.CI, treat=="Low Var")
ps.cleanest.rel.CI.modvar = subset_samples(ps.cleanest.rel.CI, treat=="Mod Var")
ps.cleanest.rel.CI.highvar = subset_samples(ps.cleanest.rel.CI, treat=="High Var")
# Lineage:
ps.lin <- merge_samples(ps.cleanest, "lineage")
ps.rel.lin <- transform_sample_counts(ps.lin, function(x) x / sum(x))
p.lineage = plot_bar(ps.rel.lin, fill="majority_its2") +
geom_bar(stat = "identity") +
scale_fill_manual(name = "Majority ITS2", values = its2_cols_greens) +
theme_bw()
p.lineage
ps.lin
ps.re.lin
ps.rel.lin
ps.rel.lin@otu_table
View(ps.rel.lin@otu_table)
=0.05329483 +
0.27409425+
0.0007563638+
0.0000000000+
0.0002117348
#work computer
setwd("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/16S_PreStress/")
# can skip to here once you have made the .Rdata files above
load("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/16S_PreStress/ps.clean.Rdata")
load("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/16S_PreStress/ps.rare.Rdata")
load("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/16S_PreStress/ps.trim.rare.Rdata")
load("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/16S_PreStress/ps.trim.Rdata")

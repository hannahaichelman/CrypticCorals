pca_t0_lineage_skel
##### PCA Adonis Tests #####
#Use an Adonis test to get significance of factors on holobiont physiology
library(vegan)
library(MCMC.OTU)
library(MicEco)
library(funfuns)
t0_full = read.csv("/Users/hannahaichelman/Documents/BU/TVE/PCAs/t0_full.csv")
end_full = read.csv("/Users/hannahaichelman/Documents/BU/TVE/PCAs/end_full.csv")
skel_full = read.csv("/Users/hannahaichelman/Documents/BU/TVE/SkeletonMorphometry/skel_phys_full.csv")
str(t0_full)
t0_full$sitename <- as.factor(t0_full$sitename)
t0_full$treat <- as.factor(t0_full$treat)
t0_full$lineage <- as.factor(t0_full$lineage)
str(end_full)
end_full$sitename <- as.factor(end_full$sitename)
end_full$treat <- as.factor(end_full$treat)
end_full$lineage <- as.factor(end_full$lineage)
str(skel_full)
skel_full$sitename <- as.factor(skel_full$sitename)
skel_full$treat <- as.factor(skel_full$treat)
skel_full$lineage <- as.factor(skel_full$lineage)
# add in dominant symbiont type dataframe
its2_types = read.csv("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/ITS2.dominanttype.csv") %>%
select(frag, dominant_type) %>%
mutate(dominant_type = as.factor(dominant_type))
end_full_its2 <- left_join(end_full, its2_types, by = "frag")
str(end_full_its2)
# Dont want to use log transformed data here
# but need to remove NAs
t0_full_adonis = t0_full %>%
dplyr::filter(complete.cases(.)) %>% #drop any row that has an NA for any time point
dplyr::filter(lineage != "L3") %>% # remove L3 individuals since these aren't in our PCAs
select(-corallite.avg.poly.mm2) # removing here because it is now included in the skeleton morphology pca (revision)
end_full_adonis = end_full_its2 %>%
dplyr::filter(complete.cases(.)) %>% #drop any row that has an NA for any time point
mutate(T3_T0_rgr_2 = T3_T0_rgr + 2) %>%
select(-T3_T0_rgr) %>% #get rid of the column with negative growth values before log transforming, just making sure to use the same data as we do in the PCAs
dplyr::filter(lineage != "L3") # remove L3 individuals since these aren't in our PCAs
skel_full_adonis = skel_full %>%
dplyr::filter(complete.cases(.)) %>% #drop any row that has an NA for any time point
dplyr::filter(lineage != "L3") # remove L3 individuals since these aren't in our PCAs
end_full_adonis <- end_full_adonis[, c(1,2,3,4,11,5,6,7,8,9,10,12)]
end_full_adonis_L1 = end_full_adonis %>%
filter(lineage == "L1")
end_full_adonis_L2 = end_full_adonis %>%
filter(lineage == "L2")
# Change dataframe here based on the comparison you are interested in
#nl=startedLog(data=end_full_adonis,count.columns=6:12, logstart=1)
nl=startedLog(data=t0_full_adonis,count.columns=5:10, logstart=1)
goods.dist=vegdist(nl, method="bray", na.rm = TRUE)
goods.pcoa=pcoa(goods.dist)
# PCA:
pcp=prcomp(nl, retx=TRUE, center=TRUE)
scores=goods.pcoa$vectors
summary(goods.pcoa)
#conditions=end_full_adonis[, c("frag","treat","sitename","lineage","dominant_type")] #make sure to change dataframe here
conditions=t0_full_adonis[, c("frag","treat","sitename","lineage")] #make sure to change dataframe here
# PERMANOVA
head(scores)
head(conditions)
t0_model = adonis(scores~lineage, data=conditions, method="euclidean", permutations = 10000)
adonis_OmegaSq(t0_model, partial = TRUE)
head(adonis_OmegaSq(t0_model, partial = TRUE))
t0_output = adonis_OmegaSq(t0_model, partial = TRUE)
t0_output$aov.tab
# Change dataframe here based on the comparison you are interested in
nl=startedLog(data=end_full_adonis,count.columns=6:12, logstart=1)
goods.dist=vegdist(nl, method="bray", na.rm = TRUE)
goods.pcoa=pcoa(goods.dist)
# PCA:
pcp=prcomp(nl, retx=TRUE, center=TRUE)
scores=goods.pcoa$vectors
summary(goods.pcoa)
conditions=end_full_adonis[, c("frag","treat","sitename","lineage","dominant_type")] #make sure to change dataframe here
# PERMANOVA
head(scores)
head(conditions)
end_model = adonis(scores~lineage+dominant_type+treat+sitename, data=conditions, method="euclidean", permutations = 10000)
end_model = adonis(scores~lineage+dominant_type+treat, data=conditions, method="euclidean", permutations = 10000)
end_output$aov.tab
end_output = adonis_OmegaSq(end_model, partial = TRUE)
end_output$aov.tab
# Change dataframe here based on the comparison you are interested in
#nl=startedLog(data=end_full_adonis,count.columns=6:12, logstart=1)
#nl=startedLog(data=t0_full_adonis,count.columns=5:10, logstart=1)
nl=startedLog(data=skel_full_adonis,count.columns=5:12, logstart=1)
goods.dist=vegdist(nl, method="bray", na.rm = TRUE)
goods.pcoa=pcoa(goods.dist)
# PCA:
pcp=prcomp(nl, retx=TRUE, center=TRUE)
scores=goods.pcoa$vectors
summary(goods.pcoa)
#conditions=end_full_adonis[, c("frag","treat","sitename","lineage","dominant_type")] #make sure to change dataframe here
#conditions=t0_full_adonis[, c("frag","treat","sitename","lineage")] #make sure to change dataframe here
conditions=skel_full_adonis[, c("frag","treat","sitename","lineage")] #make sure to change dataframe here
# PERMANOVA
head(scores)
head(conditions)
skel_model = adonis(scores~lineage, data=conditions, method="euclidean", permutations = 10000)
skel
skel_output = adonis_OmegaSq(skel_model, partial = TRUE)
skel_output$aov.tab
# Change dataframe here based on the comparison you are interested in
#nl=startedLog(data=end_full_adonis,count.columns=6:12, logstart=1)
nl=startedLog(data=t0_full_adonis,count.columns=5:10, logstart=1)
goods.dist=vegdist(nl, method="bray", na.rm = TRUE)
goods.pcoa=pcoa(goods.dist)
# PCA:
pcp=prcomp(nl, retx=TRUE, center=TRUE)
scores=goods.pcoa$vectors
summary(goods.pcoa)
#conditions=end_full_adonis[, c("frag","treat","sitename","lineage","dominant_type")] #make sure to change dataframe here
conditions=t0_full_adonis[, c("frag","treat","sitename","lineage")] #make sure to change dataframe here
# PERMANOVA
head(scores)
head(conditions)
t0_model = adonis(scores~lineage, data=conditions, method="euclidean", permutations = 10000)
t0_output = adonis_OmegaSq(t0_model, partial = TRUE)
t0_output$aov.tab
pairwise.adonis(t0_model, factors = conditions$lineage, permutations = 999)
pairwise.adonis(t0_model, permutations = 999)
t0_model = adonis2(scores~lineage, data=conditions, method="euclidean", permutations = 10000)
t0_output = adonis_OmegaSq(t0_model, partial = TRUE)
t0_model = adonis(scores~lineage, data=conditions, method="euclidean", permutations = 10000)
t0_output = adonis_OmegaSq(t0_model, partial = TRUE)
t0_output$aov.tab
conditions
pairwise.adonis(t0_model, factors = conditions$lineage, permutations = 999)
conditions
str(conditions)
conditions$lineage
#         Df SumsOfSqs   MeanSqs F.Model      R2 parOmegaSq Pr(>F)
# lineage    1  0.008026 0.0080262  7.6458 0.16047    0.13662  2e-04 ***
# Residuals 40  0.041990 0.0010497         0.83953
# Total     41  0.050016                   1.00000
conditions = conditins %>%
drop_levels()
#         Df SumsOfSqs   MeanSqs F.Model      R2 parOmegaSq Pr(>F)
# lineage    1  0.008026 0.0080262  7.6458 0.16047    0.13662  2e-04 ***
# Residuals 40  0.041990 0.0010497         0.83953
# Total     41  0.050016                   1.00000
conditions = conditins %>%
droplevels()
#         Df SumsOfSqs   MeanSqs F.Model      R2 parOmegaSq Pr(>F)
# lineage    1  0.008026 0.0080262  7.6458 0.16047    0.13662  2e-04 ***
# Residuals 40  0.041990 0.0010497         0.83953
# Total     41  0.050016                   1.00000
conditions = conditions %>%
droplevels()
pairwise.adonis(t0_model, factors = conditions$lineage, permutations = 999)
install.packages("EcolUtils")
t0_model = adonis2(scores~lineage, data=conditions, method="euclidean", permutations = 10000)
pairwise.adonis(t0_model, factors = conditions$lineage, permutations = 999)
conditions = conditions %>%
droplevels()
pairwise.adonis(t0_model, factors = conditions$lineage, permutations = 999)
t0_model = adonis2(scores~lineage, data=conditions, method="euclidean", permutations = 10000)
conditions = conditions %>%
droplevels()
pairwise.adonis(t0_model, factors = conditions$lineage, permutations = 999)
conditions
scores
# Change dataframe here based on the comparison you are interested in
#nl=startedLog(data=end_full_adonis,count.columns=6:12, logstart=1)
nl=startedLog(data=t0_full_adonis,count.columns=5:10, logstart=1)
goods.dist=vegdist(nl, method="bray", na.rm = TRUE)
goods.pcoa=pcoa(goods.dist)
# PCA:
pcp=prcomp(nl, retx=TRUE, center=TRUE)
scores=goods.pcoa$vectors
summary(goods.pcoa)
#conditions=end_full_adonis[, c("frag","treat","sitename","lineage","dominant_type")] #make sure to change dataframe here
conditions=t0_full_adonis[, c("frag","treat","sitename","lineage")] #make sure to change dataframe here
# PERMANOVA
head(scores)
head(conditions)
t0_model = adonis2(scores~lineage, data=conditions, method="euclidean", permutations = 10000)
pairwise.adonis(t0_model, factors = conditions$lineage, permutations = 999)
conditions
str(conditions)
conditions = conditions %>% droplevels()
str(conditions)
pairwise.adonis(t0_model, factors = conditions$lineage, permutations = 999)
t0_model = adonis2(scores~lineage, data=conditions, method="euclidean", permutations = 10000)
pairwise.adonis(t0_model, factors = conditions$lineage, permutations = 999)
#packages
#install.packages("decontam")
library(decontam)
packageVersion("decontam") #‘1.10.0’ - NK's version - 1.16.0 HA's version
library(phyloseq)
library(tidyverse)
library(ggpubr)
library(dplyr)
library(viridis)
# SymPortal ITS2 DIV Analysis
# cleaned file up to remove extraneous info in the header in excel, but original file here:
# /Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/PreStress_Timepoint/20210421_aichelman_PreStress/its2_type_profiles/154_20210426_DBV_20210427T024417.profiles.absolute.abund_and_meta.txt
setwd("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/20210421_aichelman_PreStress/its2_type_profiles")
#### PS Object Versions ####
ps.cleanest = readRDS("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/ps.its2.RDS")
seqtab <- data.frame(ps.cleanest@otu_table)
samdf <- data.frame(ps.cleanest@sam_data)
ps.cleanest.rel = readRDS("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/ps.its2.rel.RDS")
seqtab.rel <- data.frame(ps.cleanest.rel@otu_table)
samdf.rel <- data.frame(ps.cleanest.rel@sam_data)
taxa = read.csv(file = "/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/symportal_taxa.csv", header = TRUE) %>%
select(-X)
rownames(taxa) <- as.factor(taxa$DIV)
sum(taxa$genus == "B") # 2 div
sum(taxa$genus == "C") # 13 div
sum(taxa$genus == "D") # 5 div
mtaxa <- as.matrix(taxa)
#### PCoA Stats ####
library(vegan)
#remotes::install_github("Jtrachsel/funfuns")
library(funfuns)
library(dplyr)
library(edgeR)
## Raw (cleaned)
ps = readRDS("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/ps.its2.RDS")
seq.ps <- data.frame(ps@otu_table)
samdf.ps <- data.frame(ps@sam_data)
dist.ps <- vegdist(seq.ps)
# dispersion
# by treatment
bet.ps <- betadisper(dist.ps,samdf.ps$treat)
anova(bet.ps) #ns, p=0.697
# by lineage
bet.ps <- betadisper(dist.ps,samdf.ps$lineage)
anova(bet.ps) #p=0.7464
# adonis
adonis2(formula = seq.ps ~ treat + lineage, data = samdf.ps, permutations = 999)
## Relative abundance
# Report this since it is the data used for making the PCA's
ps.cleanest.rel = readRDS("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/ps.its2.rel.RDS")
# dispersion by treatment
seq.ps <- data.frame(ps.cleanest.rel@otu_table)
samdf.ps <- data.frame(ps.cleanest.rel@sam_data)
dist.ps <- vegdist(seq.ps)
bet.ps <- betadisper(dist.ps,samdf.ps$treat)
anova(bet.ps) #p=0.8568
#             Df  Sum Sq   Mean Sq F value Pr(>F)
# Groups      3 0.00413 0.0013761  0.2562 0.8568
# Residuals 152 0.81649 0.0053716
permutest(bet.ps,pairwise=TRUE,permutations=999) # all ns
# by lineage
bet.ps <- betadisper(dist.ps,samdf.ps$lineage)
anova(bet.ps) #p=0.3339
# adonis
head(adonis2(seq.ps ~ treat+lineage, data=samdf.ps, permutations=999))
adonis2(formula = seq.ps ~ treat + lineage, data = samdf.ps, permutations = 999)
pairwise.adonis(seq.ps, factors=samdf.ps$lineage, permutations=999) #no significant comparisons
##### Growth #####
# need to re-read in the data sheet for calcification only
post_phys_forcalc <- read.csv('dtvmaster.csv')
library(ggplot2)
library(lme4)
library(plotly)
library(ggridges)
library(tidyverse)
library(arsenal) #easily compare two data frames
library(Rmisc)
library(lmerTest)
library(emmeans)
library(reshape)
library(readxl)
library(wesanderson)
library(ggpubr)
library(car)
library(sjPlot)
library(effects)
library(glmmTMB)
library(performance)
library(patchwork)
library(magrittr)
library(SciViews)
#for PCAs
library(ggpubr)
library(ggfortify)
library(ggplot2)
library(cluster)
library(FactoMineR) # lots of options for pca visuals and summary stats
library(factoextra)
library(corrplot)
library(dplyr)
library(cowplot)
library(vegan)
##### Read in and format data #####
# set wd
setwd("/Users/hannahaichelman/Documents/BU/TVE")
# read in the data
post_phys <- read.csv('dtvmaster.csv') # physiology data taken at the end of the experiment
init_phys <- read.csv('initial-phys-mod.csv') # physiology data taken at the start of the experiment
##### Growth #####
# need to re-read in the data sheet for calcification only
post_phys_forcalc <- read.csv('dtvmaster.csv')
# remove unexplained outliers, and subset by only the data we need here
calc_phys = post_phys_forcalc %>%
select(frag, survivedtoend, treat, blastvol, blaster,
t2sastan1, t2sastan2, t2sastan3, t2sarec1, t2sarec2, t2sarec3,
t0sastan1, t0sastan2, t0sastan3, t0sarec1, t0sarec2, t0sarec3,
t3sastan1, t3sastan2, t3sastan3, t3sarec1, t3sarec2, t3sarec3,
pabwrec1,pabwrec2,pabwrec3,t0bwrec1, t0bwrec2,t0bwrec3,t1bwrec1, t1bwrec2,t1bwrec3,t2bwrec1, t2bwrec2,t2bwrec3,t3bwrec1, t3bwrec2,t3bwrec3) %>%
mutate(treat = as.factor(treat), blastvol = as.numeric(blastvol)) %>%
mutate_at(c(6:23), as.numeric) %>%
dplyr::filter(frag!="I2A12", frag!="I2A7", frag!="O4D8", frag!="I3E10", frag!="I3I10") %>% #these frags are being removed because they were duplicate genotypes within treatment and had the most complete information of the two
dplyr::filter(frag!="O2F1", frag!="O4G7", frag!="O2I3", frag!="O3H3", frag!="I3D8", frag!="O3F4", frag!="O3G10", frag!="O3F3", frag!="I4F8") #these frags are being removed because they were unexplainable outliers with weird weight values
#calculate surface area of the coral fragments
calc_phys$SAcm2_t0 <- (4*((calc_phys$t0sarec1+calc_phys$t0sarec2+calc_phys$t0sarec3)/3))/((calc_phys$t0sastan1+calc_phys$t0sastan2+calc_phys$t0sastan3)/3)
calc_phys$SAcm2_t2 <- (4*((calc_phys$t2sarec1+calc_phys$t2sarec2+calc_phys$t2sarec3)/3))/((calc_phys$t2sastan1+calc_phys$t2sastan2+calc_phys$t2sastan3)/3)
calc_phys$SAcm2_t3 <- (4*((calc_phys$t3sarec1+calc_phys$t3sarec2+calc_phys$t3sarec3)/3))/((calc_phys$t3sastan1+calc_phys$t3sastan2+calc_phys$t3sastan3)/3)
#add in descriptive information for coral samples
calc_phys$origsitecode <- substr(calc_phys$frag, 1, 2)
calc_phys$origsitecode <- as.factor(calc_phys$origsitecode)
# add in descriptive site name with inshore/offshore indicator
calc_phys$sitename <- ifelse(calc_phys$origsitecode == 'I2', 'SP',
ifelse(calc_phys$origsitecode == 'I3', 'CI',
ifelse(calc_phys$origsitecode == 'I4', 'PD',
ifelse(calc_phys$origsitecode == 'O2', 'BS',
ifelse(calc_phys$origsitecode == 'O3', 'CA',
'BN')))))
calc_phys$sitename <- as.factor(calc_phys$sitename)
# extract the genotype and fragment number
calc_phys$fragid <- substr(calc_phys$frag,3,5)
# add inshore/offshore designation
calc_phys$reef <- substr(calc_phys$frag,1,1)
calc_phys$reef <- ifelse(calc_phys$reef == 'O', 'Outer Reef', 'Inner Reef')
calc_phys$reef <- as.factor(calc_phys$reef)
# add in genotype
calc_phys$genet <- substr(calc_phys$fragid,1,1)
#create a new column of combined genotype that will be used as a random effect in stats later
calc_phys = calc_phys %>%
unite(gen_site, c(origsitecode,genet), sep = "", remove = FALSE) %>%
mutate(gen_site = as.factor(gen_site))
# re-level and re-name treatment
calc_phys$treat <- factor(calc_phys$treat, levels = c("init", "1", "2", "3","4","5"))
levels(calc_phys$treat) <- c("Initial","Control","Low Var","Mod Var","High Var","Control 2")
# calculate average weight at each time point
calc_phys = calc_phys %>%
mutate(paavgbw=rowMeans(.[ , c("pabwrec1","pabwrec2","pabwrec3")], na.rm=TRUE)) %>%
mutate(t0avgbw=rowMeans(.[ , c("t0bwrec1","t0bwrec2","t0bwrec3")], na.rm=TRUE)) %>%
mutate(t1avgbw=rowMeans(.[ , c("t1bwrec1","t1bwrec2","t1bwrec3")], na.rm=TRUE)) %>%
mutate(t2avgbw=rowMeans(.[ , c("t2bwrec1","t2bwrec2","t2bwrec3")], na.rm=TRUE)) %>%
mutate(t3avgbw=rowMeans(.[ , c("t3bwrec1","t3bwrec2","t3bwrec3")], na.rm=TRUE))
# calculate growth rate at the time point intervals - can't use this though because we do not have dry weights
calc_phys = calc_phys %>%
mutate(T0_PA_g_cm2_day=((t0avgbw-paavgbw)/16)/SAcm2_t0) %>%
mutate(T2_T0_g_cm2_day=((t2avgbw-t0avgbw)/57)/SAcm2_t2) %>%
mutate(T2_T1_g_cm2_day=((t2avgbw-t1avgbw)/22)/SAcm2_t2) %>%
mutate(T3_T2_g_cm_day2=((t3avgbw-t2avgbw)/32)/SAcm2_t3) %>%
mutate(T3_T0_g_cm_day2=((t3avgbw-t0avgbw)/79)/SAcm2_t3)
# calculate percent change in growth
calc_phys = calc_phys %>%
mutate(T0_PA_perc=((t0avgbw-paavgbw)/paavgbw)*100) %>%
mutate(T1_T0_perc=((t1avgbw-t0avgbw)/t0avgbw)*100) %>%
mutate(T2_T1_perc=((t2avgbw-t1avgbw)/t1avgbw)*100) %>%
mutate(T3_T2_perc=((t3avgbw-t2avgbw)/t2avgbw)*100) %>%  # this is from before to after stress
mutate(T2_T0_perc=((t2avgbw-t0avgbw)/t0avgbw)*100) %>%  # this is time 0 til before the stress
mutate(T3_T0_perc=((t3avgbw-t0avgbw)/t0avgbw)*100)      # this is time 0 til after the stress
# calculate relative growth rate (RGR)
calc_phys = calc_phys %>%
mutate(T0_PA_rgr=((ln(t0avgbw)-ln(paavgbw))/16)) %>%
mutate(T2_T0_rgr=((ln(t2avgbw)-ln(t0avgbw))/57)) %>%
mutate(T2_T1_rgr=((ln(t2avgbw)-ln(t1avgbw))/22)) %>%
mutate(T3_T2_rgr=((ln(t3avgbw)-ln(t2avgbw))/32)) %>%
mutate(T3_T0_rgr=((ln(t3avgbw)-ln(t0avgbw))/79))
# take a look at the dataset
str(calc_phys)
# un-comment the drop_na() corresponding to the time point of data you want to look at.
calc_phys2 = calc_phys %>%
#drop_na(T3_T2_perc) %>%
#drop_na(T2_T0_perc) %>%
#drop_na(T2_T0_g_cm2_day) %>%
drop_na(T2_T0_rgr) %>%
#drop_na(T3_T2_rgr) %>%
dplyr::filter(treat!="Control 2") %>%
dplyr::filter(gen_site != "I4G") # clone with I4F, remove from dataset
# merge with lineage info for later plotting
lineages = read.csv("/Users/hannahaichelman/Documents/BU/TVE/2bRAD/Analysis/tuftscustompipeline_denovo_nosyms/tve_lineages_noclones.csv")
calc_phys_all_lin <- left_join(calc_phys2, lineages, by = "gen_site")
calc_phys_all_lin$lineage = as.factor(calc_phys_all_lin$lineage)
## combine with dominant symbiont type info
# merge with its2 divs
its2_divs = read.csv("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/ITS2.dominantDIVs.csv") %>%
select(frag, dominant_div)
calc_phys_all_lin <- left_join(calc_phys_all_lin, its2_divs, by = "frag")
# merge with majority its type info
its2_types = read.csv("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/ITS2.dominanttype.csv") %>%
select(frag, dominant_type)
calc_phys_all_lin <- left_join(calc_phys_all_lin, its2_types, by = "frag")
head(calc_phys_all_lin)
calc_phys_all_lin$dominant_type = as.factor(calc_phys_all_lin$dominant_type)
calc_phys_2_lin = calc_phys_all_lin %>%
dplyr::filter(is.na(lineage) | lineage!="L3") # want to keep NA values for lineage here since they still have other info, will remove na's for lineage specific plots
# exploratory figure
#scatter plot with linear regression and confidence interval
ggplot(calc_phys, aes(treat, T2_T0_rgr, color = sitename))+
geom_point()+
geom_smooth(aes(group=sitename), method=lm)+
theme_classic()
m1 <- lmer(T2_T0_rgr ~ treat+lineage + (1|gen_site), data = calc_phys_2_lin, REML=TRUE)
summary(m1)
#specify model (because we are interested in pairwise, have to include the interaction)
m.emm<- lmer(T2_T0_rgr ~ treat*lineage + (1|gen_site), data = calc_phys_2_lin, REML=FALSE)
emms<-emmeans(m.emm, ~treat) #, adjust="Bonferoni"
pairs(emms, interaction = "pairwise") %>% rbind(adjust="fdr")
##### PAM (Fv/Fm) #####
# need to re-read in the data sheet for pam only until I can organize better
post_phys_forpam <- read.csv('dtvmaster.csv')
# analyzing separately because not sure of timing yet
pam_phys = post_phys_forpam %>%
dplyr::select(frag, survivedtoend, treat, t3sastan1, t3sastan2, t3sastan3, t3sarec1, t3sarec2, t3sarec3, blastvol, blaster,
papamrec1,papamrec2,papamrec3,t0pamrec1,t0pamrec2,t0pamrec3,t1pamrec1,t1pamrec2,t1pamrec3,t2pamrec1,t2pamrec2,t2pamrec3,t3pamrec1,t3pamrec2,t3pamrec3,
t4pamrec1,t4pamrec2,t4pamrec3,t5pamrec1,t5pamrec2,t5pamrec3,t6pamrec1,t6pamrec2,t6pamrec3,t7pamrec1,t7pamrec2,t7pamrec3,t8pamrec1,t8pamrec2,t8pamrec3,t9pamrec1,t9pamrec2,t9pamrec3) %>%
dplyr::rename(sastan1 = t3sastan1, sastan2 = t3sastan2, sastan3 = t3sastan3, sarec1 = t3sarec1, sarec2 = t3sarec2, sarec3 = t3sarec3) %>%
mutate(treat = as.factor(treat), sarec3 = as.numeric(sarec3), blastvol = as.numeric(blastvol)) %>%
dplyr::filter(frag!="I2A12", frag!="I2A7", frag!="O4D8", frag!="I3E10", frag!="I3I10") #these frags are being removed because they were duplicate genotypes within treatment and had the most complete information of the two
# add identifying data
pam_phys$origsitecode <- substr(pam_phys$frag, 1, 2)
# add in site name with inshore/offshore indicator
pam_phys$sitename <- ifelse(pam_phys$origsitecode == 'I2', 'SP',
ifelse(pam_phys$origsitecode == 'I3', 'CI',
ifelse(pam_phys$origsitecode == 'I4', 'PD',
ifelse(pam_phys$origsitecode == 'O2', 'BS',
ifelse(pam_phys$origsitecode == 'O3', 'CA',
'BN')))))
pam_phys$sitename <- as.factor(pam_phys$sitename)
# make new nubbin IDs based on the new, more informative site codes
# extract the genotype and frag number
pam_phys$fragid <- substr(pam_phys$frag,3,5)
# add inshore/offshore designation
pam_phys$reef <- substr(pam_phys$frag,1,1)
pam_phys$reef <- ifelse(pam_phys$reef == 'O', 'Outer Reef', 'Inner Reef')
pam_phys$reef <- as.factor(pam_phys$reef)
pam_phys$genet <- substr(pam_phys$fragid,1,1)
#create a new column of combined genotype and site for stats later
pam_phys = pam_phys %>%
unite(gen_site, c(origsitecode,genet), sep = "", remove = FALSE) %>%
mutate(gen_site = as.factor(gen_site))
# re-level and re-name treatment
pam_phys$treat <- factor(pam_phys$treat, levels = c("init", "1", "2", "3","4","5"))
levels(pam_phys$treat) <- c("Initial","Control","Low Var","Mod Var","High Var","Control 2")
pam_phys$treat <- as.factor(pam_phys$treat)
# calculate average PAM at each time point
pam_phys = pam_phys %>%
mutate(paavgpam=rowMeans(.[ , c("papamrec1","papamrec2","papamrec3")], na.rm=TRUE)) %>%
mutate(t0avgpam=rowMeans(.[ , c("t0pamrec1","t0pamrec2","t0pamrec3")], na.rm=TRUE)) %>%
mutate(t1avgpam=rowMeans(.[ , c("t1pamrec1","t1pamrec2","t1pamrec3")], na.rm=TRUE)) %>%
mutate(t2avgpam=rowMeans(.[ , c("t2pamrec1","t2pamrec2","t2pamrec3")], na.rm=TRUE)) %>%
mutate(t3avgpam=rowMeans(.[ , c("t3pamrec1","t3pamrec2","t3pamrec3")], na.rm=TRUE)) %>%
mutate(t4avgpam=rowMeans(.[ , c("t4pamrec1","t4pamrec2","t4pamrec3")], na.rm=TRUE)) %>%
mutate(t5avgpam=rowMeans(.[ , c("t5pamrec1","t5pamrec2","t5pamrec3")], na.rm=TRUE)) %>%
mutate(t6avgpam=rowMeans(.[ , c("t6pamrec1","t6pamrec2","t6pamrec3")], na.rm=TRUE)) %>%
mutate(t7avgpam=rowMeans(.[ , c("t7pamrec1","t7pamrec2","t7pamrec3")], na.rm=TRUE)) %>%
mutate(t8avgpam=rowMeans(.[ , c("t8pamrec1","t8pamrec2","t8pamrec3")], na.rm=TRUE)) %>%
mutate(t9avgpam=rowMeans(.[ , c("t9pamrec1","t9pamrec2","t9pamrec3")], na.rm=TRUE)) %>%
mutate(pamdiff=t9avgpam-t3avgpam)
# explore difference in PAM values from the end of recovery period to start of the heat stress ramp
str(pam_phys)
plot(x=pam_phys$sitename,y=pam_phys$pamdiff, data = pam_phys)
lm02 = aov(pamdiff ~ sitename + treat, data = pam_phys)
summary(lm02)
par(mfrow=c(2,2))
plot(lm02)
TukeyHSD(lm02)
# summarySE doesn't work with NA's, so use this!!
phys_pam_wide = pam_phys %>%
dplyr::filter(complete.cases(paavgpam,t0avgpam,t1avgpam,t2avgpam,t3avgpam,t4avgpam,t5avgpam,t6avgpam,t7avgpam,t8avgpam,t9avgpam)) %>% #drop any row that has an NA for any time point
dplyr::filter(treat!="Control 2") %>%
select(frag,treat,reef,gen_site,sitename,paavgpam,t0avgpam,t1avgpam,t2avgpam,t3avgpam,t4avgpam,t5avgpam,t6avgpam,t7avgpam,t8avgpam,t9avgpam) %>%
dplyr::filter(gen_site != "I4G") # remove clone
# transform the data to long format so time point is its own column
phys_pam_long = phys_pam_wide %>%
gather(time, pam, paavgpam:t9avgpam)
# re-level and re-name treatment
phys_pam_long$time <- as.factor(phys_pam_long$time)
levels(phys_pam_long$time) <- c("-18","0", "15","35","45","54","61","65","70","74","79")
# merge with lineage info for later plotting
lineages = read.csv("/Users/hannahaichelman/Documents/BU/TVE/2bRAD/Analysis/tuftscustompipeline_denovo_nosyms/tve_lineages_noclones.csv")
pam_phys_all_lin <- left_join(phys_pam_long, lineages, by = "gen_site")
pam_phys_all_lin$lineage = as.factor(pam_phys_all_lin$lineage)
# merge with its2 types for plotting
its2_types = read.csv("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/ITS2.dominanttype.csv") %>%
select(frag, dominant_type)
pam_phys_all_lin <- left_join(pam_phys_all_lin, its2_types, by = "frag")
pam_phys_all_lin$dominant_type = as.factor(pam_phys_all_lin$dominant_type)
# merge with its2 divs
its2_divs = read.csv("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/ITS2.dominantDIVs.csv") %>%
select(frag, dominant_div)
pam_phys_all_lin <- left_join(pam_phys_all_lin, its2_divs, by = "frag")
# filter to only include T3-T9 for plotting and stats
phys_pam_all_lin_plots = pam_phys_all_lin %>%
dplyr::filter(time != "-18" & time != "0" & time != "15" & time != "35")
phys_pam_2_lin_plots = phys_pam_all_lin_plots %>%
dplyr::filter(is.na(lineage) | lineage!="L3") # want to keep NA values for lineage here since they still have other info, will remove na's for lineage specific plots
phys_pam_lin1 = phys_pam_2_lin_plots %>%
dplyr::filter(lineage == "L1")
phys_pam_lin2 = phys_pam_2_lin_plots %>%
dplyr::filter(lineage == "L2")
# Stats
# Using the full model with interactions of all our parameters of interest
m.full <- lmer(pam ~ time*lineage*dominant_type*treat + (1|gen_site), data = phys_pam_2_lin_plots, REML=TRUE)
summary(m.full)
anova(m.full)
# check interactions
m.emm<- lmer(pam ~ time*lineage + (1|gen_site), data = phys_pam_2_lin_plots, REML=FALSE)
emms<-emmeans(m.emm, ~lineage|time) #, adjust="Bonferoni"
pairs(emms, interaction = "pairwise") %>% rbind(adjust="fdr")
m.emm2<- lmer(pam ~ time*treat + (1|gen_site), data = phys_pam_2_lin_plots, REML=FALSE)
emms2<-emmeans(m.emm2, ~treat) #, adjust="Bonferoni"
pairs(emms2, interaction = "pairwise") %>% rbind(adjust="fdr")

#scatter plot with linear regression and confidence interval
ggplot(calc_phys, aes(treat, T2_T0_rgr, color = sitename))+
geom_point()+
geom_smooth(aes(group=sitename), method=lm)+
theme_classic()
m1 <- lmer(T2_T0_rgr ~ treat+lineage + (1|gen_site), data = calc_phys_2_lin, REML=TRUE)
summary(m1)
#specify model (because we are interested in pairwise, have to include the interaction)
m.emm<- lmer(T2_T0_rgr ~ treat*lineage + (1|gen_site), data = calc_phys_2_lin, REML=FALSE)
emms<-emmeans(m.emm, ~treat) #, adjust="Bonferoni"
pairs(emms, interaction = "pairwise") %>% rbind(adjust="fdr")
##### PAM (Fv/Fm) #####
# need to re-read in the data sheet for pam only until I can organize better
post_phys_forpam <- read.csv('dtvmaster.csv')
# analyzing separately because not sure of timing yet
pam_phys = post_phys_forpam %>%
dplyr::select(frag, survivedtoend, treat, t3sastan1, t3sastan2, t3sastan3, t3sarec1, t3sarec2, t3sarec3, blastvol, blaster,
papamrec1,papamrec2,papamrec3,t0pamrec1,t0pamrec2,t0pamrec3,t1pamrec1,t1pamrec2,t1pamrec3,t2pamrec1,t2pamrec2,t2pamrec3,t3pamrec1,t3pamrec2,t3pamrec3,
t4pamrec1,t4pamrec2,t4pamrec3,t5pamrec1,t5pamrec2,t5pamrec3,t6pamrec1,t6pamrec2,t6pamrec3,t7pamrec1,t7pamrec2,t7pamrec3,t8pamrec1,t8pamrec2,t8pamrec3,t9pamrec1,t9pamrec2,t9pamrec3) %>%
dplyr::rename(sastan1 = t3sastan1, sastan2 = t3sastan2, sastan3 = t3sastan3, sarec1 = t3sarec1, sarec2 = t3sarec2, sarec3 = t3sarec3) %>%
mutate(treat = as.factor(treat), sarec3 = as.numeric(sarec3), blastvol = as.numeric(blastvol)) %>%
dplyr::filter(frag!="I2A12", frag!="I2A7", frag!="O4D8", frag!="I3E10", frag!="I3I10") #these frags are being removed because they were duplicate genotypes within treatment and had the most complete information of the two
# add identifying data
pam_phys$origsitecode <- substr(pam_phys$frag, 1, 2)
# add in site name with inshore/offshore indicator
pam_phys$sitename <- ifelse(pam_phys$origsitecode == 'I2', 'SP',
ifelse(pam_phys$origsitecode == 'I3', 'CI',
ifelse(pam_phys$origsitecode == 'I4', 'PD',
ifelse(pam_phys$origsitecode == 'O2', 'BS',
ifelse(pam_phys$origsitecode == 'O3', 'CA',
'BN')))))
pam_phys$sitename <- as.factor(pam_phys$sitename)
# make new nubbin IDs based on the new, more informative site codes
# extract the genotype and frag number
pam_phys$fragid <- substr(pam_phys$frag,3,5)
# add inshore/offshore designation
pam_phys$reef <- substr(pam_phys$frag,1,1)
pam_phys$reef <- ifelse(pam_phys$reef == 'O', 'Outer Reef', 'Inner Reef')
pam_phys$reef <- as.factor(pam_phys$reef)
pam_phys$genet <- substr(pam_phys$fragid,1,1)
#create a new column of combined genotype and site for stats later
pam_phys = pam_phys %>%
unite(gen_site, c(origsitecode,genet), sep = "", remove = FALSE) %>%
mutate(gen_site = as.factor(gen_site))
# re-level and re-name treatment
pam_phys$treat <- factor(pam_phys$treat, levels = c("init", "1", "2", "3","4","5"))
levels(pam_phys$treat) <- c("Initial","Control","Low Var","Mod Var","High Var","Control 2")
pam_phys$treat <- as.factor(pam_phys$treat)
# calculate average PAM at each time point
pam_phys = pam_phys %>%
mutate(paavgpam=rowMeans(.[ , c("papamrec1","papamrec2","papamrec3")], na.rm=TRUE)) %>%
mutate(t0avgpam=rowMeans(.[ , c("t0pamrec1","t0pamrec2","t0pamrec3")], na.rm=TRUE)) %>%
mutate(t1avgpam=rowMeans(.[ , c("t1pamrec1","t1pamrec2","t1pamrec3")], na.rm=TRUE)) %>%
mutate(t2avgpam=rowMeans(.[ , c("t2pamrec1","t2pamrec2","t2pamrec3")], na.rm=TRUE)) %>%
mutate(t3avgpam=rowMeans(.[ , c("t3pamrec1","t3pamrec2","t3pamrec3")], na.rm=TRUE)) %>%
mutate(t4avgpam=rowMeans(.[ , c("t4pamrec1","t4pamrec2","t4pamrec3")], na.rm=TRUE)) %>%
mutate(t5avgpam=rowMeans(.[ , c("t5pamrec1","t5pamrec2","t5pamrec3")], na.rm=TRUE)) %>%
mutate(t6avgpam=rowMeans(.[ , c("t6pamrec1","t6pamrec2","t6pamrec3")], na.rm=TRUE)) %>%
mutate(t7avgpam=rowMeans(.[ , c("t7pamrec1","t7pamrec2","t7pamrec3")], na.rm=TRUE)) %>%
mutate(t8avgpam=rowMeans(.[ , c("t8pamrec1","t8pamrec2","t8pamrec3")], na.rm=TRUE)) %>%
mutate(t9avgpam=rowMeans(.[ , c("t9pamrec1","t9pamrec2","t9pamrec3")], na.rm=TRUE)) %>%
mutate(pamdiff=t9avgpam-t3avgpam)
# explore difference in PAM values from the end of recovery period to start of the heat stress ramp
str(pam_phys)
plot(x=pam_phys$sitename,y=pam_phys$pamdiff, data = pam_phys)
lm02 = aov(pamdiff ~ sitename + treat, data = pam_phys)
summary(lm02)
par(mfrow=c(2,2))
plot(lm02)
TukeyHSD(lm02)
# summarySE doesn't work with NA's, so use this!!
phys_pam_wide = pam_phys %>%
dplyr::filter(complete.cases(paavgpam,t0avgpam,t1avgpam,t2avgpam,t3avgpam,t4avgpam,t5avgpam,t6avgpam,t7avgpam,t8avgpam,t9avgpam)) %>% #drop any row that has an NA for any time point
dplyr::filter(treat!="Control 2") %>%
select(frag,treat,reef,gen_site,sitename,paavgpam,t0avgpam,t1avgpam,t2avgpam,t3avgpam,t4avgpam,t5avgpam,t6avgpam,t7avgpam,t8avgpam,t9avgpam) %>%
dplyr::filter(gen_site != "I4G") # remove clone
# transform the data to long format so time point is its own column
phys_pam_long = phys_pam_wide %>%
gather(time, pam, paavgpam:t9avgpam)
# re-level and re-name treatment
phys_pam_long$time <- as.factor(phys_pam_long$time)
levels(phys_pam_long$time) <- c("-18","0", "15","35","45","54","61","65","70","74","79")
# merge with lineage info for later plotting
lineages = read.csv("/Users/hannahaichelman/Documents/BU/TVE/2bRAD/Analysis/tuftscustompipeline_denovo_nosyms/tve_lineages_noclones.csv")
pam_phys_all_lin <- left_join(phys_pam_long, lineages, by = "gen_site")
pam_phys_all_lin$lineage = as.factor(pam_phys_all_lin$lineage)
# merge with its2 types for plotting
its2_types = read.csv("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/ITS2.dominanttype.csv") %>%
select(frag, dominant_type)
pam_phys_all_lin <- left_join(pam_phys_all_lin, its2_types, by = "frag")
pam_phys_all_lin$dominant_type = as.factor(pam_phys_all_lin$dominant_type)
# merge with its2 divs
its2_divs = read.csv("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/ITS2.dominantDIVs.csv") %>%
select(frag, dominant_div)
pam_phys_all_lin <- left_join(pam_phys_all_lin, its2_divs, by = "frag")
# filter to only include T3-T9 for plotting and stats
phys_pam_all_lin_plots = pam_phys_all_lin %>%
dplyr::filter(time != "-18" & time != "0" & time != "15" & time != "35")
phys_pam_2_lin_plots = phys_pam_all_lin_plots %>%
dplyr::filter(is.na(lineage) | lineage!="L3") # want to keep NA values for lineage here since they still have other info, will remove na's for lineage specific plots
phys_pam_lin1 = phys_pam_2_lin_plots %>%
dplyr::filter(lineage == "L1")
phys_pam_lin2 = phys_pam_2_lin_plots %>%
dplyr::filter(lineage == "L2")
# Stats
# Using the full model with interactions of all our parameters of interest
m.full <- lmer(pam ~ time*lineage*dominant_type*treat + (1|gen_site), data = phys_pam_2_lin_plots, REML=TRUE)
summary(m.full)
anova(m.full)
# check interactions
m.emm<- lmer(pam ~ time*lineage + (1|gen_site), data = phys_pam_2_lin_plots, REML=FALSE)
emms<-emmeans(m.emm, ~lineage|time) #, adjust="Bonferoni"
pairs(emms, interaction = "pairwise") %>% rbind(adjust="fdr")
m.emm2<- lmer(pam ~ time*treat + (1|gen_site), data = phys_pam_2_lin_plots, REML=FALSE)
emms2<-emmeans(m.emm2, ~treat) #, adjust="Bonferoni"
pairs(emms2, interaction = "pairwise") %>% rbind(adjust="fdr")
library(ggplot2)
library(lme4)
library(plotly)
library(ggridges)
library(tidyverse)
library(arsenal) #easily compare two data frames
library(Rmisc)
library(lmerTest)
library(emmeans)
library(reshape)
library(readxl)
library(wesanderson)
library(ggpubr)
library(car)
library(sjPlot)
library(effects)
library(glmmTMB)
library(performance)
library(patchwork)
library(magrittr)
library(SciViews)
#for PCAs
library(ggpubr)
library(ggfortify)
library(ggplot2)
library(cluster)
library(FactoMineR) # lots of options for pca visuals and summary stats
library(factoextra)
library(corrplot)
library(dplyr)
library(cowplot)
library(vegan)
##### Read in and format data #####
# set wd
setwd("/Users/hannahaichelman/Documents/BU/TVE")
# read in the data
post_phys <- read.csv('dtvmaster.csv') # physiology data taken at the end of the experiment
init_phys <- read.csv('initial-phys-mod.csv') # physiology data taken at the start of the experiment
# set color palettes used throughout
cols_site <- c("CI" = "#543005", "PD"= "#bf812d",  "SP"= "#dfc27d",  "BN" = "#003c30", "BS"= "#35978f", "CA"= "#80cdc1")
cols_treat <- c("darkgrey", "#FF9966","#CC3300","#7f0000")
cols_lineage <- c("L1" = "#3f007d", "L2" = "#807dba", "L3" = "#bcbddc")
its2_cols_greens = c("C1" = "#edf8e9", "C3af" = "#238b45","C3" = "#a1d99b","D1" = "#00441b")
phys$SAcm2 <- (4*((phys$sarec1+phys$sarec2+phys$sarec3)/3))/((phys$sastan1+phys$sastan2+phys$sastan3)/3)
# check to see if surface areas look normal
# histogram of nubbin sizes
ggplot(phys, aes(x=SAcm2, color = sitename, fill = sitename))+
theme_bw()+
geom_histogram(binwidth = 1)+
scale_fill_manual(values = cols_site)+
scale_color_manual(values = cols_site)+
labs(x=expression(paste("Surface Area (cm"^2*')')))+
facet_wrap(~sitename, 6,1)
corrsa_phys <- read_excel("/Users/hannahaichelman/Documents/BU/TVE/Corallite_SA/Corallite_SA_Measurements.xlsx", sheet = "data")
head(corrsa_phys)
# remove test fragments and column of notes to look at data
corrsa_phys = corrsa_phys %>%
dplyr::filter(sample.ID != "I2A6 (test)") %>%
dplyr::filter(sample.ID != "I2A6 (test2)") %>%
select(sample.ID, std.area, corallite.avg.area, corallite.avg.poly) %>%
dplyr::rename(frag = sample.ID)
# re-name treatment
corrsa_phys$treat <- c("Initial")
# add identifying data
corrsa_phys$origsitecode <- substr(corrsa_phys$frag, 1, 2)
# add in site name with inshore/offshore indicator
corrsa_phys$sitename <- ifelse(corrsa_phys$origsitecode == 'I2', 'SP',
ifelse(corrsa_phys$origsitecode == 'I3', 'CI',
ifelse(corrsa_phys$origsitecode == 'I4', 'PD',
ifelse(corrsa_phys$origsitecode == 'O2', 'BS',
ifelse(corrsa_phys$origsitecode == 'O3', 'CA',
'BN')))))
corrsa_phys$sitename <- as.factor(corrsa_phys$sitename)
# make new nubbin IDs based on the new, more informative site codes
# add inshore/offshore designation
corrsa_phys$reef <- substr(corrsa_phys$frag,1,1)
corrsa_phys$reef <- ifelse(corrsa_phys$reef == 'O', 'Outer Reef', 'Inner Reef')
corrsa_phys$reef <- as.factor(corrsa_phys$reef)
corrsa_phys$genet <- substr(corrsa_phys$frag,3,3)
#create a new column of combined genotype and site for stats later
corrsa_phys = corrsa_phys %>%
unite(gen_site, c(origsitecode,genet), sep = "", remove = FALSE) %>%
mutate(gen_site = as.factor(gen_site)) %>%
dplyr::filter(gen_site != "I4G") # clone with I4F, remove from dataset
plot(corrsa_phys$corallite.avg.area, corrsa_phys$corallite.avg.poly, pch = 16)
abline(lm(corrsa_phys$corallite.avg.poly ~ corrsa_phys$corallite.avg.area), col = "red", lwd = 3) # add regression line
text(paste("Correlation:", round(cor(corrsa_phys$corallite.avg.area, corrsa_phys$corallite.avg.poly), 2)), x = 10000, y = 4500) # add Pearson correlation
# now need to convert between pixel # and mm^2 for the corallite.avg.poly measurement
# cross multiply to solve for unknown number of mm^2
corrsa_phys = corrsa_phys %>%
mutate(corallite.avg.poly.mm2 = ((corallite.avg.poly*400)/std.area))
# merge with lineage info for later plotting
lineages = read.csv("/Users/hannahaichelman/Documents/BU/TVE/2bRAD/Analysis/tuftscustompipeline_denovo_nosyms/tve_lineages_noclones.csv")
corrsa_phys_all_lin <- left_join(corrsa_phys, lineages, by = "gen_site")
corrsa_phys_all_lin$lineage = as.factor(corrsa_phys_all_lin$lineage)
corrsa_phys_2_lin = corrsa_phys_all_lin %>%
filter(is.na(lineage) | lineage!="L3") # want to keep NA values for lineage here since they still have other info, will remove na's for lineage specific plots
# Stats by lineage
str(corrsa_phys_2_lin)
corrsa_phys_2_lin$gen_site = as.factor(corrsa_phys_2_lin$gen_site)
#m1 <- lmer(corallite.avg.poly.mm2 ~ lineage + (1|gen_site), data = corrsa_phys_all_lin, REML=TRUE)
m1 <- lm(corallite.avg.poly.mm2 ~ lineage, data = corrsa_phys_2_lin)
summary(m1)
#SummarySE to format data for plotting site name
corrsa_means_site_all_lin <- summarySE(corrsa_phys_all_lin, measurevar="corallite.avg.poly.mm2", groupvars=c("sitename"))
corrsa_means_site_2_lin <- summarySE(corrsa_phys_2_lin, measurevar="corallite.avg.poly.mm2", groupvars=c("sitename"))
# plot, treatment x axis colored by site data figure
corrsa_plot_site <- ggplot(corrsa_means_site_2_lin,aes(x = sitename, y = corallite.avg.poly.mm2, color = sitename, pch = sitename))+
theme_bw()+
geom_point(size = 3, position = position_dodge(width=0.3))+
geom_errorbar(aes(x = sitename, ymax = corallite.avg.poly.mm2+se, ymin = corallite.avg.poly.mm2-se), width = .2, position = position_dodge(width=0.3)) +
scale_color_manual(name = "Site",
labels = c("CI","PD","SP","BN","BS","CA"),
values = cols_site)+
scale_shape_manual(name = "Site",
labels = c("CI","PD","SP","BN","BS","CA"),
values=c(19,19,19,17,17,17))+
xlab("Site Name")+
ylab(bquote("Corallite Area (mm" ^2~')'))+
#ylim(3.75,6) +
#geom_vline(xintercept = 1.5) +
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1), legend.position = "none")
corrsa_plot_site
corrsa_means_reef_2_lin <- summarySE(corrsa_phys_2_lin, measurevar="corallite.avg.poly.mm2", groupvars=c("reef"))
# plot, reef zone x axis
corrsa_plot_reef <- ggplot(corrsa_means_reef_2_lin,aes(x = reef, y = corallite.avg.poly.mm2, color = reef, pch = reef))+
theme_bw()+
geom_point(size = 3, position = position_dodge(width=0.3))+
geom_errorbar(aes(x = reef, ymax = corallite.avg.poly.mm2+se, ymin = corallite.avg.poly.mm2-se), width = .2, position = position_dodge(width=0.3)) +
scale_color_manual(name = "Reef Zone",
labels = c("Inshore","Offshore"),
values = c("red4","royalblue4"))+
scale_shape_manual(name = "Reef Zone",
labels = c("Inshore","Offshore"),
values=c(19,17))+
xlab("Reef Zone")+
ylab(bquote("Corallite Area (mm" ^2~')'))+
#ylim(3.75,6) +
#geom_vline(xintercept = 1.5) +
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
theme(legend.position = "none")
corrsa_plot_reef
corrsa_means_reef_2_lin
#SummarySE to format data for plotting with lineage
corrsa_phys_all_lin_nona = corrsa_phys_all_lin %>%
drop_na(lineage)
corrsa_phys_2_lin_nona = corrsa_phys_2_lin %>%
drop_na(lineage)
corrsa_means_all_lin <- summarySE(corrsa_phys_all_lin_nona, measurevar="corallite.avg.poly.mm2", groupvars=c("lineage"))
corrsa_means_2_lin <- summarySE(corrsa_phys_2_lin_nona, measurevar="corallite.avg.poly.mm2", groupvars=c("lineage"))
# plot, lineage x axis
corrsa_plot_lineage <- ggplot(corrsa_means_2_lin,aes(x = lineage, y = corallite.avg.poly.mm2, color = lineage, fill = lineage))+
theme_bw()+
geom_errorbar(aes(x = lineage, ymax = corallite.avg.poly.mm2+se, ymin = corallite.avg.poly.mm2-se, color = lineage), width = .2, position = position_dodge(width=0.3)) +
geom_point(size = 3, position = position_dodge(width=0.3), shape = 21, color = "black")+
scale_color_manual(name = "Lineage",
breaks = c("L1","L2"),
values = cols_lineage)+
scale_fill_manual(name = "Lineage",
breaks = c("L1","L2"),
values=cols_lineage)+
xlab("Lineage")+
ylab(bquote("Corallite Area (mm" ^2~')'))+
scale_y_continuous(limits = c(6,15), breaks = seq(6,15, by = 3))+
#geom_vline(xintercept = 1.5) +
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
theme(legend.position = "none")
corrsa_plot_lineage
corrsa_means_2_lin
# plot just CI corals to see if lineage difference holds
corrsa_phys_lineage_CI = corrsa_phys_2_lin_nona %>%
subset(sitename == "CI")
# stats for CI only
str(corrsa_phys_lineage_CI)
m2 <- lm(corallite.avg.poly.mm2 ~ lineage, data = corrsa_phys_lineage_CI)
summary(m2)
corrsa_means_lineage_CI <- summarySE(corrsa_phys_lineage_CI, measurevar="corallite.avg.poly.mm2", groupvars=c("lineage"))
corrsa_plot_lineage_CI <- ggplot(corrsa_means_lineage_CI,aes(x = lineage, y = corallite.avg.poly.mm2, color = lineage, fill = lineage))+
theme_bw()+
geom_errorbar(aes(x = lineage, ymax = corallite.avg.poly.mm2+se, ymin = corallite.avg.poly.mm2-se), width = .2, position = position_dodge(width=0.3)) +
geom_point(size = 3, position = position_dodge(width=0.3), shape = 21, color = "black")+
scale_color_manual(name = "Lineage",
breaks = c("L1","L2"),
values = cols_lineage)+
scale_fill_manual(name = "Lineage",
breaks = c("L1","L2"),
values=cols_lineage)+
xlab("Lineage")+
ylab(bquote("Corallite Area (mm" ^2~')'))+
scale_y_continuous(limits = c(6,15), breaks = seq(6,15, by = 3))+
#geom_vline(xintercept = 1.5) +
theme(panel.border = element_rect(colour = "black", fill = NA, size = 1)) +
theme(legend.position = "none")
corrsa_plot_lineage_CI
corrsa_means_lineage_CI
corrsa_means_reef_2_lin
corrsa_means_2_lin
library(ggpubr)
library(ggfortify)
library(ggplot2)
library(cluster)
library(FactoMineR) # lots of options for pca visuals and summary stats
library(factoextra)
library(corrplot)
library(dplyr)
#library(ggbiplot)
library(cowplot)
library(vegan)
# try exporting data files as csv and see what we get
t0_pca = read.csv("/Users/hannahaichelman/Documents/BU/TVE/PCAs/t0_full_log.csv")
end_pca = read.csv("/Users/hannahaichelman/Documents/BU/TVE/PCAs/end_full_log.csv")
# format t0 physiology data:
str(t0_pca)
t0_pca$sitename <- as.factor(t0_pca$sitename)
t0_pca$treat <- as.factor(t0_pca$treat)
t0_pca$lineage <- as.factor(t0_pca$lineage)
colnames(t0_pca)[colnames(t0_pca)=="hcarb_mgcm2"] <-"hcarb"
colnames(t0_pca)[colnames(t0_pca)=="scarb_mgcm2"] <-"scarb"
colnames(t0_pca)[colnames(t0_pca)=="prot_mgcm2"] <-"prot"
colnames(t0_pca)[colnames(t0_pca)=="sym_cm2"] <-"syms"
colnames(t0_pca)[colnames(t0_pca)=="avgtiss"] <-"tiss"
colnames(t0_pca)[colnames(t0_pca)=="corallite.avg.poly.mm2"] <-"corr_sa"
t0_pca_all_lin = t0_pca %>%
drop_na(lineage) %>%
select(-corr_sa) # want to remove this here because it is included in the new skeleton morphology pca incorporated during the revision
t0_pca_2_lin = t0_pca_all_lin %>%
dplyr::filter(is.na(lineage) | lineage!="L3") # want to keep NA values for lineage here since they still have other info, will remove na's for lineage specific plots
t0_pca_lineage_CI = t0_pca_2_lin %>%
dplyr::filter(sitename == "CI")
# now end of variability pca data:
str(end_pca)
end_pca$sitename <- as.factor(end_pca$sitename)
end_pca$treat <- as.factor(end_pca$treat)
end_pca$lineage <- as.factor(end_pca$lineage)
# re-level and re-name treatment
end_pca$treat <- factor(end_pca$treat, levels = c("Control","Low Var","Mod Var","High Var"))
# re-name columns for legibility on plots
colnames(end_pca)[colnames(end_pca)=="hcarb_mgcm2"] <-"hcarb"
colnames(end_pca)[colnames(end_pca)=="scarb_mgcm2"] <-"scarb"
colnames(end_pca)[colnames(end_pca)=="prot_mgcm2"] <-"prot"
colnames(end_pca)[colnames(end_pca)=="pam"] <-"fv_fm"
colnames(end_pca)[colnames(end_pca)=="sym_cm2"] <-"syms"
colnames(end_pca)[colnames(end_pca)=="T3_T0_rgr_2"] <-"growth"
# add in dominant symbiont type dataframe
its2_types = read.csv("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/ITS2.dominanttype.csv") %>%
select(frag, dominant_type)
its2_types$dominant_type = as.factor(its2_types$dominant_type)
end_pca_sym <- left_join(end_pca, its2_types, by = "frag")
str(end_pca_sym)
end_pca_all_lin = end_pca_sym %>%
drop_na(lineage) %>%
drop_na(dominant_type) %>%
#  unite(lin_sym, c(lineage,dominant_type), sep = "_", remove = FALSE) %>% # make new lineage_dominant type combined factor
#  mutate(lin_sym = as.factor(lin_sym)) %>%
select(frag, treat, sitename, lineage, dominant_type, hcarb, scarb, prot, fv_fm, syms, chlA, growth)
end_pca_2_lin = end_pca_all_lin %>%
dplyr::filter(lineage!="L3")
end_pca_lineage_CI = end_pca_2_lin %>%
dplyr::filter(sitename == "CI")
###
# this part of the code uses the PCA function and stats from the FactoMineR package
# T0 both lineage df's
facto_t0_all_lin <- PCA(t0_pca_all_lin[,5:10], scale.unit = TRUE, ncp = 10, graph = TRUE)
facto_t0_2_lin <- PCA(t0_pca_2_lin[,5:10], scale.unit = TRUE, ncp = 10, graph = TRUE)
pca_t0_site <- fviz_pca_biplot(facto_t0_2_lin,
label = "var",
col.var = "black", labelsize = 4,
alpha.ind = 0) + # makes individs transparent so they can be overwritten by geom_point()
theme_bw()+
geom_point(aes(colour=t0_pca_2_lin$sitename), size = 2, stroke = 1) +
scale_color_manual(values = cols_site,
#breaks=c("CI","I-Punta Donato","I-STRI Point","O-Bastimentos N","O-Bastimentos S","O-Cayo de Agua"),
labels=c("CI","PD","SP","BN","BS","CA"),
name = "Site") +
#  stat_ellipse(geom = "polygon", type = "t", alpha = 0.2,
#               aes(fill= t0_pca_lineage$sitename), show.legend = FALSE) + scale_fill_manual(values=cols_site) + # ellipses assumes multivariate distribution using default confidence level (0.95)
stat_ellipse(aes(color=t0_pca_2_lin$sitename), type = "t", lwd = 1)+
labs(x = "PC1 (53.8% explained variance)",
y = "PC2 (15.4% explained variance)") +
theme(plot.title = element_blank(),
axis.title = element_text(face = "bold"),
legend.title.align =  0.5, legend.text.align = 0,
legend.title = element_text(face = "bold"))
pca_t0_site
##### PCA Adonis Tests #####
#Use an Adonis test to get significance of factors on holobiont physiology
library(vegan)
library(MCMC.OTU)
library(MicEco)
library(funfuns)
t0_full = read.csv("/Users/hannahaichelman/Documents/BU/TVE/PCAs/t0_full.csv")
end_full = read.csv("/Users/hannahaichelman/Documents/BU/TVE/PCAs/end_full.csv")
skel_full = read.csv("/Users/hannahaichelman/Documents/BU/TVE/SkeletonMorphometry/skel_phys_full.csv")
str(t0_full)
t0_full$sitename <- as.factor(t0_full$sitename)
t0_full$treat <- as.factor(t0_full$treat)
t0_full$lineage <- as.factor(t0_full$lineage)
str(end_full)
end_full$sitename <- as.factor(end_full$sitename)
end_full$treat <- as.factor(end_full$treat)
end_full$lineage <- as.factor(end_full$lineage)
str(skel_full)
skel_full$sitename <- as.factor(skel_full$sitename)
skel_full$treat <- as.factor(skel_full$treat)
skel_full$lineage <- as.factor(skel_full$lineage)
# add in dominant symbiont type dataframe
its2_types = read.csv("/Users/hannahaichelman/Documents/BU/TVE/16S_ITS2/ITS_PreStress_Timepoint/ITS2.dominanttype.csv") %>%
select(frag, dominant_type) %>%
mutate(dominant_type = as.factor(dominant_type))
end_full_its2 <- left_join(end_full, its2_types, by = "frag")
str(end_full_its2)
# Dont want to use log transformed data here
# but need to remove NAs
t0_full_adonis = t0_full %>%
dplyr::filter(complete.cases(.)) %>% #drop any row that has an NA for any time point
dplyr::filter(lineage != "L3") %>% # remove L3 individuals since these aren't in our PCAs
select(-corallite.avg.poly.mm2) # removing here because it is now included in the skeleton morphology pca (revision)
end_full_adonis = end_full_its2 %>%
dplyr::filter(complete.cases(.)) %>% #drop any row that has an NA for any time point
mutate(T3_T0_rgr_2 = T3_T0_rgr + 2) %>%
select(-T3_T0_rgr) %>% #get rid of the column with negative growth values before log transforming, just making sure to use the same data as we do in the PCAs
dplyr::filter(lineage != "L3") # remove L3 individuals since these aren't in our PCAs
skel_full_adonis = skel_full %>%
dplyr::filter(complete.cases(.)) %>% #drop any row that has an NA for any time point
dplyr::filter(lineage != "L3") # remove L3 individuals since these aren't in our PCAs
end_full_adonis <- end_full_adonis[, c(1,2,3,4,11,5,6,7,8,9,10,12)]
end_full_adonis_L1 = end_full_adonis %>%
filter(lineage == "L1")
end_full_adonis_L2 = end_full_adonis %>%
filter(lineage == "L2")
# Change dataframe here based on the comparison you are interested in
#nl=startedLog(data=end_full_adonis,count.columns=6:12, logstart=1)
nl=startedLog(data=t0_full_adonis,count.columns=5:10, logstart=1)
goods.dist=vegdist(nl, method="bray", na.rm = TRUE)
goods.pcoa=pcoa(goods.dist)
# PCA:
pcp=prcomp(nl, retx=TRUE, center=TRUE)
scores=goods.pcoa$vectors
summary(goods.pcoa)
#conditions=end_full_adonis[, c("frag","treat","sitename","lineage","dominant_type")] #make sure to change dataframe here
conditions=t0_full_adonis[, c("frag","treat","sitename","lineage")] #make sure to change dataframe here
# PERMANOVA
head(scores)
head(conditions)
t0_model = adonis(scores~lineage, data=conditions, method="euclidean", permutations = 10000)
t0_output = adonis_OmegaSq(t0_model, partial = TRUE)
t0_output$aov.tab
# Change dataframe here based on the comparison you are interested in
nl=startedLog(data=end_full_adonis,count.columns=6:12, logstart=1)
goods.dist=vegdist(nl, method="bray", na.rm = TRUE)
goods.pcoa=pcoa(goods.dist)
# PCA:
pcp=prcomp(nl, retx=TRUE, center=TRUE)
scores=goods.pcoa$vectors
summary(goods.pcoa)
conditions=end_full_adonis[, c("frag","treat","sitename","lineage","dominant_type")] #make sure to change dataframe here
# PERMANOVA
head(scores)
head(conditions)
end_model = adonis(scores~lineage+dominant_type+treat, data=conditions, method="euclidean", permutations = 10000)
install_github("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")
library(devtools)
install_github("pmartinezarbizu/pairwiseAdonis/pairwiseAdonis")
library(pairwiseAdonis)
pairwise.adonis(end_output)
pairwise.adonis(end_output, factors = treat)
pairwise.adonis(end_model, factors = treat)
pairwise.adonis(end_model, factors = conditions$treat)
iris
head(iris)
data("iris")
pairwise.adonis(scores, conditions$treat)
pairwise.adonis(scores, conditions$lineage)
scores
View(scores)
install.packages("EcolUtils")
# Change dataframe here based on the comparison you are interested in
nl=startedLog(data=end_full_adonis,count.columns=6:12, logstart=1)
goods.dist=vegdist(nl, method="bray", na.rm = TRUE)
goods.pcoa=pcoa(goods.dist)
# PCA:
pcp=prcomp(nl, retx=TRUE, center=TRUE)
scores=goods.pcoa$vectors
summary(goods.pcoa)
conditions=end_full_adonis[, c("frag","treat","sitename","lineage","dominant_type")] #make sure to change dataframe here
# PERMANOVA
head(scores)
head(conditions)
end_model = adonis(scores~lineage+dominant_type+treat, data=conditions, method="euclidean", permutations = 10000)
end_output = adonis_OmegaSq(end_model, partial = TRUE)
end_output$aov.tab
pairwise.adonis(scores, conditions$treat)
head(end_full_adonis)
pairwise.adonis(end_full_adonis[,6:12], end_full_adonis$treat)
pairwise.adonis(end_full_adonis[,6:12], end_full_adonis$lineage)

mutate(Temp = Temp + 0.686064) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-12 00:00:00" & DateTime > "2016-09-07 00:00:00") %>%
mutate(Treatment = "Control")
Tank1.1_var <- Tank1.1 %>%
mutate(Temp = Temp + 0.686064) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-11-10 18:00:00" & DateTime > "2016-09-22 00:00:00") %>%
mutate(Treatment = "Control")
Tank1.1_stress <- Tank1.1 %>%
mutate(Temp = Temp + 0.686064) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-10 18:00:00") %>%
mutate(Treatment = "Control")
Tank2.1_all <- Tank2.1 %>%
mutate(Temp = Temp + 0.724092) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-12 00:00:00" & DateTime > "2016-09-07 00:00:00") %>%
mutate(Treatment = "Low Var")
Tank2.1_var <- Tank2.1 %>%
mutate(Temp = Temp + 0.724092) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-11-10 18:00:00" & DateTime > "2016-09-22 00:00:00") %>%
mutate(Treatment = "Low Var")
Tank2.1_stress <- Tank2.1 %>%
mutate(Temp = Temp + 0.724092) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-10 18:00:00") %>%
mutate(Treatment = "Low Var")
# Tank 3 doesn't record until the end of the experiment
Tank3.1_all <- Tank3.1 %>%
mutate(Temp = Temp + 0.7730094) %>% # treatment-specific correction
dplyr::filter(DateTime > "2016-09-07 00:00:00") %>%
mutate(Treatment = "Mod Var")
Tank3.1_var <- Tank3.1 %>%
mutate(Temp = Temp + 0.7730094) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-11-10 18:00:00" & DateTime > "2016-09-22 00:00:00") %>%
mutate(Treatment = "Mod Var")
Tank3.1_stress <- Tank3.1 %>%
mutate(Temp = Temp + 0.7730094) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-10 18:00:00") %>%
mutate(Treatment = "Mod Var")
Tank4.2_all <- Tank4.2 %>%
mutate(Temp = Temp + 0.7088613) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-12 00:00:00" & DateTime > "2016-09-07 00:00:00") %>%
mutate(Treatment = "High Var")
Tank4.2_var <- Tank4.2 %>%
mutate(Temp = Temp + 0.7088613) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-11-10 18:00:00" & DateTime > "2016-09-22 00:00:00") %>%
mutate(Treatment = "High Var")
Tank4.2_stress <- Tank4.2 %>%
mutate(Temp = Temp + 0.7088613) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-10 18:00:00") %>%
mutate(Treatment = "High Var")
# Tank 5 = Control 2, not using this treatment so no treatment-specific correction for Tank5's
Tank5.3_all <- Tank5.3 %>%
dplyr::filter(DateTime < "2016-12-12 00:00:00" & DateTime > "2016-09-07 00:00:00") %>%
mutate(Treatment = "control 2")
Tank5.3_var <- Tank5.3 %>%
dplyr::filter(DateTime < "2016-11-10 18:00:00" & DateTime > "2016-09-22 00:00:00") %>%
mutate(Treatment = "control 2")
Tank5.3_stress <- Tank5.3 %>%
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-10 18:00:00") %>%
mutate(Treatment = "control 2")
#### Statistically compare hobo logger data ####
# combine all variability data into one dataframe, exclude control 2 for now
all.hobo.data <- rbind(Tank1.1_var, Tank2.1_var, Tank3.1_var, Tank4.2_var)
library(car)
# Levene test used to test if samples have equal variance
leveneTest(Temp~Treatment, data = all.hobo.data)
#### Statistically compare hobo logger data ####
# combine all variability data into one dataframe, exclude control 2 for now
all.hobo.data <- rbind(Tank1.1_var, Tank2.1_var, Tank3.1_var, Tank4.2_var)
library(car)
# Levene test used to test if samples have equal variance
leveneTest(Temp~Treatment, data = all.hobo.data)
# now try https://stackoverflow.com/questions/43646987/multiple-comparison-post-hoc-test-for-levenes-test
# first calculate the median by treatment and add as a column
all.hobo.data <- all.hobo.data %>%
group_by(Treatment) %>%
mutate(temp.med = ifelse(Temp, median(Temp, na.rm=TRUE), ifelse(Temp==NA, NA)))
all.hobo.data
str(https://zoom.us/j/94722360016?pwd=TjJwcUtRbWk0RVZzQkVpd1hwOXE4dz09)
str(all.hobo.data)
head(Tank1.1_var)
View(all.hobo.data)
p1 = Tank1.1_all %>%
ggplot(aes(x = DateTime_ct, y = Temp))+
geom_line(color = 'darkgrey', lwd=1)+
ylim(26,34) +
geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
ggtitle("Control") +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-07 00:00:00", "2016-09-22 00:00:00","2016-11-10 18:00:00","2016-11-14 00:00:00","2016-11-21 00:00:00","2016-12-11 23:55:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-07 00:00:00", "2016-12-11 23:55:00")))+
theme_classic() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
p1
p1_var = Tank1.1_var %>%
ggplot(aes(x = DateTime_ct, y = Temp))+
geom_line(color = 'darkgrey', lwd=1)+
ylim(26,34) +
geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
ggtitle("Control") +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-22 00:00:00","2016-11-10 18:00:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-22 00:00:00", "2016-11-10 18:00:00")))+
theme_classic() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
p1_var
p2 = Tank2.1_all %>%
ggplot(aes(x = DateTime_ct, y = Temp))+
geom_line(color = '#FF9966', lwd=1)+
ylim(26,34) +
geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
ggtitle("Low Variability") +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-07 00:00:00", "2016-09-22 00:00:00","2016-11-10 18:00:00","2016-11-14 00:00:00","2016-11-21 00:00:00","2016-12-11 23:55:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-07 00:00:00", "2016-12-11 23:55:00")))+
theme_classic() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
p2
p2_var = Tank2.1_var %>%
ggplot(aes(x = DateTime_ct, y = Temp))+
geom_line(color = '#FF9966', lwd=1)+
ylim(26,34) +
geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
ggtitle("Low Variability") +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-22 00:00:00","2016-11-10 18:00:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-22 00:00:00", "2016-11-10 18:00:00")))+
theme_classic() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
p2_var
p3 = Tank3.1_all %>%
ggplot(aes(x = DateTime_ct, y = Temp))+
geom_line(color = '#CC3300', lwd=1)+
ylim(26,34) +
geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
ggtitle("Moderate Variability") +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-07 00:00:00", "2016-09-22 00:00:00","2016-11-10 18:00:00","2016-11-14 00:00:00","2016-11-21 00:00:00","2016-12-11 23:55:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-07 00:00:00", "2016-12-11 23:55:00")))+
theme_classic() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
p3
p3_var = Tank3.1_var %>%
ggplot(aes(x = DateTime_ct, y = Temp))+
geom_line(color = '#CC3300', lwd=1)+
ylim(26,34) +
geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
ggtitle("Moderate Variability") +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-22 00:00:00","2016-11-10 18:00:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-22 00:00:00", "2016-11-10 18:00:00")))+
theme_classic() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
p3_var
p4 = Tank4.2_all %>%
ggplot(aes(x = DateTime_ct, y = Temp))+
geom_line(color = '#7f0000', lwd=1)+
ylim(26,34) +
geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
ggtitle("High Variability") +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-07 00:00:00", "2016-09-22 00:00:00","2016-11-10 18:00:00","2016-11-14 00:00:00","2016-11-21 00:00:00","2016-12-11 23:55:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-07 00:00:00", "2016-12-11 23:55:00")))+
theme_classic() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
p4
p4_var = Tank4.2_var %>%
ggplot(aes(x = DateTime_ct, y = Temp))+
geom_line(color = '#7f0000', lwd=1)+
ylim(26,34) +
geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
ggtitle("High Variability") +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-22 00:00:00","2016-11-10 18:00:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-22 00:00:00", "2016-11-10 18:00:00")))+
theme_classic() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
p4_var
p5 = Tank5.3 %>%
ggplot(aes(x = DateTime_ct, y = Temp))+
geom_line(color = 'blue', lwd=1)+
ylim(26,34) +
geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
ggtitle("Control 2") +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-07 00:00:00", "2016-09-22 00:00:00","2016-11-10 18:00:00","2016-11-14 00:00:00","2016-11-21 00:00:00","2016-12-11 23:55:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-07 00:00:00", "2016-12-11 23:55:00")))+
theme_classic() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
p5
p5_var = Tank5.3_var %>%
ggplot(aes(x = DateTime_ct, y = Temp))+
geom_line(color = 'blue', lwd=1)+
ylim(26,34) +
geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
ggtitle("Control 2") +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-22 00:00:00","2016-11-10 18:00:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-22 00:00:00", "2016-11-10 18:00:00")))+
theme_classic() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
p5_var
# ignore control 2, all data
hobo_plot <- grid.arrange(p1, p2, p3, p4, nrow = 2)
#### Combine all hobo variability objects to plot ####
# with re-analysis, only including control and moderate variability treatments
all_temp = rbind(Tank1.1_all, Tank3.1_all)
head(all_temp)
str(all_temp)
all_temp$Treatment = factor(all_temp$Treatment, levels = c("Control","Mod Var"))
all_var = rbind(Tank1.1_var, Tank3.1_var)
head(all_var)
str(all_var)
all_var$Treatment = factor(all_var$Treatment, levels = c("Control","Mod Var"))
all_stress = rbind(Tank1.1_stress, Tank3.1_stress)
head(all_stress)
str(all_stress)
all_stress$Treatment = factor(all_stress$Treatment, levels = c("Control","Mod Var"))
cols_treat_reds <- c("Control" = "darkgrey", "Mod Var"="#CC3300")
# plot the variability period
str(all_var)
all_var$Treatment = factor(all_var$Treatment, levels = c("Mod Var", "Control"))
all_var.plot = all_var %>%
ggplot(aes(x = DateTime_ct, y = Temp, color = Treatment))+
geom_line(aes(color = Treatment), lwd=1, alpha = 0.8)+
scale_color_manual(values = cols_treat_reds)+
ylim(26,34) +
geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
#ggtitle("Control 2") +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-22 00:00:00","2016-11-10 18:00:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-22 00:00:00", "2016-11-10 18:00:00")))+
theme_bw() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
all_var.plot
ggsave(all_var.plot,file="/Users/hannahaichelman/Dropbox/BU/TVE/TemperatureData/TankTemps/Tank_Hobo_Loggers/plots/TankTempHobo_Lines_Combined.pdf", width=8, height=4, units=c("in"), useDingbats=FALSE)
# plot the whole time course - figure 1C
all_temp$Treatment = factor(all_temp$Treatment, levels = c("Mod Var", "Control"))
all_temp.plot = all_temp %>%
ggplot(aes(x = DateTime_ct, y = Temp, color = Treatment))+
annotate("rect", xmin = as.POSIXct("2016-09-07 00:00:00"), xmax = as.POSIXct("2016-09-22 00:00:00"), ymin = - Inf, ymax = Inf, fill = "gray", alpha = 0.3)+
annotate("rect", xmin = as.POSIXct("2016-09-22 00:00:00"), xmax = as.POSIXct("2016-11-10 18:00:00"), ymin = - Inf, ymax = Inf, fill = "orange", alpha = 0.15)+
annotate("rect", xmin = as.POSIXct("2016-11-10 18:00:00"), xmax = as.POSIXct("2016-11-25 00:00:00"), ymin = - Inf, ymax = Inf, fill = "red4", alpha = 0.15)+
annotate("rect", xmin = as.POSIXct("2016-11-25 00:00:00"), xmax = as.POSIXct("2016-12-11 23:55:00"), ymin = - Inf, ymax = Inf, fill = "royalblue4", alpha = 0.15)+
geom_line(aes(color = Treatment), lwd=0.75)+
scale_color_manual(values = cols_treat_reds)+
#geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=.5) +
xlab("Day") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-07 00:00:00", "2016-09-22 00:00:00","2016-11-10 18:00:00","2016-11-14 00:00:00","2016-11-21 00:00:00","2016-11-25 00:00:00", "2016-12-11 23:55:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-07 00:00:00", "2016-12-11 23:55:00")))+
scale_y_continuous(name = "Temperature (°C)", breaks = seq(26,33,1))+
theme_bw()+
#theme(axis.text.x = element_blank())
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
all_temp.plot
ggsave(all_temp.plot,file="/Users/hannahaichelman/Dropbox/BU/TVE/TemperatureData/TankTemps/Tank_Hobo_Loggers/plots/TankTempHobo_NewTreats_Combined.pdf", width=10, height=4, units=c("in"), useDingbats=FALSE)
# plot a subset of days to zoom in and illustrate what the profiles looked like
all_temp.plot.subset = all_temp %>%
subset(DateTime_ct > "2016-10-30" & DateTime_ct <= "2016-11-02") %>%
ggplot(aes(x = DateTime_ct, y = Temp, color = Treatment))+
annotate("rect", xmin = as.POSIXct(-Inf), xmax = as.POSIXct(Inf), ymin = - Inf, ymax = Inf, fill = "orange", alpha = 0.15)+
geom_line(aes(color = Treatment), lwd=1, alpha = 1)+
scale_color_manual(values = cols_treat_reds)+
scale_y_continuous(name = "Temperature (°C)", breaks = seq(26,33,1))+
xlab("Day") +
theme_bw() +
theme(axis.text.x = element_blank())
#theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
all_temp.plot.subset
ggsave(all_temp.plot.subset,file="/Users/hannahaichelman/Dropbox/BU/TVE/TemperatureData/TankTemps/Tank_Hobo_Loggers/plots/TankTempHobo_Subset_NewTreats_Combined.pdf", width=5, height=4, units=c("in"), useDingbats=FALSE)
# plot all stress + recovery periods
all_stress.plot = all_stress %>%
ggplot(aes(x = DateTime_ct, y = Temp, color = Treatment))+
geom_line(aes(color = Treatment), lwd=1, alpha = 0.8)+
scale_color_manual(values = cols_treat_reds)+
#geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-11-10 18:05:00","2016-11-14", "2016-11-21","2016-11-25", "2016-12-11 23:55:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-11-10 18:05:00","2016-12-11 23:55:00")))+
scale_y_continuous(name = "Temperature (°C)", breaks = seq(26,33,1))+
theme_bw() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
all_stress.plot
ggsave(all_stress.plot,file="/Users/hannahaichelman/Dropbox/BU/TVE/TemperatureData/TankTemps/Tank_Hobo_Loggers/plots/TankTempHobo_Lines_Combined_stress+recovery.pdf", width=8, height=4, units=c("in"), useDingbats=FALSE)
# Find overall mean during heat challenge and recovery periods:
library(plotrix)
all_stress_2 = all_stress %>%
dplyr::filter(DateTime < "2016-11-21 00:00:00" & DateTime > "2016-11-14 00:00:00") %>%# to look at just stress
#dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-25 00:00:00") %>%# to look at just recovery
summarise_at(vars(Temp), list(mean_temp = mean, sd_temp = sd, se_temp = std.error), na.rm=TRUE)
all_stress_2
Tank1.1_var.nona = Tank1.1_var %>%
drop_na(Temp)
Tank1.1_var.dailystats<-data.frame("DayRange"=tapply(Tank1.1_var.nona$Temp, Tank1.1_var.nona$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(Tank1.1_var.nona$Temp, Tank1.1_var.nona$Day, min),"DayMax"=tapply(Tank1.1_var.nona$Temp, Tank1.1_var.nona$Day, max), "DayMean"=tapply(Tank1.1_var.nona$Temp, Tank1.1_var.nona$Day, mean))
Tank1.1_var.dailystats <- tibble::rownames_to_column(Tank1.1_var.dailystats, "date")
Tank1.1_var.dailystats$treat <- "Control 1"
head(Tank1.1_var.dailystats)
Tank2.1_var.nona = Tank2.1_var %>%
drop_na(Temp)
Tank2.1_var.dailystats<-data.frame("DayRange"=tapply(Tank2.1_var.nona$Temp, Tank2.1_var.nona$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(Tank2.1_var.nona$Temp, Tank2.1_var.nona$Day, min),"DayMax"=tapply(Tank2.1_var.nona$Temp, Tank2.1_var.nona$Day, max), "DayMean"=tapply(Tank2.1_var.nona$Temp, Tank2.1_var.nona$Day, mean))
Tank2.1_var.dailystats <- tibble::rownames_to_column(Tank2.1_var.dailystats, "date")
Tank2.1_var.dailystats$treat <- "Low Var"
head(Tank2.1_var.dailystats)
Tank3.1_var.nona = Tank3.1_var %>%
drop_na(Temp)
Tank3.1_var.dailystats<-data.frame("DayRange"=tapply(Tank3.1_var.nona$Temp, Tank3.1_var.nona$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(Tank3.1_var.nona$Temp, Tank3.1_var.nona$Day, min),"DayMax"=tapply(Tank3.1_var.nona$Temp, Tank3.1_var.nona$Day, max), "DayMean"=tapply(Tank3.1_var.nona$Temp, Tank3.1_var.nona$Day, mean))
Tank3.1_var.dailystats <- tibble::rownames_to_column(Tank3.1_var.dailystats, "date")
Tank3.1_var.dailystats$treat <- "Mod Var"
head(Tank3.1_var.dailystats)
Tank4.2_var.nona = Tank4.2_var %>%
drop_na(Temp)
Tank4.2_var.dailystats<-data.frame("DayRange"=tapply(Tank4.2_var.nona$Temp, Tank4.2_var.nona$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(Tank4.2_var.nona$Temp, Tank4.2_var.nona$Day, min),"DayMax"=tapply(Tank4.2_var.nona$Temp, Tank4.2_var.nona$Day, max), "DayMean"=tapply(Tank4.2_var.nona$Temp, Tank4.2_var.nona$Day, mean))
Tank4.2_var.dailystats <- tibble::rownames_to_column(Tank4.2_var.dailystats, "date")
Tank4.2_var.dailystats$treat <- "High Var"
head(Tank4.2_var.dailystats)
# combine daily variability stats for all loggers
library(Rmisc)
var.dailystats.all = rbind(Tank1.1_var.dailystats,Tank3.1_var.dailystats)
str(var.dailystats.all)
var.dailystats.all$treat = factor(var.dailystats.all$treat, levels = c("Control 1","Mod Var"))
summarySE(data = var.dailystats.all, measurevar = "DayRange", groupvar = "treat")
summarySE(data = var.dailystats.all, measurevar = "DayMean", groupvar = "treat")
summarySE(data = var.dailystats.all, measurevar = "DayMax", groupvar = "treat")
summarySE(data = var.dailystats.all, measurevar = "DayMin", groupvar = "treat")
#### HOBO DAILY STATS & PLOTS####
library(effectsize)
options(es.use_symbols = TRUE) # get nice symbols when printing!
# daily range
aov.dtv=aov(DayRange~treat, data=var.dailystats.all)
summary(aov.dtv)
#             Df Sum Sq Mean Sq F value Pr(>F)
# treat        1 150.42  150.42    2823 <2e-16 ***
# Residuals   98   5.22    0.05
eta_squared(aov.dtv, partial = FALSE)
# daily mean
aov.mean=aov(DayMean~treat, data=var.dailystats.all)
summary(aov.mean)
eta_squared(aov.mean, partial = FALSE)
#cols_treat_reds <- c("darkgrey", "#FF9966","#CC3300","#7f0000")
cols_treat_reds <- c("darkgrey","#CC3300")
# plot boxplots of  treatments - supplemental fig
tempPlot.dtv <- ggplot(var.dailystats.all, aes(x = treat, y = DayRange)) +
geom_jitter(shape=16,
position=position_jitter(0.2),
alpha=0.99,
aes(color = treat)) +
scale_color_manual(values = cols_treat_reds) + # for jittered points
geom_boxplot(outlier.shape = NA,
alpha = 0.7,
aes(fill = treat))+
scale_fill_manual(values = cols_treat_reds) + # for boxplot
#xlab("Treatment")+
ylab("Temperature (°C)")+
#ylim(27,32)+
theme_bw()+
theme(axis.title.x = element_blank(), axis.text.x = element_blank(), legend.position = "none")+
ggtitle("A. Daily Variability")
tempPlot.dtv
tempPlot.mean <- ggplot(var.dailystats.all, aes(x = treat, y = DayMean)) +
geom_jitter(shape=16,
position=position_jitter(0.2),
alpha=0.99,
aes(color = treat)) +
scale_color_manual(values = cols_treat_reds) + # for jittered points
geom_boxplot(outlier.shape = NA,
alpha = 0.7,
aes(fill = treat))+
scale_fill_manual(values = cols_treat_reds) + # for boxplot
xlab("Treatment")+
ylab("Temperature (°C)")+
#ylim(27,32)+
theme(legend.position = "none")+
theme_bw()+
theme(axis.title.x = element_blank(), axis.text.x = element_blank(), legend.position = "none")+
ggtitle("B. Daily Mean")
tempPlot.mean
tempPlot.max <- ggplot(var.dailystats.all, aes(x = treat, y = DayMax)) +
geom_jitter(shape=16,
position=position_jitter(0.2),
alpha=0.99,
aes(color = treat)) +
scale_color_manual(values = cols_treat_reds) + # for jittered points
geom_boxplot(outlier.shape = NA,
alpha = 0.7,
aes(fill = treat))+
scale_fill_manual(values = cols_treat_reds) + # for boxplot
xlab("Treatment")+
ylab("Temperature (°C)")+
#ylim(27,32)+
theme_bw()+
theme(legend.position = "none")+
ggtitle("C. Daily Maximum")
tempPlot.max
tempPlot.min <- ggplot(var.dailystats.all, aes(x = treat, y = DayMin)) +
geom_jitter(shape=16,
position=position_jitter(0.2),
alpha=0.99,
aes(color = treat)) +
scale_color_manual(values = cols_treat_reds) + # for jittered points
geom_boxplot(outlier.shape = NA,
alpha = 0.7,
aes(fill = treat))+
scale_fill_manual(values = cols_treat_reds) + # for boxplot
xlab("Treatment")+
ylab("Temperature (°C)")+
#ylim(27,32)+
theme_bw()+
theme(legend.position = "none")+
ggtitle("D. Daily Minimum")
tempPlot.min
all.temp.plots = ggarrange(tempPlot.dtv,tempPlot.mean,tempPlot.max,tempPlot.min,
ncol = 2, nrow = 2)
all.temp.plots
# daily range
aov.dtv=aov(DayRange~treat, data=var.dailystats.all)
summary(aov.dtv)
#             Df Sum Sq Mean Sq F value Pr(>F)
# treat        1 150.42  150.42    2823 <2e-16 ***
# Residuals   98   5.22    0.05
eta_squared(aov.dtv, partial = FALSE)
var.dailystats.all
# daily range
var.dailystats.control = var.dailystats.all %>%
select(treat=="Control 1")
# daily range
var.dailystats.control = var.dailystats.all %>%
dplyr::select(treat=="Control 1")
str(var.dailystats.all)
# daily range
var.dailystats.control = var.dailystats.all %>%
dplyr::select(treat=="Control 1")
# daily range
var.dailystats.control = var.dailystats.all %>%
dplyr::filter(treat=="Control 1")
var.dailystats.mod = var.dailystats.all %>%
dplyr::filter(treat=="Mod Var")
var.dailystats.control
var.dailystats.mod
ttest.dtv = t.test(var.dailystats.control$DayRange, var.dailystats.mod$DayRange, paired=TRUE)
ttest.dtv
t.test(var.dailystats.control$DayRange, var.dailystats.mod$DayRange, paired=TRUE)
t.test(var.dailystats.control$DayMean, var.dailystats.mod$DayMean, paired=TRUE)
t.test(var.dailystats.control$DayRange, var.dailystats.mod$DayRange, paired=FALSE)
t.test(var.dailystats.control$DayMean, var.dailystats.mod$DayMean, paired=FALSE)
setwd("/Users/hannahaichelman/Documents/BU/TVE/2bRAD/Analysis/")
setwd("/Users/hannahaichelman/Dropbox/BU/TVE/2bRAD/Analysis/")
bams=data.frame(read.table("tuftscustompipeline_denovo_nosyms/bams.txt", header=FALSE)) # list of bam files
colnames(bams)<- "bam"
# loading individual to population correspondences
i2p=read.table("bam_barcode_names_tuftscustom.csv",sep=",",header=TRUE) # 2-column tab-delimited table of individual assignments to populations; must be in the same order as samples in the bam list or vcf file.
row.names(i2p)=i2p[,1]
#i2p=i2p[goods,]
site=i2p[,2]
# add in site name
i2p$sitename <- ifelse(i2p$pop == 'I2', 'SP',
ifelse(i2p$pop == 'I3', 'CI',
ifelse(i2p$pop == 'I4', 'PD',
ifelse(i2p$pop == 'O2', 'BS',
ifelse(i2p$pop == 'O3', 'CA',
'BN')))))
# create new data frame using i2p without clones (duplicated preps), but still with two actual clones (I4G + I4F)
# this is removing files that have the lower coverage/fewer reads
i2p_noclones_allsamps = i2p %>%
dplyr::filter(bam != "4-MullenDavies_S4_TCAC.nosymbio.fastq.bam") %>% # O4E
dplyr::filter(bam != "1-MullenDavies_S1_GCTT.nosymbio.fastq.bam") %>% # O2A
dplyr::filter(prepped_id != "I4A_CLONE") %>% # I4A
dplyr::filter(bam != "2-MullenDavies_S2_AGTG.nosymbio.fastq.bam") %>% # O4A
dplyr::filter(bam != "3-MullenDavies_S3_TGGT.nosymbio.fastq.bam") %>% # I3H
dplyr::filter(prepped_id != "O3B_CLONE") %>% # O3B
dplyr::filter(bam != "4-MullenDavies_S4_TCAG.nosymbio.fastq.bam") %>% # O2E
dplyr::filter(bam != "1-MullenDavies_S1_TGGT.nosymbio.fastq.bam") %>% # I2E sample 1
dplyr::filter(bam != "5-MullenDavies_S5_TGGT.nosymbio.fastq.bam") %>% # I2E sample 2
dplyr::filter(bam != "1-MullenDavies_S1_ACCA.nosymbio.fastq.bam") # I3C
library(tidyverse)
# add in site name
i2p$sitename <- ifelse(i2p$pop == 'I2', 'SP',
ifelse(i2p$pop == 'I3', 'CI',
ifelse(i2p$pop == 'I4', 'PD',
ifelse(i2p$pop == 'O2', 'BS',
ifelse(i2p$pop == 'O3', 'CA',
'BN')))))
# create new data frame using i2p without clones (duplicated preps), but still with two actual clones (I4G + I4F)
# this is removing files that have the lower coverage/fewer reads
i2p_noclones_allsamps = i2p %>%
dplyr::filter(bam != "4-MullenDavies_S4_TCAC.nosymbio.fastq.bam") %>% # O4E
dplyr::filter(bam != "1-MullenDavies_S1_GCTT.nosymbio.fastq.bam") %>% # O2A
dplyr::filter(prepped_id != "I4A_CLONE") %>% # I4A
dplyr::filter(bam != "2-MullenDavies_S2_AGTG.nosymbio.fastq.bam") %>% # O4A
dplyr::filter(bam != "3-MullenDavies_S3_TGGT.nosymbio.fastq.bam") %>% # I3H
dplyr::filter(prepped_id != "O3B_CLONE") %>% # O3B
dplyr::filter(bam != "4-MullenDavies_S4_TCAG.nosymbio.fastq.bam") %>% # O2E
dplyr::filter(bam != "1-MullenDavies_S1_TGGT.nosymbio.fastq.bam") %>% # I2E sample 1
dplyr::filter(bam != "5-MullenDavies_S5_TGGT.nosymbio.fastq.bam") %>% # I2E sample 2
dplyr::filter(bam != "1-MullenDavies_S1_ACCA.nosymbio.fastq.bam") # I3C
head(i2p_noclones_allsamps)
#-------------
# clustering / PCoA based on identity by state (IBS) based on single read resampling
# (for low and/or uneven coverage)
# all clones removed
ma = as.matrix(read.table("tuftscustompipeline_denovo_nosyms/myresult2.noclone.ibsMat"))
head(ma)

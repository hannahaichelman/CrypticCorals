dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-10 18:00:00") %>%
mutate(Treatment = "Control")
Tank2.1_all <- Tank2.1 %>%
mutate(Temp = Temp + 0.724092) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-12 00:00:00" & DateTime > "2016-09-07 00:00:00") %>%
mutate(Treatment = "Low Var")
Tank2.1_var <- Tank2.1 %>%
mutate(Temp = Temp + 0.724092) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-11-10 18:00:00" & DateTime > "2016-09-22 00:00:00") %>%
mutate(Treatment = "Low Var")
Tank2.1_stress <- Tank2.1 %>%
mutate(Temp = Temp + 0.724092) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-10 18:00:00") %>%
mutate(Treatment = "Low Var")
# Tank 3 doesn't record until the end of the experiment
Tank3.1_all <- Tank3.1 %>%
mutate(Temp = Temp + 0.7730094) %>% # treatment-specific correction
dplyr::filter(DateTime > "2016-09-07 00:00:00") %>%
mutate(Treatment = "Mod Var")
Tank3.1_var <- Tank3.1 %>%
mutate(Temp = Temp + 0.7730094) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-11-10 18:00:00" & DateTime > "2016-09-22 00:00:00") %>%
mutate(Treatment = "Mod Var")
Tank3.1_stress <- Tank3.1 %>%
mutate(Temp = Temp + 0.7730094) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-10 18:00:00") %>%
mutate(Treatment = "Mod Var")
Tank4.2_all <- Tank4.2 %>%
mutate(Temp = Temp + 0.7088613) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-12 00:00:00" & DateTime > "2016-09-07 00:00:00") %>%
mutate(Treatment = "High Var")
Tank4.2_var <- Tank4.2 %>%
mutate(Temp = Temp + 0.7088613) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-11-10 18:00:00" & DateTime > "2016-09-22 00:00:00") %>%
mutate(Treatment = "High Var")
Tank4.2_stress <- Tank4.2 %>%
mutate(Temp = Temp + 0.7088613) %>% # treatment-specific correction
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-10 18:00:00") %>%
mutate(Treatment = "High Var")
# Tank 5 = Control 2, not using this treatment so no treatment-specific correction for Tank5's
Tank5.3_all <- Tank5.3 %>%
dplyr::filter(DateTime < "2016-12-12 00:00:00" & DateTime > "2016-09-07 00:00:00") %>%
mutate(Treatment = "control 2")
Tank5.3_var <- Tank5.3 %>%
dplyr::filter(DateTime < "2016-11-10 18:00:00" & DateTime > "2016-09-22 00:00:00") %>%
mutate(Treatment = "control 2")
Tank5.3_stress <- Tank5.3 %>%
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-10 18:00:00") %>%
mutate(Treatment = "control 2")
#### Statistically compare hobo logger data ####
# combine all variability data into one dataframe, exclude control 2 for now
all.hobo.data <- rbind(Tank1.1_var, Tank2.1_var, Tank3.1_var, Tank4.2_var)
library(car)
# Levene test used to test if samples have equal variance
leveneTest(Temp~Treatment, data = all.hobo.data)
# now try https://stackoverflow.com/questions/43646987/multiple-comparison-post-hoc-test-for-levenes-test
# first calculate the median by treatment and add as a column
all.hobo.data <- all.hobo.data %>%
group_by(Treatment) %>%
mutate(temp.med = ifelse(Temp, median(Temp, na.rm=TRUE), ifelse(Temp==NA, NA)))
# then calculate the residual for each temperature
all.hobo.data$temp.med.res<-abs(all.hobo.data$Temp-all.hobo.data$temp.med)
# Then we run an ANOVA, and post-hoc if necessary:
levene.dat.aov<-aov(temp.med.res~Treatment, all.hobo.data)
summary(levene.dat.aov)
p1 = Tank1.1_all %>%
ggplot(aes(x = DateTime_ct, y = Temp))+
geom_line(color = 'darkgrey', lwd=1)+
ylim(26,34) +
geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
ggtitle("Control") +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-07 00:00:00", "2016-09-22 00:00:00","2016-11-10 18:00:00","2016-11-14 00:00:00","2016-11-21 00:00:00","2016-12-11 23:55:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-07 00:00:00", "2016-12-11 23:55:00")))+
theme_classic() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
p1
#### Combine all hobo variability objects to plot ####
# with re-analysis, only including control and moderate variability treatments
all_temp = rbind(Tank1.1_all, Tank3.1_all)
head(all_temp)
str(all_temp)
all_temp$Treatment = factor(all_temp$Treatment, levels = c("Control","Mod Var"))
all_var = rbind(Tank1.1_var, Tank3.1_var)
head(all_var)
str(all_var)
all_var$Treatment = factor(all_var$Treatment, levels = c("Control","Mod Var"))
all_stress = rbind(Tank1.1_stress, Tank3.1_stress)
head(all_stress)
str(all_stress)
all_stress$Treatment = factor(all_stress$Treatment, levels = c("Control","Mod Var"))
cols_treat_reds <- c("Control" = "darkgrey", "Mod Var"="#CC3300")
# also read in extra temperature data for the moderate variability treatment for the end of the experiment
extra_data = read.csv("Temperature_Data/data_files/TankTemps/Temperature_GlassThermometer.csv")
str(extra_data)
extra_data$Day <- as.POSIXct(extra_data$DATE, format="%d-%b-%y")
extra_data_control = extra_data %>%
select(Day, Sump_1) %>%
mutate(Treatment = "Control_extra") %>%
dplyr::rename("Temp" = "Sump_1")
extra_data_mod = extra_data %>%
select(Day, Sump_3) %>%
mutate(Treatment = "Mod Var_extra") %>%
dplyr::rename("Temp" = "Sump_3")
extra_data_combined = rbind(extra_data_control, extra_data_mod)
extra_data_combined$Treatment = as.factor(extra_data_combined$Treatment)
str(extra_data_combined)
# plot the variability period
str(all_var)
all_var$Treatment = factor(all_var$Treatment, levels = c("Mod Var", "Control"))
all_var.plot = all_var %>%
ggplot(aes(x = DateTime_ct, y = Temp, color = Treatment))+
geom_line(aes(color = Treatment), lwd=1, alpha = 0.8)+
scale_color_manual(values = cols_treat_reds)+
ylim(26,34) +
geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
#ggtitle("Control 2") +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-22 00:00:00","2016-11-10 18:00:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-22 00:00:00", "2016-11-10 18:00:00")))+
theme_bw() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
all_var.plot
# plot the whole time course - figure 1C
all_temp$Treatment = factor(all_temp$Treatment, levels = c("Mod Var", "Control"))
all_temp.plot = all_temp %>%
ggplot(aes(x = DateTime_ct, y = Temp, color = Treatment))+
annotate("rect", xmin = as.POSIXct("2016-09-07 00:00:00"), xmax = as.POSIXct("2016-09-22 00:00:00"), ymin = - Inf, ymax = Inf, fill = "gray", alpha = 0.3)+
annotate("rect", xmin = as.POSIXct("2016-09-22 00:00:00"), xmax = as.POSIXct("2016-11-10 18:00:00"), ymin = - Inf, ymax = Inf, fill = "orange", alpha = 0.15)+
annotate("rect", xmin = as.POSIXct("2016-11-10 18:00:00"), xmax = as.POSIXct("2016-11-25 00:00:00"), ymin = - Inf, ymax = Inf, fill = "red4", alpha = 0.15)+
annotate("rect", xmin = as.POSIXct("2016-11-25 00:00:00"), xmax = as.POSIXct("2016-12-11 23:55:00"), ymin = - Inf, ymax = Inf, fill = "royalblue4", alpha = 0.15)+
geom_line(aes(color = Treatment), lwd=0.75)+
scale_color_manual(values = cols_treat_reds)+
#geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=.5) +
xlab("Day") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-07 00:00:00", "2016-09-22 00:00:00","2016-11-10 18:00:00","2016-11-14 00:00:00","2016-11-21 00:00:00","2016-11-25 00:00:00", "2016-12-11 23:55:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-07 00:00:00", "2016-12-11 23:55:00")))+
scale_y_continuous(name = "Temperature (Â°C)", breaks = seq(26,33,1))+
theme_bw()+
#theme(axis.text.x = element_blank())
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
all_temp.plot
# try to add in the extra data
all_temp_forextra = all_temp %>%
select(Day, Temp, Treatment)
all_temp_extra = melt(list(df1 = all_temp_forextra, df2 = extra_data_combined), id.vars = c("Day","Treatment"))
str(all_temp_extra)
View(all_temp_extra)
all_temp_extra2 = all_temp_extra %>%
select(Day, value, Treatment) %>%
dplyr::rename("Temp" = "value")
head(all_temp_extra2)
all_temp_extra2$DateTime = as.POSIXct(all_temp_extra2$Day)
all_temp_extra2$Treatment = factor(all_temp_extra2$Treatment, levels = c("Control_extra","Mod Var_extra","Control","Mod Var"))
all_temp_extra2_Control = all_temp_extra2 %>%
dplyr::filter(Treatment == "Control")
all_temp_extra2_ModVar = all_temp_extra2 %>%
dplyr::filter(Treatment == "Mod Var")
all_temp_extra2_ControlExtra = all_temp_extra2 %>%
dplyr::filter(Treatment == "Control_extra")
all_temp_extra2_ModVarExtra = all_temp_extra2 %>%
dplyr::filter(Treatment == "Mod Var_extra")
all_temp_extra_final = rbind(all_temp_extra2_ModVar, all_temp_extra2_Control, all_temp_extra2_ControlExtra, all_temp_extra2_ModVarExtra)
cols_treat_reds2 <- c("Control" = "darkgrey", "Mod Var"="#CC3300", "Control_extra" = "black", "Mod Var_extra" = "#67000d")
# make extra mod var points outlines in black
# re-level factor so that grey is on top of red
all_temp.plot2 = all_temp_extra_final %>%
ggplot(aes(x = Day, y = Temp, color = Treatment))+
annotate("rect", xmin = as.POSIXct("2016-09-07 00:00:00"), xmax = as.POSIXct("2016-09-22 00:00:00"), ymin = - Inf, ymax = Inf, fill = "gray", alpha = 0.3)+
annotate("rect", xmin = as.POSIXct("2016-09-22 00:00:00"), xmax = as.POSIXct("2016-11-10 18:00:00"), ymin = - Inf, ymax = Inf, fill = "orange", alpha = 0.15)+
annotate("rect", xmin = as.POSIXct("2016-11-10 18:00:00"), xmax = as.POSIXct("2016-11-25 00:00:00"), ymin = - Inf, ymax = Inf, fill = "red4", alpha = 0.15)+
annotate("rect", xmin = as.POSIXct("2016-11-25 00:00:00"), xmax = as.POSIXct("2016-12-11 23:55:00"), ymin = - Inf, ymax = Inf, fill = "royalblue4", alpha = 0.15)+
# geom_line(aes(color = Treatment), lwd=0.75)+
geom_point(aes(color = Treatment), size = 1)+
scale_color_manual(values = cols_treat_reds2)+
xlab("Day") +
scale_x_datetime(breaks = as.POSIXct(c("2016-09-07 00:00:00", "2016-09-22 00:00:00","2016-11-10 18:00:00","2016-11-14 00:00:00","2016-11-21 00:00:00","2016-11-25 00:00:00", "2016-12-11 23:55:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-09-07 00:00:00", "2016-12-11 23:55:00")))+
scale_y_continuous(name = "Temperature (Â°C)", breaks = seq(26,33,1))+
theme_bw()+
#theme(axis.text.x = element_blank())
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
all_temp.plot2
ggplot(all_temp_extra, aes(x = Day, y = Temp, color = Treatment)) +
geom_point(aes(color = Treatment), lwd=0.75)+
#scale_color_manual(values = cols_treat_reds)+
#geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=.5) +
xlab("Day")
all_temp.plot2
# plot a subset of days to zoom in and illustrate what the profiles looked like
all_temp.plot.subset = all_temp %>%
subset(DateTime_ct > "2016-10-30" & DateTime_ct <= "2016-11-02") %>%
ggplot(aes(x = DateTime_ct, y = Temp, color = Treatment))+
annotate("rect", xmin = as.POSIXct(-Inf), xmax = as.POSIXct(Inf), ymin = - Inf, ymax = Inf, fill = "orange", alpha = 0.15)+
geom_line(aes(color = Treatment), lwd=1, alpha = 1)+
scale_color_manual(values = cols_treat_reds)+
scale_y_continuous(name = "Temperature (Â°C)", breaks = seq(26,33,1))+
xlab("Day") +
theme_bw() +
theme(axis.text.x = element_blank())
#theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
all_temp.plot.subset
# plot all stress + recovery periods
all_stress.plot = all_stress %>%
ggplot(aes(x = DateTime_ct, y = Temp, color = Treatment))+
geom_line(aes(color = Treatment), lwd=1, alpha = 0.8)+
scale_color_manual(values = cols_treat_reds)+
#geom_hline(aes(yintercept = 28.5), colour="grey", linetype="dashed", lwd=1) +
xlab("Date") +
scale_x_datetime(breaks = as.POSIXct(c("2016-11-10 18:05:00","2016-11-14", "2016-11-21","2016-11-25", "2016-12-11 23:55:00")),
date_labels = "%m/%d/%y",
limits = as.POSIXct(c("2016-11-10 18:05:00","2016-12-11 23:55:00")))+
scale_y_continuous(name = "Temperature (Â°C)", breaks = seq(26,33,1))+
theme_bw() +
theme(axis.text.x = element_text(angle = 25, hjust = 1, vjust = 1))
all_stress.plot
# Find overall mean during heat challenge and recovery periods:
library(plotrix)
all_temp_extra_final_stress = all_temp_extra_final %>%
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-10 18:00:00")
all_temp_extra_final_var = all_temp_extra_final %>%
dplyr::filter(DateTime < "2016-11-10 18:00:00" & DateTime > "2016-09-22 00:00:00")
all_stress_2 = all_temp_extra_final_stress %>%
#dplyr::filter(DateTime < "2016-11-21 00:00:00" & DateTime > "2016-11-14 00:00:00") %>%# to look at just stress
dplyr::filter(DateTime < "2016-12-11 23:55:00" & DateTime > "2016-11-25 00:00:00") %>%# to look at just recovery
summarise_at(vars(Temp), list(mean_temp = mean, sd_temp = sd, se_temp = std.error), na.rm=TRUE)
all_stress_2
Tank1.1_var.nona = Tank1.1_var %>%
drop_na(Temp)
Tank1.1_var.dailystats<-data.frame("DayRange"=tapply(Tank1.1_var.nona$Temp, Tank1.1_var.nona$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(Tank1.1_var.nona$Temp, Tank1.1_var.nona$Day, min),"DayMax"=tapply(Tank1.1_var.nona$Temp, Tank1.1_var.nona$Day, max), "DayMean"=tapply(Tank1.1_var.nona$Temp, Tank1.1_var.nona$Day, mean))
Tank1.1_var.dailystats <- tibble::rownames_to_column(Tank1.1_var.dailystats, "date")
Tank1.1_var.dailystats$treat <- "Control 1"
head(Tank1.1_var.dailystats)
Tank2.1_var.nona = Tank2.1_var %>%
drop_na(Temp)
Tank2.1_var.dailystats<-data.frame("DayRange"=tapply(Tank2.1_var.nona$Temp, Tank2.1_var.nona$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(Tank2.1_var.nona$Temp, Tank2.1_var.nona$Day, min),"DayMax"=tapply(Tank2.1_var.nona$Temp, Tank2.1_var.nona$Day, max), "DayMean"=tapply(Tank2.1_var.nona$Temp, Tank2.1_var.nona$Day, mean))
Tank2.1_var.dailystats <- tibble::rownames_to_column(Tank2.1_var.dailystats, "date")
Tank2.1_var.dailystats$treat <- "Low Var"
head(Tank2.1_var.dailystats)
Tank3.1_var.nona = Tank3.1_var %>%
drop_na(Temp)
Tank3.1_var.dailystats<-data.frame("DayRange"=tapply(Tank3.1_var.nona$Temp, Tank3.1_var.nona$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(Tank3.1_var.nona$Temp, Tank3.1_var.nona$Day, min),"DayMax"=tapply(Tank3.1_var.nona$Temp, Tank3.1_var.nona$Day, max), "DayMean"=tapply(Tank3.1_var.nona$Temp, Tank3.1_var.nona$Day, mean))
Tank3.1_var.dailystats <- tibble::rownames_to_column(Tank3.1_var.dailystats, "date")
Tank3.1_var.dailystats$treat <- "Mod Var"
head(Tank3.1_var.dailystats)
Tank4.2_var.nona = Tank4.2_var %>%
drop_na(Temp)
Tank4.2_var.dailystats<-data.frame("DayRange"=tapply(Tank4.2_var.nona$Temp, Tank4.2_var.nona$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(Tank4.2_var.nona$Temp, Tank4.2_var.nona$Day, min),"DayMax"=tapply(Tank4.2_var.nona$Temp, Tank4.2_var.nona$Day, max), "DayMean"=tapply(Tank4.2_var.nona$Temp, Tank4.2_var.nona$Day, mean))
Tank4.2_var.dailystats <- tibble::rownames_to_column(Tank4.2_var.dailystats, "date")
Tank4.2_var.dailystats$treat <- "High Var"
head(Tank4.2_var.dailystats)
# combine daily variability stats for all loggers
library(Rmisc)
var.dailystats.all = rbind(Tank1.1_var.dailystats,Tank3.1_var.dailystats)
str(var.dailystats.all)
var.dailystats.all$treat = factor(var.dailystats.all$treat, levels = c("Control 1","Mod Var"))
summarySE(data = var.dailystats.all, measurevar = "DayRange", groupvar = "treat")
calc_phys_2_lin
library(ggplot2)
library(lme4)
library(plotly)
library(ggridges)
library(tidyverse)
library(arsenal) #easily compare two data frames
library(Rmisc)
library(lmerTest)
library(emmeans)
library(reshape)
library(readxl)
library(wesanderson)
library(ggpubr)
library(car)
library(sjPlot)
library(effects)
library(glmmTMB)
library(performance)
library(patchwork)
library(magrittr)
library(SciViews)
#for PCAs
library(ggpubr)
library(ggfortify)
library(ggplot2)
library(cluster)
library(FactoMineR) # lots of options for pca visuals and summary stats
library(factoextra)
library(corrplot)
library(dplyr)
library(cowplot)
library(vegan)
##### Read in and format data #####
# set wd
# set color palettes used throughout
cols_site <- c("CI" = "#543005", "PD"= "#bf812d",  "SP"= "#dfc27d",  "BN" = "#003c30", "BS"= "#35978f", "CA"= "#80cdc1")
#cols_treat <- c("darkgrey", "#FF9966","#CC3300","#7f0000")
cols_treat <- c("darkgrey","#CC3300")
cols_lineage <- c("L1" = "#3f007d", "L2" = "#807dba", "L3" = "#bcbddc")
its2_cols_greens = c("A4" = "#ffeda0", "C1" = "#edf8e9", "C3af" = "#238b45","C3" = "#a1d99b","D1" = "#00441b")
##### Growth #####
# need to re-read in the data sheet for calcification only
post_phys_forcalc <- read.csv('Physiology_Data/data_files/dtvmaster.csv')
# remove unexplained outliers, and subset by only the data we need here
calc_phys = post_phys_forcalc %>%
select(frag, survivedtoend, treat, blastvol, blaster,
t2sastan1, t2sastan2, t2sastan3, t2sarec1, t2sarec2, t2sarec3,
t0sastan1, t0sastan2, t0sastan3, t0sarec1, t0sarec2, t0sarec3,
t3sastan1, t3sastan2, t3sastan3, t3sarec1, t3sarec2, t3sarec3,
pabwrec1,pabwrec2,pabwrec3,t0bwrec1, t0bwrec2,t0bwrec3,t1bwrec1, t1bwrec2,t1bwrec3,t2bwrec1, t2bwrec2,t2bwrec3,t3bwrec1, t3bwrec2,t3bwrec3) %>%
mutate(treat = as.factor(treat), blastvol = as.numeric(blastvol)) %>%
mutate_at(c(6:23), as.numeric) %>%
dplyr::filter(frag!="I2A12", frag!="I2A7", frag!="O4D8", frag!="I3E10", frag!="I3I10") %>% #these frags are being removed because they were duplicate genotypes within treatment and had the most complete information of the two
dplyr::filter(frag!="O2F1", frag!="O4G7", frag!="O2I3", frag!="O3H3", frag!="I3D8", frag!="O3F4", frag!="O3G10", frag!="O3F3", frag!="I4F8") #these frags are being removed because they were unexplainable outliers with weird weight values
#calculate surface area of the coral fragments
calc_phys$SAcm2_t0 <- (4*((calc_phys$t0sarec1+calc_phys$t0sarec2+calc_phys$t0sarec3)/3))/((calc_phys$t0sastan1+calc_phys$t0sastan2+calc_phys$t0sastan3)/3)
calc_phys$SAcm2_t2 <- (4*((calc_phys$t2sarec1+calc_phys$t2sarec2+calc_phys$t2sarec3)/3))/((calc_phys$t2sastan1+calc_phys$t2sastan2+calc_phys$t2sastan3)/3)
calc_phys$SAcm2_t3 <- (4*((calc_phys$t3sarec1+calc_phys$t3sarec2+calc_phys$t3sarec3)/3))/((calc_phys$t3sastan1+calc_phys$t3sastan2+calc_phys$t3sastan3)/3)
#add in descriptive information for coral samples
calc_phys$origsitecode <- substr(calc_phys$frag, 1, 2)
calc_phys$origsitecode <- as.factor(calc_phys$origsitecode)
# add in descriptive site name with inshore/offshore indicator
calc_phys$sitename <- ifelse(calc_phys$origsitecode == 'I2', 'SP',
ifelse(calc_phys$origsitecode == 'I3', 'CI',
ifelse(calc_phys$origsitecode == 'I4', 'PD',
ifelse(calc_phys$origsitecode == 'O2', 'BS',
ifelse(calc_phys$origsitecode == 'O3', 'CA',
'BN')))))
calc_phys$sitename <- as.factor(calc_phys$sitename)
# extract the genotype and fragment number
calc_phys$fragid <- substr(calc_phys$frag,3,5)
# add inshore/offshore designation
calc_phys$reef <- substr(calc_phys$frag,1,1)
calc_phys$reef <- ifelse(calc_phys$reef == 'O', 'Outer Reef', 'Inner Reef')
calc_phys$reef <- as.factor(calc_phys$reef)
# add in genotype
calc_phys$genet <- substr(calc_phys$fragid,1,1)
#create a new column of combined genotype that will be used as a random effect in stats later
calc_phys = calc_phys %>%
unite(gen_site, c(origsitecode,genet), sep = "", remove = FALSE) %>%
mutate(gen_site = as.factor(gen_site))
# re-level and re-name treatment
calc_phys$treat <- factor(calc_phys$treat, levels = c("init", "1", "2", "3","4","5"))
levels(calc_phys$treat) <- c("Initial","Control","Low Var","Mod Var","High Var","Control 2")
# calculate average weight at each time point
calc_phys = calc_phys %>%
mutate(paavgbw=rowMeans(.[ , c("pabwrec1","pabwrec2","pabwrec3")], na.rm=TRUE)) %>%
mutate(t0avgbw=rowMeans(.[ , c("t0bwrec1","t0bwrec2","t0bwrec3")], na.rm=TRUE)) %>%
mutate(t1avgbw=rowMeans(.[ , c("t1bwrec1","t1bwrec2","t1bwrec3")], na.rm=TRUE)) %>%
mutate(t2avgbw=rowMeans(.[ , c("t2bwrec1","t2bwrec2","t2bwrec3")], na.rm=TRUE)) %>%
mutate(t3avgbw=rowMeans(.[ , c("t3bwrec1","t3bwrec2","t3bwrec3")], na.rm=TRUE))
# calculate growth rate at the time point intervals - can't use this though because we do not have dry weights
calc_phys = calc_phys %>%
mutate(T0_PA_g_cm2_day=((t0avgbw-paavgbw)/16)/SAcm2_t0) %>%
mutate(T2_T0_g_cm2_day=((t2avgbw-t0avgbw)/57)/SAcm2_t2) %>%
mutate(T2_T1_g_cm2_day=((t2avgbw-t1avgbw)/22)/SAcm2_t2) %>%
mutate(T3_T2_g_cm_day2=((t3avgbw-t2avgbw)/32)/SAcm2_t3) %>%
mutate(T3_T0_g_cm_day2=((t3avgbw-t0avgbw)/79)/SAcm2_t3)
# calculate percent change in growth
calc_phys = calc_phys %>%
mutate(T0_PA_perc=((t0avgbw-paavgbw)/paavgbw)*100) %>%
mutate(T1_T0_perc=((t1avgbw-t0avgbw)/t0avgbw)*100) %>%
mutate(T2_T1_perc=((t2avgbw-t1avgbw)/t1avgbw)*100) %>%
mutate(T3_T2_perc=((t3avgbw-t2avgbw)/t2avgbw)*100) %>%  # this is from before to after stress
mutate(T2_T0_perc=((t2avgbw-t0avgbw)/t0avgbw)*100) %>%  # this is time 0 til before the stress
mutate(T3_T0_perc=((t3avgbw-t0avgbw)/t0avgbw)*100)      # this is time 0 til after the stress
# calculate relative growth rate (RGR)
calc_phys = calc_phys %>%
mutate(T0_PA_rgr=((ln(t0avgbw)-ln(paavgbw))/16)) %>%
mutate(T2_T0_rgr=((ln(t2avgbw)-ln(t0avgbw))/57)) %>%
mutate(T2_T1_rgr=((ln(t2avgbw)-ln(t1avgbw))/22)) %>%
mutate(T3_T2_rgr=((ln(t3avgbw)-ln(t2avgbw))/32)) %>%
mutate(T3_T0_rgr=((ln(t3avgbw)-ln(t0avgbw))/79))
# take a look at the dataset
str(calc_phys)
# un-comment the drop_na() corresponding to the time point of data you want to look at.
calc_phys2 = calc_phys %>%
drop_na(T2_T0_rgr) %>%
#drop_na(T3_T2_rgr) %>%
dplyr::filter(treat!="Control 2") %>%
dplyr::filter(treat!="Low Var") %>%
dplyr::filter(treat!="High Var") %>%
dplyr::filter(gen_site != "I4G") # clone with I4F, remove from dataset
# merge with lineage info for later plotting
lineages = read.csv("Physiology_Data/data_files/tve_lineages_noclones.csv")
calc_phys_all_lin <- left_join(calc_phys2, lineages, by = "gen_site")
calc_phys_all_lin$lineage = as.factor(calc_phys_all_lin$lineage)
calc_phys_2_lin = calc_phys_all_lin %>%
dplyr::filter(is.na(lineage) | lineage!="L3") # want to keep NA values for lineage here since they still have other info, will remove na's for lineage specific plots
# exploratory figure
#scatter plot with linear regression and confidence interval
ggplot(calc_phys, aes(treat, T2_T0_perc, color = sitename))+
geom_point()+
geom_smooth(aes(group=sitename), method=lm)+
theme_classic()
## Mixed Model
# interested in the effects of dtv treatment and lineage
m1 <- lmer(T2_T0_rgr ~ treat+lineage + (1|gen_site), data = calc_phys_2_lin, REML=TRUE)
#m1 <- lmer(T3_T2_rgr ~ treat+lineage + (1|gen_site), data = calc_phys_2_lin, REML=TRUE)
summary(m1)
calc_phys_2_lin_nona = calc_phys_2_lin %>%
drop_na(lineage)
growth_means_2_lin <- summarySE(calc_phys_2_lin_nona, measurevar="T2_T0_rgr", groupvars=c("treat","lineage"))
growth_means_2_lin
growth_means_2_lin <- summarySE(calc_phys_2_lin_nona, measurevar="T2_T0_rgr", groupvars=c("treat"))
growth_means_2_lin
growth_means_2_lin <- summarySE(calc_phys_2_lin_nona, measurevar="T2_T0_rgr", groupvars=c("treat","lineage"))
growth_means_2_lin
=0.0002890555 - 0.0001938333
0.0002890555 - 0.0001938333
(0.0002890555 - 0.0001938333)/0.0002890555
library(rlang)
library(stringr)
library(dplyr)
library(stats)
library(ggpubr)
library(vegan)
library(cowplot)
library(tidyverse)
#library(MCMC.OTU)
#install.packages("remotes")
#remotes::install_github("Jtrachsel/funfuns")
library(funfuns)
library(phyloseq)
setwd("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability")
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/taxa2.Rdata")
#T0 phyloseq objects
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.clean.t0.Rdata")
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.rare.t0.Rdata")
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.trim.rare.t0.Rdata") # rare otu's trimmed, then rarefied (1k)
#Prestress phyloseq objects
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.clean.prestress.Rdata")
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.rare.prestress.Rdata")
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.trim.rare.prestress.Rdata") # rare otu's trimmed, then rarefied (1k)
# remove Control 2, and lineage NA's
ps.clean.t0 <- subset_samples(ps.clean.t0,(!is.na(lineage)))
ps.clean.t0 <- subset_samples(ps.clean.t0,(!is.na(treat)))
ps.clean.t0 <- subset_samples(ps.clean.t0,lineage!="L3")
ps.rare.t0 <- subset_samples(ps.rare.t0,(!is.na(lineage)))
ps.rare.t0 <- subset_samples(ps.rare.t0,(!is.na(treat)))
ps.rare.t0 <- subset_samples(ps.rare.t0,lineage!="L3")
ps.trim.rare.t0 <- subset_samples(ps.trim.rare.t0,(!is.na(lineage)))
ps.trim.rare.t0 <- subset_samples(ps.trim.rare.t0,(!is.na(treat)))
ps.trim.rare.t0 <- subset_samples(ps.trim.rare.t0,lineage!="L3")
# remove Control 2, low and high variability, and lineage NA's
ps.clean.prestress <- subset_samples(ps.clean.prestress,(!is.na(lineage)))
ps.clean.prestress <- subset_samples(ps.clean.prestress,(!is.na(treat)))
ps.clean.prestress <- subset_samples(ps.clean.prestress,(treat!="Control 2"))
ps.clean.prestress <- subset_samples(ps.clean.prestress,(treat!="Low Var"))
ps.clean.prestress <- subset_samples(ps.clean.prestress,(treat!="High Var"))
ps.clean.prestress <- subset_samples(ps.clean.prestress,lineage!="L3")
ps.rare.prestress <- subset_samples(ps.rare.prestress,(!is.na(lineage)))
ps.rare.prestress <- subset_samples(ps.rare.prestress,(!is.na(treat)))
ps.rare.prestress <- subset_samples(ps.rare.prestress,(treat!="Control 2"))
ps.rare.prestress <- subset_samples(ps.rare.prestress,(treat!="Low Var"))
ps.rare.prestress <- subset_samples(ps.rare.prestress,(treat!="High Var"))
ps.rare.prestress <- subset_samples(ps.rare.prestress,lineage!="L3")
ps.trim.rare.prestress <- subset_samples(ps.trim.rare.prestress,(!is.na(lineage)))
ps.trim.rare.prestress <- subset_samples(ps.trim.rare.prestress,(!is.na(treat)))
ps.trim.rare.prestress <- subset_samples(ps.trim.rare.prestress,(treat!="Control 2"))
ps.trim.rare.prestress <- subset_samples(ps.trim.rare.prestress,(treat!="Low Var"))
ps.trim.rare.prestress <- subset_samples(ps.trim.rare.prestress,(treat!="High Var"))
ps.trim.rare.prestress <- subset_samples(ps.trim.rare.prestress,lineage!="L3")
# moving forward with rarefied data, doesn't seem to make a difference in the results whether rare OTUs trimmed or not and want to keep same dataset / # of individuals that we have for the diversity analyses
# make the factors of interest actual factors - T0
sample_data(ps.rare.t0)$sitename = as.factor(sample_data(ps.rare.t0)$sitename)
levels(sample_data(ps.rare.t0)$sitename)
sample_data(ps.rare.t0)$lineage = as.factor(sample_data(ps.rare.t0)$lineage)
levels(sample_data(ps.rare.t0)$lineage)
# make the factors of interest actual factors - PreStress
sample_data(ps.rare.prestress)$sitename = as.factor(sample_data(ps.rare.prestress)$sitename)
levels(sample_data(ps.rare.prestress)$sitename)
sample_data(ps.rare.prestress)$lineage = as.factor(sample_data(ps.rare.prestress)$lineage)
levels(sample_data(ps.rare.prestress)$lineage)
sample_data(ps.rare.prestress)$treat = factor(sample_data(ps.rare.prestress)$treat)
levels(sample_data(ps.rare.prestress)$treat)
# set color palettes
cols_site_diverging <- c("CI" = "#543005", "PD"= "#bf812d",  "SP"= "#dfc27d",  "BN" = "#003c30", "BS"= "#35978f", "CA"= "#80cdc1")
cols_treat_reds <- c("darkgrey", "#CC3300")
cols_lineage <- c("L1" = "#3f007d", "L2" = "#807dba")
ord.t0 <- ordinate(ps.rare.t0, "PCoA", "bray")
pcoa.lineage.t0 = plot_ordination(ps.rare.t0,ord.t0,color="lineage",shape="sitename")+
geom_point(size = 2.5, alpha=0.8)+
scale_color_manual(name="Lineage",values=cols_lineage)+
stat_ellipse(aes(group=ps.rare.t0@sam_data$lineage), type = "t", lwd = 1)+
scale_shape_manual(name="Site", values = c(15,16,17,22,21,24))+
theme_bw()
pcoa.lineage.t0
pcoa.lineage.t0
ord.t0
seq.rare.t0 <- data.frame(otu_table(ps.rare.t0))
seq.rare.t0
View(seq.rare.t0)
# make distance matrix with vegdist():
dist.rare.t0 <- vegdist(seq.rare.t0)
View(dist.rare.t0)
head(dist.rare.t0)
dist.rare.t0
samdf.rare.t0 <- data.frame(sample_data(ps.rare.t0))
head(samdf.rare.t0)
row.names(samdf.rare.t0)==row.names(seq.rare.t0)
head(samdf.rare.t0)
ord.t0 <- ordinate(ps.rare.t0, "PCoA", "bray")
pcoa.lineage.t0 = plot_ordination(ps.rare.t0,ord.t0,color="lineage",shape="sitename")+
geom_point(size = 2.5, alpha=0.8)+
scale_color_manual(name="Lineage",values=cols_lineage)+
stat_ellipse(aes(group=ps.rare.t0@sam_data$lineage), type = "t", lwd = 1)+
scale_shape_manual(name="Site", values = c(15,16,17,22,21,24))+
theme_bw()
pcoa.lineage.t0

# Lineage only:
p.lin = plot_bar(ps.cleanest.t0.rel, x="gen_site", fill="majority_its2") +
#geom_bar(stat = "identity", width = 0.2) +
geom_col(position = position_dodge2(width = 0.8, preserve = "single")) +
scale_fill_manual(name = "Genus", values = its2_cols_greens) +
theme_bw() +
facet_grid(~lineage, scales = "free", space = "free") +
#theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1), axis.title.x = element_blank(), axis.title.y = element_blank())
p.lin
ggsave(p.lin, filename = "/Users/hannahaichelman/Dropbox/BU/TVE/16S_ITS2/ITS_All_Timepoints/syms_lineagefacet_t0_majorityITS2.pdf", width=10, height=4, units=c("in"), useDingbats=FALSE)
#### Bar plot - post-processing PreStress ####
#its2_cols_end = c("#D53E4F", "#F46D43", "#3288BD", "#FEE08B", "#E6F598", "#ABDDA4", "#66C2A5", "#3288BD", "#FDAE61")
#its2_cols_purple = c("white", "#efedf5","#bcbddc", "#756bb1")
its2_cols_greens = c("A4" = "#ffeda0", "A4z" =  "#fd8d3c",
"B19" = "#4eb3d3", "B5a" = "#0868ac", "B5" = "#800026",
"C1" = "#edf8e9", "C15" = "#feb24c",  "C3" = "#a1d99b",
"C3af" = "#238b45", "D1" = "#00441b")
#### Bar plot - post-processing PreStress ####
#its2_cols_end = c("#D53E4F", "#F46D43", "#3288BD", "#FEE08B", "#E6F598", "#ABDDA4", "#66C2A5", "#3288BD", "#FDAE61")
#its2_cols_purple = c("white", "#efedf5","#bcbddc", "#756bb1")
its2_cols_greens = c("A4" = "#ffeda0", "A4z" =  "#fd8d3c",
"B19" = "#4eb3d3", "B5a" = "#0868ac", "B5" = "#800026",
"C1" = "#edf8e9", "C15" = "#feb24c",  "C3" = "#a1d99b",
"C3af" = "#238b45", "D1" = "#00441b")
# bar plot of all individuals
p.all = plot_bar(ps.cleanest.ps.rel, x="frag", fill="majority_its2") +
theme_bw() +
scale_fill_manual(name = "Majority ITS2", values = its2_cols_greens) +
xlab("Sample") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
p.all
# Lineage only:
p.lin = plot_bar(ps.cleanest.ps.rel, x="frag", fill="majority_its2") +
geom_col(position = position_dodge2(width = 0.8, preserve = "single")) +
scale_fill_manual(name = "Genus", values = its2_cols_greens) +
theme_bw() +
facet_grid(~lineage, scales = "free", space = "free") +
#theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1), axis.title.x = element_blank(), axis.title.y = element_blank())
p.lin
ps.cleanest.t0.rel = readRDS("data_files/ps.its2.t0.rel.RDS")
seqtab.rel.t0 <- data.frame(ps.cleanest.t0.rel@otu_table)
samdf.rel.t0 <- data.frame(ps.cleanest.t0.rel@sam_data)
ps.cleanest.ps.rel = readRDS("data_files/ps.its2.prestress.rel.RDS")
seqtab.rel.ps <- data.frame(ps.cleanest.ps.rel@otu_table)
samdf.rel.ps <- data.frame(ps.cleanest.ps.rel@sam_data)
## First T0
# change column names to majority its2 sequence
taxa.t0 = read.csv(file = "data_files/symportal_taxa.t0.csv", header = TRUE) %>%
select(-X)
taxa.t0$majority_its2
colnames(seqtab.rel.t0) = c("A4z","A4","B19","B5","B5a","C1.1","C1.2","C1.3","C1.4","C1.5","C1.6","C1.7","C3.1","C1.8","C3.2","C3af",
"C1.9","C1.10","C1.11","C1.12","C1.13","C1.14","C1.15","C1.16","C15","C1.17","C1.18","C1.19",
"D1.1","D1.2","D1.3","D1.4","D1.5","D1.6","D1.7","D1.8","D1.9" )
# make new data frame and sum columns with the same majority its2 sequence
seqtab.rel.t0.new = seqtab.rel.t0 %>%
mutate(A4z_sum = A4z) %>%
mutate(A4_sum = A4) %>%
mutate(B19_sum = B19) %>%
mutate(B5_sum = B5) %>%
mutate(B5a_sum = B5a) %>%
mutate(C1_sum = rowSums(select(., starts_with("C1.")))) %>%
mutate(C3_sum = rowSums(select(., starts_with("C3.")))) %>%
mutate(C3af_sum = C3af) %>%
mutate(C15_sum = C15) %>%
mutate(D1_sum = rowSums(select(., starts_with("D1.")))) %>%
rownames_to_column(var = "frag") %>%
select(frag, contains("_sum"))
its2.rel.t0.combined = left_join(seqtab.rel.t0.new, samdf.rel.t0, by = "frag")
its2.rel.t0.combined = its2.rel.t0.combined %>%
mutate_at(c(2:11), as.numeric)
# convert factors
its2.rel.t0.combined$treat = as.factor(its2.rel.t0.combined$treat)
its2.rel.t0.combined$treat = factor(its2.rel.t0.combined$treat, levels = c("Control", "Low Var","Mod Var","High Var"))
its2.rel.t0.combined$sitename = as.factor(its2.rel.t0.combined$sitename)
its2.rel.t0.combined$lineage = as.factor(its2.rel.t0.combined$lineage)
its2.rel.t0.combined$gen_site = as.factor(its2.rel.t0.combined$gen_site)
its2.rel.t0.combined$reef = as.factor(its2.rel.t0.combined$reef)
# add in dominant and minor distinctions to use in other plots
its2.rel.t0.combined.2 = its2.rel.t0.combined %>%
mutate(dominant_type = case_when(A4z_sum >= 0.5 ~ "A4z",
A4_sum >= 0.5 ~ "A4",
B19_sum >= 0.5 ~ "B19",
B5_sum >= 0.5 ~ "B5",
B5a_sum >= 0.5 ~ "B5a",
C1_sum >= 0.5 ~ "C1",
C3_sum >= 0.5 ~ "C3",
C3af_sum >= 0.5 ~ "C3af",
C15_sum >= 0.5 ~ "C15",
D1_sum >= 0.5 ~ "D1")) %>%
mutate(minor_type = case_when(B19_sum < 0.5 & B19_sum > 0.0 ~ "B19",
B5_sum < 0.5 & B5_sum > 0.0 ~ "B5",
C1_sum < 0.5 & C1_sum > 0.0 ~ "C1",
C3_sum < 0.5 & C3_sum > 0.0 ~ "C3",
C3af_sum < 0.5 & C3af_sum > 0.0 ~ "C3af",
D1_sum < 0.5 & D1_sum > 0.0 ~ "D1"))
write.csv(its2.rel.t0.combined.2, file = "~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/Physiology_Data/data_files/ITS2.dominanttype.T0.csv", row.names = FALSE)
## Now Prestress
# change column names to majority its2 sequence
taxa.ps = read.csv(file = "data_files/symportal_taxa.prestress.csv", header = TRUE) %>%
select(-X)
taxa.ps$majority_its2
colnames(seqtab.rel.ps) = c("A4z","A4","B19","B5","B5a","C1.1","C1.2","C1.3","C1.4","C1.5","C1.6","C1.7","C3.1","C1.8","C3.2","C3af",
"C1.9","C1.10","C1.11","C1.12","C1.13","C1.14","C1.15","C1.16","C15","C1.17","C1.18","C1.19",
"D1.1","D1.2","D1.3","D1.4","D1.5","D1.6","D1.7","D1.8","D1.9" )
# make new data frame and sum columns with the same majority its2 sequence
seqtab.rel.ps.new = seqtab.rel.ps %>%
mutate(A4z_sum = A4z) %>%
mutate(A4_sum = A4) %>%
mutate(B19_sum = B19) %>%
mutate(B5_sum = B5) %>%
mutate(B5a_sum = B5a) %>%
mutate(C1_sum = rowSums(select(., starts_with("C1.")))) %>%
mutate(C3_sum = rowSums(select(., starts_with("C3.")))) %>%
mutate(C3af_sum = C3af) %>%
mutate(C15_sum = C15) %>%
mutate(D1_sum = rowSums(select(., starts_with("D1.")))) %>%
rownames_to_column(var = "frag") %>%
select(frag, contains("_sum"))
its2.rel.ps.combined = left_join(seqtab.rel.ps.new, samdf.rel.ps, by = "frag")
its2.rel.ps.combined = its2.rel.ps.combined %>%
mutate_at(c(2:11), as.numeric)
# convert factors
its2.rel.ps.combined$treat = as.factor(its2.rel.ps.combined$treat)
its2.rel.ps.combined$treat = factor(its2.rel.ps.combined$treat, levels = c("Control", "Low Var","Mod Var","High Var"))
its2.rel.ps.combined$sitename = as.factor(its2.rel.ps.combined$sitename)
its2.rel.ps.combined$lineage = as.factor(its2.rel.ps.combined$lineage)
its2.rel.ps.combined$gen_site = as.factor(its2.rel.ps.combined$gen_site)
its2.rel.ps.combined$reef = as.factor(its2.rel.ps.combined$reef)
# add in dominant and minor distinctions to use in other plots
its2.rel.ps.combined.2 = its2.rel.ps.combined %>%
mutate(dominant_type = case_when(A4z_sum >= 0.5 ~ "A4z",
A4_sum >= 0.5 ~ "A4",
B19_sum >= 0.5 ~ "B19",
B5_sum >= 0.5 ~ "B5",
B5a_sum >= 0.5 ~ "B5a",
C1_sum >= 0.5 ~ "C1",
C3_sum >= 0.5 ~ "C3",
C3af_sum >= 0.5 ~ "C3af",
C15_sum >= 0.5 ~ "C15",
D1_sum >= 0.5 ~ "D1")) %>%
mutate(minor_type = case_when(B19_sum < 0.5 & B19_sum > 0.0 ~ "B19",
B5_sum < 0.5 & B5_sum > 0.0 ~ "B5",
C1_sum < 0.5 & C1_sum > 0.0 ~ "C1",
C3_sum < 0.5 & C3_sum > 0.0 ~ "C3",
C3af_sum < 0.5 & C3af_sum > 0.0 ~ "C3af",
D1_sum < 0.5 & D1_sum > 0.0 ~ "D1"))
head(its2.rel.t0.combined.2)
head(its2.rel.ps.combined.2)
its2.rel.combined = rbind(its2.rel.t0.combined.2, its2.rel.ps.combined.2)
View(its2.rel.t0.combined.2)
its2.rel.t0.combined.2 %>%
#its2.rel.ps.combined.2 %>%
#filter(sitename=="CI") %>%
group_by(lineage) %>%
dplyr::summarize(n = n(), # total sample size
n_gt50D = sum(D1_sum>=0.5), # number of individuals with proportion of D1 > 0.5
p_gt50D = n_gt50D/n) # proportion of individuals with D1 > 0.5
# Kruskal-Wallis (non-parametric alternative to one-way anova) to see if there is a difference
# in mean proportion D based on lineage
its2.rel.t0.CI = its2.rel.t0.combined.2 %>%
filter(sitename=="CI")
its2.rel.ps.CI = its2.rel.ps.combined.2 %>%
filter(sitename=="CI")
shapiro.test(its2.rel.t0.combined.2$D1_sum) # not normal
kruskal.test(D1_sum ~ lineage, data = its2.rel.t0.combined.2)
kruskal.test(D1_sum ~ lineage, data = its2.rel.ps.combined.2)
kruskal.test(D1_sum ~ lineage, data = its2.rel.t0.CI)
kruskal.test(D1_sum ~ lineage, data = its2.rel.ps.CI)
ps.cleanest.ps
ps.cleanest.t0.rel
#### Decontaminated (Euk contamination removed) files ####
setwd("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability")
ps.cleanest = readRDS("16S_Microbiome/data_files/phyloseq.cleanest.all.rds")
seqtab.cleanest <- data.frame(ps.cleanest@otu_table)
samdf.cleanest <- data.frame(ps.cleanest@sam_data)
# subset T0 and pre-stress files here
ps.cleanest.t0 = subset_samples(ps.cleanest, timepoint=="t0")
seqtab.t0.cleanest <- data.frame(ps.cleanest.t0@otu_table)
samdf.t0.cleanest <- data.frame(ps.cleanest.t0@sam_data)
ps.cleanest.prestress = subset_samples(ps.cleanest, timepoint=="pre_stress")
seqtab.prestress.cleanest <- data.frame(ps.cleanest.prestress@otu_table)
samdf.prestress.cleanest <- data.frame(ps.cleanest.prestress@sam_data)
#### rarefy decontaminated data #####
library(vegan)
load("16S_Microbiome/data_files/taxa2.Rdata")
setwd("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability")
ps.rare.1k.t0 = readRDS("16S_Microbiome/data_files/phyloseq.t0.rarefied.1k.rds")
seqtab.rare.1k.t0 <- data.frame(ps.rare.1k.t0@otu_table)
samdf.rare.1k.t0 <- data.frame(ps.rare.1k.t0@sam_data)
ps.rare.1k.prestress = readRDS("16S_Microbiome/data_files/phyloseq.prestress.rarefied.1k.rds")
seqtab.rare.1k.prestress <- data.frame(ps.rare.1k.prestress@otu_table)
samdf.rare.1k.prestress <- data.frame(ps.rare.1k.prestress@sam_data)
load("16S_Microbiome/data_files/taxa2.Rdata")
ps.rare <- phyloseq(otu_table(seqtab.rare.1k, taxa_are_rows=FALSE),
sample_data(samdf.rare.1k),
tax_table(taxa2))
library(rlang)
library(stringr)
library(dplyr)
library(stats)
library(ggpubr)
library(vegan)
library(cowplot)
library(tidyverse)
#library(MCMC.OTU)
#install.packages("remotes")
#remotes::install_github("Jtrachsel/funfuns")
library(funfuns)
library(phyloseq)
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/taxa2.Rdata")
#T0 phyloseq objects
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.clean.t0.Rdata")
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.rare.t0.Rdata")
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.trim.rare.t0.Rdata") # rare otu's trimmed, then rarefied (1k)
#Prestress phyloseq objects
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.clean.prestress.Rdata")
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.rare.prestress.Rdata")
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.trim.rare.prestress.Rdata") # rare otu's trimmed, then rarefied (1k)
ps.clean.t0 <- subset_samples(ps.clean.t0,(!is.na(lineage)))
ps.clean.t0 <- subset_samples(ps.clean.t0,(!is.na(treat)))
ps.clean.t0 <- subset_samples(ps.clean.t0,lineage!="L3")
ps.rare.t0 <- subset_samples(ps.rare.t0,(!is.na(lineage)))
ps.rare.t0 <- subset_samples(ps.rare.t0,(!is.na(treat)))
ps.rare.t0 <- subset_samples(ps.rare.t0,lineage!="L3")
ps.trim.rare.t0 <- subset_samples(ps.trim.rare.t0,(!is.na(lineage)))
ps.trim.rare.t0 <- subset_samples(ps.trim.rare.t0,(!is.na(treat)))
ps.trim.rare.t0 <- subset_samples(ps.trim.rare.t0,lineage!="L3")
# remove Control 2, low and high variability, and lineage NA's
ps.clean.prestress <- subset_samples(ps.clean.prestress,(!is.na(lineage)))
ps.clean.prestress <- subset_samples(ps.clean.prestress,(!is.na(treat)))
ps.clean.prestress <- subset_samples(ps.clean.prestress,(treat!="Control 2"))
ps.clean.prestress <- subset_samples(ps.clean.prestress,(treat!="Low Var"))
ps.clean.prestress <- subset_samples(ps.clean.prestress,(treat!="High Var"))
ps.clean.prestress <- subset_samples(ps.clean.prestress,lineage!="L3")
ps.rare.prestress <- subset_samples(ps.rare.prestress,(!is.na(lineage)))
ps.rare.prestress <- subset_samples(ps.rare.prestress,(!is.na(treat)))
ps.rare.prestress <- subset_samples(ps.rare.prestress,(treat!="Control 2"))
ps.rare.prestress <- subset_samples(ps.rare.prestress,(treat!="Low Var"))
ps.rare.prestress <- subset_samples(ps.rare.prestress,(treat!="High Var"))
ps.rare.prestress <- subset_samples(ps.rare.prestress,lineage!="L3")
ps.trim.rare.prestress <- subset_samples(ps.trim.rare.prestress,(!is.na(lineage)))
ps.trim.rare.prestress <- subset_samples(ps.trim.rare.prestress,(!is.na(treat)))
ps.trim.rare.prestress <- subset_samples(ps.trim.rare.prestress,(treat!="Control 2"))
ps.trim.rare.prestress <- subset_samples(ps.trim.rare.prestress,(treat!="Low Var"))
ps.trim.rare.prestress <- subset_samples(ps.trim.rare.prestress,(treat!="High Var"))
ps.trim.rare.prestress <- subset_samples(ps.trim.rare.prestress,lineage!="L3")
ps.clean.t0
ps.rare.t0
ps.trim.rare.t0
ps.clean.prestress
ps.rare.prestress
ps.trim.rare.prestress
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/taxa2.Rdata")
#T0 phyloseq objects
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.clean.t0.Rdata")
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.rare.t0.Rdata")
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.trim.rare.t0.Rdata") # rare otu's trimmed, then rarefied (1k)
#Prestress phyloseq objects
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.clean.prestress.Rdata")
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.rare.prestress.Rdata")
load("~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/16S_Microbiome/data_files/ps.trim.rare.prestress.Rdata") # rare otu's trimmed, then rarefied (1k)
ps.clean.t0
ps.rare.t0
##### PCA Adonis Tests #####
#Use an Adonis test to get significance of factors on holobiont physiology
library(vegan)
library(MCMC.OTU)
library(MicEco)
library(pairwiseAdonis)
t0_full = read.csv("Physiology_Data/data_files/t0_full.csv")
end_full = read.csv("Physiology_Data/data_files/end_full.csv")
skel_full = read.csv("/Users/hannahaichelman/Documents/BU/TVE/SkeletonMorphometry/skel_phys_full.csv")
str(t0_full)
t0_full$sitename <- as.factor(t0_full$sitename)
t0_full$treat <- as.factor(t0_full$treat)
t0_full$lineage <- as.factor(t0_full$lineage)
str(end_full)
end_full$sitename <- as.factor(end_full$sitename)
end_full$treat <- as.factor(end_full$treat)
end_full$lineage <- as.factor(end_full$lineage)
str(skel_full)
skel_full$sitename <- as.factor(skel_full$sitename)
skel_full$treat <- as.factor(skel_full$treat)
skel_full$lineage <- as.factor(skel_full$lineage)
skel_full = read.csv("/Users/hannahaichelman/Documents/BU/TVE/SkeletonMorphometry/skel_phys_full.csv")
skel_full = read.csv("Physiology_Data/data_files/skel_phys_full.csv")
t0_full = read.csv("Physiology_Data/data_files/t0_full.csv")
end_full = read.csv("Physiology_Data/data_files/end_full.csv")
skel_full = read.csv("Physiology_Data/data_files/skel_phys_full.csv")
str(t0_full)
t0_full$sitename <- as.factor(t0_full$sitename)
t0_full$treat <- as.factor(t0_full$treat)
t0_full$lineage <- as.factor(t0_full$lineage)
str(end_full)
end_full$sitename <- as.factor(end_full$sitename)
end_full$treat <- as.factor(end_full$treat)
end_full$lineage <- as.factor(end_full$lineage)
str(skel_full)
skel_full$sitename <- as.factor(skel_full$sitename)
skel_full$treat <- as.factor(skel_full$treat)
skel_full$lineage <- as.factor(skel_full$lineage)
# add in dominant symbiont type dataframe
its2_types_t0 = read.csv("Physiology_Data/data_files/ITS2.dominanttype.T0.csv") %>%
select(frag, gen_site,dominant_type) %>%
mutate(dominant_type = as.factor(dominant_type))
library(tidyverse)
# add in dominant symbiont type dataframe
its2_types_t0 = read.csv("Physiology_Data/data_files/ITS2.dominanttype.T0.csv") %>%
select(frag, gen_site,dominant_type) %>%
mutate(dominant_type = as.factor(dominant_type))
t0_full_its2 <- left_join(t0_full, its2_types_t0, by = "gen_site")
str(t0_full_its2)
its2_types_ps = read.csv("Physiology_Data/data_files/ITS2.dominanttype.prestress.csv") %>%
select(frag, dominant_type) %>%
mutate(dominant_type = as.factor(dominant_type))
end_full_its2 <- left_join(end_full, its2_types, by = "frag")
str(end_full_its2)
end_full_its2 <- left_join(end_full, its2_types_ps, by = "frag")
str(end_full_its2)
#### Coring Data ####
# these data are not included in the manuscript #
cores = read.csv("Physiology_Data/data_files/Growth_allRegions_JPcoringdata.csv")
head(cores)
pan_cores = cores %>%
filter(region == "w") %>%
filter(spp == "s")
str(pan_cores)
pan_cores$rz = as.factor(pan_cores$rz)
pan_cores$site = as.factor(pan_cores$site)
pan_cores$spp = as.factor(pan_cores$spp)
# Re-name factor levels for sites
pan_cores$site <- dplyr::recode(pan_cores$site,
wirci = 'CI',
wirpd = 'PD',
wirpl = 'PL',
wirsp = 'SP',
worbn = 'BN',
worbs = 'BS',
worca = 'CA',
wordm = 'DM')
# Re-name core IDs
pan_cores$coreID <- dplyr::recode(pan_cores$coreID,
wordm37s='W_OR_DM_37_S',
worbn15s='W_OR_BN_15_S',
worbs17s='W_OR_BS_17_S',
worca35s='W_OR_CA_35_S',
wirsp05s='W_IR_SP_5_S',
worbn09s='W_OR_BN_9_S',
wirsp02s='W_IR_SP_2_S',
worca27s='W_OR_CA_27_S',
wirpd59s='W_IR_PD_59_S',
worbn14s='W_OR_BN_14_S',
wordm42s='W_OR_DM_42_S',
worbn16s='W_OR_BN_16_S',
worbs23s='W_OR_BS_23_S',
worbs22s='W_OR_BS_22_S',
wirsp03s='W_IR_SP_3_S',
worca30s='W_OR_CA_30_S',
worbs25s='W_OR_BS_25_S',
wordm40s='W_OR_DM_40_S',
worbn07s='W_OR_BN_7_S',
wordm41s='W_OR_DM_41_S',
wirpd63s='W_IR_PD_63_S',
wirci57s='W_IR_CI_57_S',
wirpl51s='W_IR_PL_51_S',
wirpd60s='W_IR_PD_60_S',
wirpd61s='W_IR_PD_61_S',
wirpl47s='W_IR_PL_47_S',
wirsp04s='W_IR_SP_4_S',
worbs20s='W_OR_BS_20_S',
wordm38s='W_OR_DM_38_S',
wirpl48s='W_IR_PL_48_S')
pan_cores$coreID
unique(pan_cores$coreID)
#### Coring Data ####
# these data are not included in the manuscript #
cores = read.csv("Physiology_Data/data_files/Growth_allRegions_JPcoringdata.csv")
head(cores)
pan_cores = cores %>%
filter(region == "w") %>%
filter(spp == "s")
str(pan_cores)
count(unique(pan_cores$coreID))
unique(pan_cores$coreID)
#### Coring Data ####
# these data are not included in the manuscript #
cores = read.csv("Physiology_Data/data_files/Growth_allRegions_JPcoringdata.csv")
head(cores)
pan_cores = cores %>%
filter(region == "w") %>%
filter(spp == "s")
str(pan_cores)
pan_cores$rz = as.factor(pan_cores$rz)
pan_cores$site = as.factor(pan_cores$site)
pan_cores$spp = as.factor(pan_cores$spp)
# Re-name factor levels for sites
pan_cores$site <- dplyr::recode(pan_cores$site,
wirci = 'CI',
wirpd = 'PD',
wirpl = 'PL',
wirsp = 'SP',
worbn = 'BN',
worbs = 'BS',
worca = 'CA',
wordm = 'DM')
# Re-name core IDs
pan_cores$coreID <- dplyr::recode(pan_cores$coreID,
wordm37s='W_OR_DM_37_S',
worbn15s='W_OR_BN_15_S',
worbs17s='W_OR_BS_17_S',
worca35s='W_OR_CA_35_S',
wirsp05s='W_IR_SP_5_S',
worbn09s='W_OR_BN_9_S',
wirsp02s='W_IR_SP_2_S',
worca27s='W_OR_CA_27_S',
wirpd59s='W_IR_PD_59_S',
worbn14s='W_OR_BN_14_S',
wordm42s='W_OR_DM_42_S',
worbn16s='W_OR_BN_16_S',
worbs23s='W_OR_BS_23_S',
worbs22s='W_OR_BS_22_S',
wirsp03s='W_IR_SP_3_S',
worca30s='W_OR_CA_30_S',
worbs25s='W_OR_BS_25_S',
wordm40s='W_OR_DM_40_S',
worbn07s='W_OR_BN_7_S',
wordm41s='W_OR_DM_41_S',
wirpd63s='W_IR_PD_63_S',
wirci57s='W_IR_CI_57_S',
wirpl51s='W_IR_PL_51_S',
wirpd60s='W_IR_PD_60_S',
wirpd61s='W_IR_PD_61_S',
wirpl47s='W_IR_PL_47_S',
wirsp04s='W_IR_SP_4_S',
worbs20s='W_OR_BS_20_S',
wordm38s='W_OR_DM_38_S',
wirpl48s='W_IR_PL_48_S')
# take a look at the metadata that Annabel gave us
#loading in RAD data with core ID and bam file name
rad_meta <- read.csv("Physiology_Data/data_files/all_SSID_updated.csv")
rad_meta <- filter(rad_meta, Project=="cores")
head(rad_meta)
dim(rad_meta)
# loading in and cleaning up lineage assignment data to only include core info
lineages <- read.csv("Physiology_Data/data_files/samples_on_plate_somelineages.csv")
colnames(lineages)[1] ="SampleID"
colnames(lineages)[3] ="lineage"
lineages <- dplyr::filter(lineages, PROJECT=="Panama cores")
head(lineages)
dim(lineages)
lineages$SampleID %in% rad_meta$SampleID
# loading in and cleaning up lineage assignment data to only include core info
lineages <- read.csv("Physiology_Data/data_files/samples_on_plate_somelineages.csv")
lineages2 = lineages %>%
dplyr::rename(coreID = SAMPLE_ID) %>%
dplyr::rename(lineage = X) %>%
dplyr::filter(PROJECT=="Panama cores") %>%
select(coreID, lineage)
head(lineages2)
dim(lineages2)
#combining JP metadata with lineage associations
lineages_meta <- left_join(pan_cores, lineages2, by="coreID")
head(lineages_meta)
str(lineages_meta)
lineages_meta$coreID = as.factor(lineages_meta$coreID)
lineages_meta$lineage = as.factor(lineages_meta$lineage)
## Data Analysis
# Subset to only include recent years (more confident in these core data) as in JP's analysis
pan_cores_recent = lineages_meta %>%
dplyr::filter(Year >= "1980" & Year <= "2014") %>%
drop_na(lineage) %>%
dplyr::filter(lineage != "3")
head(pan_cores_recent)
count(unique(pan_cores_recent$coreID)) # lines up with 24 cores with lineage and growth data - phew.
pan_cores_allyears = lineages_meta %>%
drop_na(lineage) %>%
dplyr::filter(lineage != "3")
count(unique(pan_cores_allyears$coreID)) # lines up with 24 cores with lineage and growth data - phew.
# make a histogram of how many cores we have through time
cols_lineage <- c("#3f007d","#807dba")
str(pan_cores_allyears)
yearmeans = summarySE(data = pan_cores_allyears, measurevar = c("calc"), groupvars = c("Year","lineage"))
yearmeans = yearmeans %>%
select(Year, lineage, N)
library(Rmisc)
str(pan_cores_allyears)
yearmeans = summarySE(data = pan_cores_allyears, measurevar = c("calc"), groupvars = c("Year","lineage"))
yearmeans = yearmeans %>%
select(Year, lineage, N)
samplesize_hist =
ggplot(yearmeans) +
theme_bw()+
geom_bar(aes(x=Year, y=N, fill = lineage), stat="identity") +
scale_fill_manual(name = "Lineage",
breaks = c("1","2"),
values = cols_lineage)+
scale_x_continuous(name="Year",breaks = seq(1880,2014,by=10))+
facet_wrap(~lineage)
samplesize_hist
yearmeans
## Correlate coring data with temperature
# read in temperature data
panama_temp = read.csv("Physiology_Data/data_files/Panama_SST_31Jan24.csv")
str(panama_temp)
panama_temp$param = as.factor(panama_temp$param)
mean_sst = panama_temp %>%
filter(param == "Annual Mean SST") %>%
dplyr::rename("AnnualMean" = "SST") %>%
select(-param)
library(tidyverse)

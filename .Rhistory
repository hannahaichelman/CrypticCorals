samdf3$sitename = as.factor(samdf3$sitename)
samdf3$gen_site = as.factor(samdf3$gen_site)
samdf3$lineage = as.factor(samdf3$lineage)
samdf3$reef = as.factor(samdf3$reef)
samdf3$Sample_or_Control = as.factor(samdf3$Sample_or_Control)
# change levels of treatment factor
samdf3$treat = factor(samdf3$treat,levels = c("Initial","Control", "Control 2","Low Var","Mod Var","High Var"))
# make T0 data frames to separate initial timepoint analyses out first
samdf_t0 = samdf3 %>%
dplyr::filter(treat == "Initial")
rownames(samdf_t0) = samdf_t0$frag
its2_divs_t0 = its2_divs %>%
dplyr::filter(frag %in% samdf_t0$frag) %>%
column_to_rownames("frag") #rownames have to match between counts table & sample data table or else phyloseq will throw a fit
# make pre-stress data frame
# in addition to the filtering we did for the T0 samples, we need to remove Lineage 3 (L3) individuals
samdf_prestress = samdf3 %>%
dplyr::filter(timepoint == "pre_stress") %>%
dplyr::filter(is.na(lineage) | lineage!="L3") # remove lineage 3 from dataset but don't remove other NAs for lineage
rownames(samdf_prestress) = samdf_prestress$frag
its2_divs_prestress = its2_divs %>%
dplyr::filter(frag!="I2D4") %>% #lineage 3
dplyr::filter(frag!="I2I7") %>% #lineage 3
dplyr::filter(frag!="I2I4") %>% #lineage 3
dplyr::filter(frag!="I2I3") %>% #lineage 3
dplyr::filter(frag!="I2D1") %>% #lineage 3
dplyr::filter(frag!="I2H13") %>% #lineage 3
dplyr::filter(frag!="I2H2") %>% #lineage 3
dplyr::filter(frag!="I2H12") %>% #lineage 3
dplyr::filter(frag!="I2D3") %>% #lineage 3
dplyr::filter(frag!="I2I10") %>% #lineage 3
dplyr::filter(frag!="I2H4") %>% #lineage 3
dplyr::filter(frag %in% samdf_prestress$frag) %>%
column_to_rownames("frag")
# make all sample data frame for looking at shifts in syms
samdf_all = samdf3 %>%
dplyr::filter(treat != "Control 2")
rownames(samdf_all) = samdf_all$frag
its2_divs_all = its2_divs %>%
dplyr::filter(frag %in% samdf_all$frag) %>%
column_to_rownames("frag") #rownames have to match between counts table & sample data table or else phyloseq will throw a fit
## making a taxa table for phyloseq - T0
taxa.t0 <- data.frame(colnames(its2_divs_t0)) #extract sym data
colnames(taxa.t0) <- c("DIV") #changing the column name to be more user-friendly
taxa.t0$majority_its2 = c("A4z",	"A4",	"B19",	"B5",	"B5a",	"C1",	"C1",	"C1",	"C1",	"C1",	"C1",	"C1",	"C3",
"C1",	"C3",	"C3af",	"C1",	"C1",	"C1",	"C1",	"C1",	"C1",	"C1",	"C1",	"C15",	"C1",	"C1",
"C1",	"D1",	"D1",	"D1",	"D1",	"D1",	"D1",	"D1",	"D1",	"D1")
taxa.t0$genus = str_sub(taxa.t0$DIV, 1, 1)
str(taxa.t0)
taxa.t0$DIV = as.factor(taxa.t0$DIV)
taxa.t0$majority_its2 = as.factor(taxa.t0$majority_its2)
taxa.t0$genus = as.factor(taxa.t0$genus)
#rownmaes also have to match between the columns of the counts table & the taxa table or ps freaks out
rownames(taxa.t0) <- taxa.t0$DIV
taxa.t0.m <- as.matrix(taxa.t0) #also has to be a matrix
ps.its2.t0 <- phyloseq(sample_data(samdf_t0),
otu_table(its2_divs_t0,taxa_are_rows=FALSE),
tax_table(taxa.t0.m))
ps.its2.t0
## making a taxa table for phyloseq - prestress samples
taxa.ps <- data.frame(colnames(its2_divs_prestress)) #extract sym data
colnames(taxa.ps) <- c("DIV") #changing the column name to be more user-friendly
taxa.ps$majority_its2 = c("A4z",	"A4",	"B19",	"B5",	"B5a",	"C1",	"C1",	"C1",	"C1",	"C1",	"C1",	"C1",	"C3",
"C1",	"C3",	"C3af",	"C1",	"C1",	"C1",	"C1",	"C1",	"C1",	"C1",	"C1",	"C15",	"C1",	"C1",
"C1",	"D1",	"D1",	"D1",	"D1",	"D1",	"D1",	"D1",	"D1",	"D1")
taxa.ps$genus = str_sub(taxa.ps$DIV, 1, 1)
str(taxa.ps)
taxa.ps$DIV = as.factor(taxa.ps$DIV)
taxa.ps$majority_its2 = as.factor(taxa.ps$majority_its2)
taxa.ps$genus = as.factor(taxa.ps$genus)
#rownmaes also have to match between the columns of the counts table & the taxa table or ps freaks out
rownames(taxa.ps) <- taxa.ps$DIV
taxa.ps.m <- as.matrix(taxa.ps) #also has to be a matrix
ps.its2.ps <- phyloseq(sample_data(samdf_prestress),
otu_table(its2_divs_prestress,taxa_are_rows=FALSE),
tax_table(taxa.ps.m))
ps.its2.ps
## making a taxa table for phyloseq - all samples
taxa.all <- data.frame(colnames(its2_divs_all)) #extract sym data
colnames(taxa.all) <- c("DIV") #changing the column name to be more user-friendly
taxa.all$majority_its2 = c("A4z",	"A4",	"B19",	"B5",	"B5a",	"C1",	"C1",	"C1",	"C1",	"C1",	"C1",	"C1",	"C3",
"C1",	"C3",	"C3af",	"C1",	"C1",	"C1",	"C1",	"C1",	"C1",	"C1",	"C1",	"C15",	"C1",	"C1",
"C1",	"D1",	"D1",	"D1",	"D1",	"D1",	"D1",	"D1",	"D1",	"D1")
taxa.all$genus = str_sub(taxa.all$DIV, 1, 1)
str(taxa.all)
taxa.all$DIV = as.factor(taxa.all$DIV)
taxa.all$majority_its2 = as.factor(taxa.all$majority_its2)
taxa.all$genus = as.factor(taxa.all$genus)
#rownmaes also have to match between the columns of the counts table & the taxa table or ps freaks out
rownames(taxa.all) <- taxa.all$DIV
taxa.all.m <- as.matrix(taxa.all) #also has to be a matrix
ps.its2.all <- phyloseq(sample_data(samdf_all),
otu_table(its2_divs_all,taxa_are_rows=FALSE),
tax_table(taxa.all.m))
ps.its2.all
ps.rel <- transform_sample_counts(ps.its2, function(OTU) OTU/sum(OTU))
#### Bar plot - raw table pre-processing ####
# Skipping decontam for now since we are ignoring negative controls per ben hume
ps.rel.t0 <- transform_sample_counts(ps.its2.t0, function(OTU) OTU/sum(OTU))
ps.rel.ps <- transform_sample_counts(ps.its2.ps, function(OTU) OTU/sum(OTU))
ps.rel.all <- transform_sample_counts(ps.its2.all, function(OTU) OTU/sum(OTU))
#keeps samples with summed counts greater than 0
ps.its2.t0.no0 <- prune_samples(sample_sums(ps.its2.t0)!=0, ps.its2.t0)
ps.its2.t0.no0 # don't lose any
ps.its2.ps.no0 <- prune_samples(sample_sums(ps.its2.ps)!=0, ps.its2.ps)
ps.its2.ps.no0 # don't lose any
# Remove NA's to create ps object we will plot
# first for T0
ps.cleanest.t0 <- subset_samples(ps.its2.t0.no0,(!is.na(lineage)))
ps.cleanest.rel.t0 <- transform_sample_counts(ps.cleanest.t0, function(OTU) OTU/sum(OTU))
# write this out as dataframe
seqtab.rel.t0 <- data.frame(ps.cleanest.rel.t0@otu_table)
sample.data.t0 = data.frame(sample_data(ps.cleanest.rel.t0))
taxa.t0 <- data.frame(ps.cleanest.rel.t0@tax_table)
mtaxa.t0 <- as.matrix(taxa.t0)
# then for Pre-Stress - removing low variability and high variability to simplify experimental design
ps.cleaner.ps <- subset_samples(ps.its2.ps.no0,(!is.na(lineage)))
ps.cleaner2.ps <- subset_samples(ps.cleaner.ps,(!is.na(treat)))
ps.cleaner3.ps <- subset_samples(ps.cleaner2.ps,(treat!="Control 2")) #156 samples remain
ps.cleaner4.ps <- subset_samples(ps.cleaner3.ps,(treat!="Low Var")) #122 samples remain
ps.cleanest.ps <- subset_samples(ps.cleaner4.ps,(treat!="High Var")) #84 samples remain
ps.cleanest.rel.ps <- transform_sample_counts(ps.cleanest.ps, function(OTU) OTU/sum(OTU))
# write this out as dataframe
seqtab.rel.ps <- data.frame(ps.cleanest.rel.ps@otu_table)
sample.data.ps = data.frame(sample_data(ps.cleanest.rel.ps))
taxa.ps <- data.frame(ps.cleanest.rel.ps@tax_table)
mtaxa.ps <- as.matrix(taxa.ps)
ps.cleanest.t0
#### PS Object Versions ####
# T0
ps.cleanest.t0 = readRDS("data_files/ps.its2.t0.RDS")
seqtab.t0 <- data.frame(ps.cleanest.t0@otu_table)
samdf.t0 <- data.frame(ps.cleanest.t0@sam_data)
ps.cleanest.t0.rel = readRDS("data_files/ps.its2.t0.rel.RDS")
seqtab.rel.t0 <- data.frame(ps.cleanest.t0.rel@otu_table)
samdf.rel.t0 <- data.frame(ps.cleanest.t0.rel@sam_data)
taxa.t0 = read.csv(file = "data_files/symportal_taxa.t0.csv", header = TRUE) %>%
select(-X)
rownames(taxa.t0) <- as.factor(taxa.t0$DIV)
sum(taxa.t0$genus == "B") # 3 div
sum(taxa.t0$genus == "C") # 23 div
sum(taxa.t0$genus == "D") # 9 div
taxa.t0
sum(taxa.t0$majority_its2 == "C1") # 3 div
sum(taxa.t0$majority_its2 == "C3") # 23 div
sum(taxa.t0$majority_its2 == "D1") # 9 div
# Pre-Stress
ps.cleanest.ps = readRDS("data_files/ps.its2.prestress.RDS")
seqtab.ps <- data.frame(ps.cleanest.ps@otu_table)
samdf.ps <- data.frame(ps.cleanest.ps@sam_data)
ps.cleanest.ps.rel = readRDS("data_files/ps.its2.prestress.rel.RDS")
seqtab.rel.ps <- data.frame(ps.cleanest.ps.rel@otu_table)
samdf.rel.ps <- data.frame(ps.cleanest.ps.rel@sam_data)
taxa.ps = read.csv(file = "data_files/symportal_taxa.prestress.csv", header = TRUE) %>%
select(-X)
rownames(taxa.ps) <- as.factor(taxa.ps$DIV)
sum(taxa.ps$majority_its2 == "C1") # 19 div
sum(taxa.ps$majority_its2 == "C3") # 2 div
sum(taxa.ps$majority_its2 == "D1") # 9 div
mtaxa.ps <- as.matrix(taxa.ps)
#### Bar plot - post-processing T0 ####
its2_cols_greens = c("A4" = "#ffeda0", "A4z" =  "#fd8d3c",
"B19" = "#4eb3d3", "B5a" = "#0868ac", "B5" = "#800026",
"C1" = "#edf8e9", "C15" = "#feb24c",  "C3" = "#a1d99b",
"C3af" = "#238b45", "D1" = "#00441b")
# bar plot of all individuals
p.all = plot_bar(ps.cleanest.t0.rel, x="gen_site", fill="majority_its2") +
theme_bw() +
scale_fill_manual(name = "Majority ITS2", values = its2_cols_greens) +
xlab("Sample") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
p.all
# Lineage:
ps.lin <- merge_samples(ps.cleanest.t0, "lineage")
ps.rel.lin <- transform_sample_counts(ps.lin, function(x) x / sum(x))
p.lineage = plot_bar(ps.rel.lin, fill="majority_its2") +
geom_bar(stat = "identity") +
scale_fill_manual(name = "Majority ITS2", values = its2_cols_greens) +
theme_bw()
p.lineage
# Lineage only:
p.lin = plot_bar(ps.cleanest.t0.rel, x="gen_site", fill="majority_its2") +
#geom_bar(stat = "identity", width = 0.2) +
geom_col(position = position_dodge2(width = 0.8, preserve = "single")) +
scale_fill_manual(name = "Genus", values = its2_cols_greens) +
theme_bw() +
facet_grid(~lineage, scales = "free", space = "free") +
#theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1), axis.title.x = element_blank(), axis.title.y = element_blank())
p.lin
ps.cleanest.t0.rel = readRDS("data_files/ps.its2.t0.rel.RDS")
seqtab.rel.t0 <- data.frame(ps.cleanest.t0.rel@otu_table)
samdf.rel.t0 <- data.frame(ps.cleanest.t0.rel@sam_data)
ps.cleanest.ps.rel = readRDS("data_files/ps.its2.prestress.rel.RDS")
seqtab.rel.ps <- data.frame(ps.cleanest.ps.rel@otu_table)
samdf.rel.ps <- data.frame(ps.cleanest.ps.rel@sam_data)
## First T0
# change column names to majority its2 sequence
taxa.t0 = read.csv(file = "data_files/symportal_taxa.t0.csv", header = TRUE) %>%
select(-X)
taxa.t0$majority_its2
colnames(seqtab.rel.t0) = c("A4z","A4","B19","B5","B5a","C1.1","C1.2","C1.3","C1.4","C1.5","C1.6","C1.7","C3.1","C1.8","C3.2","C3af",
"C1.9","C1.10","C1.11","C1.12","C1.13","C1.14","C1.15","C1.16","C15","C1.17","C1.18","C1.19",
"D1.1","D1.2","D1.3","D1.4","D1.5","D1.6","D1.7","D1.8","D1.9" )
# make new data frame and sum columns with the same majority its2 sequence
seqtab.rel.t0.new = seqtab.rel.t0 %>%
mutate(A4z_sum = A4z) %>%
mutate(A4_sum = A4) %>%
mutate(B19_sum = B19) %>%
mutate(B5_sum = B5) %>%
mutate(B5a_sum = B5a) %>%
mutate(C1_sum = rowSums(select(., starts_with("C1.")))) %>%
mutate(C3_sum = rowSums(select(., starts_with("C3.")))) %>%
mutate(C3af_sum = C3af) %>%
mutate(C15_sum = C15) %>%
mutate(D1_sum = rowSums(select(., starts_with("D1.")))) %>%
rownames_to_column(var = "frag") %>%
select(frag, contains("_sum"))
its2.rel.t0.combined = left_join(seqtab.rel.t0.new, samdf.rel.t0, by = "frag")
its2.rel.t0.combined = its2.rel.t0.combined %>%
mutate_at(c(2:11), as.numeric)
# convert factors
its2.rel.t0.combined$treat = as.factor(its2.rel.t0.combined$treat)
its2.rel.t0.combined$treat = factor(its2.rel.t0.combined$treat, levels = c("Control", "Low Var","Mod Var","High Var"))
its2.rel.t0.combined$sitename = as.factor(its2.rel.t0.combined$sitename)
its2.rel.t0.combined$lineage = as.factor(its2.rel.t0.combined$lineage)
its2.rel.t0.combined$gen_site = as.factor(its2.rel.t0.combined$gen_site)
its2.rel.t0.combined$reef = as.factor(its2.rel.t0.combined$reef)
# add in dominant and minor distinctions to use in other plots
its2.rel.t0.combined.2 = its2.rel.t0.combined %>%
mutate(dominant_type = case_when(A4z_sum >= 0.5 ~ "A4z",
A4_sum >= 0.5 ~ "A4",
B19_sum >= 0.5 ~ "B19",
B5_sum >= 0.5 ~ "B5",
B5a_sum >= 0.5 ~ "B5a",
C1_sum >= 0.5 ~ "C1",
C3_sum >= 0.5 ~ "C3",
C3af_sum >= 0.5 ~ "C3af",
C15_sum >= 0.5 ~ "C15",
D1_sum >= 0.5 ~ "D1")) %>%
mutate(minor_type = case_when(B19_sum < 0.5 & B19_sum > 0.0 ~ "B19",
B5_sum < 0.5 & B5_sum > 0.0 ~ "B5",
C1_sum < 0.5 & C1_sum > 0.0 ~ "C1",
C3_sum < 0.5 & C3_sum > 0.0 ~ "C3",
C3af_sum < 0.5 & C3af_sum > 0.0 ~ "C3af",
D1_sum < 0.5 & D1_sum > 0.0 ~ "D1"))
## Now Prestress
# change column names to majority its2 sequence
taxa.ps = read.csv(file = "data_files/symportal_taxa.prestress.csv", header = TRUE) %>%
select(-X)
taxa.ps$majority_its2
colnames(seqtab.rel.ps) = c("A4z","A4","B19","B5","B5a","C1.1","C1.2","C1.3","C1.4","C1.5","C1.6","C1.7","C3.1","C1.8","C3.2","C3af",
"C1.9","C1.10","C1.11","C1.12","C1.13","C1.14","C1.15","C1.16","C15","C1.17","C1.18","C1.19",
"D1.1","D1.2","D1.3","D1.4","D1.5","D1.6","D1.7","D1.8","D1.9" )
# make new data frame and sum columns with the same majority its2 sequence
seqtab.rel.ps.new = seqtab.rel.ps %>%
mutate(A4z_sum = A4z) %>%
mutate(A4_sum = A4) %>%
mutate(B19_sum = B19) %>%
mutate(B5_sum = B5) %>%
mutate(B5a_sum = B5a) %>%
mutate(C1_sum = rowSums(select(., starts_with("C1.")))) %>%
mutate(C3_sum = rowSums(select(., starts_with("C3.")))) %>%
mutate(C3af_sum = C3af) %>%
mutate(C15_sum = C15) %>%
mutate(D1_sum = rowSums(select(., starts_with("D1.")))) %>%
rownames_to_column(var = "frag") %>%
select(frag, contains("_sum"))
its2.rel.ps.combined = left_join(seqtab.rel.ps.new, samdf.rel.ps, by = "frag")
its2.rel.ps.combined = its2.rel.ps.combined %>%
mutate_at(c(2:11), as.numeric)
# convert factors
its2.rel.ps.combined$treat = as.factor(its2.rel.ps.combined$treat)
its2.rel.ps.combined$treat = factor(its2.rel.ps.combined$treat, levels = c("Control", "Low Var","Mod Var","High Var"))
its2.rel.ps.combined$sitename = as.factor(its2.rel.ps.combined$sitename)
its2.rel.ps.combined$lineage = as.factor(its2.rel.ps.combined$lineage)
its2.rel.ps.combined$gen_site = as.factor(its2.rel.ps.combined$gen_site)
its2.rel.ps.combined$reef = as.factor(its2.rel.ps.combined$reef)
# add in dominant and minor distinctions to use in other plots
its2.rel.ps.combined.2 = its2.rel.ps.combined %>%
mutate(dominant_type = case_when(A4z_sum >= 0.5 ~ "A4z",
A4_sum >= 0.5 ~ "A4",
B19_sum >= 0.5 ~ "B19",
B5_sum >= 0.5 ~ "B5",
B5a_sum >= 0.5 ~ "B5a",
C1_sum >= 0.5 ~ "C1",
C3_sum >= 0.5 ~ "C3",
C3af_sum >= 0.5 ~ "C3af",
C15_sum >= 0.5 ~ "C15",
D1_sum >= 0.5 ~ "D1")) %>%
mutate(minor_type = case_when(B19_sum < 0.5 & B19_sum > 0.0 ~ "B19",
B5_sum < 0.5 & B5_sum > 0.0 ~ "B5",
C1_sum < 0.5 & C1_sum > 0.0 ~ "C1",
C3_sum < 0.5 & C3_sum > 0.0 ~ "C3",
C3af_sum < 0.5 & C3af_sum > 0.0 ~ "C3af",
D1_sum < 0.5 & D1_sum > 0.0 ~ "D1"))
head(its2.rel.t0.combined.2)
head(its2.rel.ps.combined.2)
its2.rel.combined = rbind(its2.rel.t0.combined.2, its2.rel.ps.combined.2)
# summarize proportion of individuals with more than 50% C or D
its2.rel.combined.2 %>%
#filter(sitename=="CI") %>%
group_by(lineage) %>%
dplyr::summarize(n = n(), # total sample size
n_gt50D = sum(D1_sum>=0.5), # number of individuals with proportion of D1 > 0.5
p_gt50D = n_gt50D/n) # proportion of individuals with D1 > 0.5
its2.rel.combined
its2.rel.ps.combined.2
# summarize proportion of individuals with more than 50% C or D
its2.rel.combined %>%
#filter(sitename=="CI") %>%
group_by(lineage) %>%
dplyr::summarize(n = n(), # total sample size
n_gt50D = sum(D1_sum>=0.5), # number of individuals with proportion of D1 > 0.5
p_gt50D = n_gt50D/n) # proportion of individuals with D1 > 0.5
# summarize proportion of individuals with more than 50% C or D
its2.rel.ps.combined.2 %>%
#filter(sitename=="CI") %>%
group_by(lineage) %>%
dplyr::summarize(n = n(), # total sample size
n_gt50D = sum(D1_sum>=0.5), # number of individuals with proportion of D1 > 0.5
p_gt50D = n_gt50D/n) # proportion of individuals with D1 > 0.5
# summarize proportion of individuals with more than 50% C or D
its2.rel.t0.combined.2 %>%
#its2.rel.ps.combined.2 %>%
#filter(sitename=="CI") %>%
group_by(lineage) %>%
dplyr::summarize(n = n(), # total sample size
n_gt50D = sum(D1_sum>=0.5), # number of individuals with proportion of D1 > 0.5
p_gt50D = n_gt50D/n) # proportion of individuals with D1 > 0.5
# summarize proportion of individuals with more than 50% C or D
#its2.rel.t0.combined.2 %>%
its2.rel.ps.combined.2 %>%
#filter(sitename=="CI") %>%
group_by(lineage) %>%
dplyr::summarize(n = n(), # total sample size
n_gt50D = sum(D1_sum>=0.5), # number of individuals with proportion of D1 > 0.5
p_gt50D = n_gt50D/n) # proportion of individuals with D1 > 0.5
shapiro.test(its2.rel.t0.combined.2$D1_sum) # not normal
kruskal.test(D1_sum ~ lineage, data = its2.rel.t0.combined.2)
kruskal.test(D1_sum ~ lineage, data = its2.rel.ps.combined.2)
its2.rel.t0.combined.2 = its2.rel.t0.combined.2 %>%
filter(lineage != "L3")
its2.rel.t0.combined.2
kruskal.test(D1_sum ~ lineage, data = its2.rel.t0.combined.2)
D1_sum
its2.rel.ps.combined.2
d1_means_ps = summarySE(its2.rel.ps.combined.2, measurevar = "D1_sum", groupvars = c("lineage"))
d1_means_ps
d1_means_t0
d1_means_t0 = summarySE(its2.rel.t0.combined.2, measurevar = "D1_sum", groupvars = c("lineage"))
d1_means_t0
ps.cleanest.t0.rel = readRDS("data_files/ps.its2.t0.rel.RDS")
seqtab.rel.t0 <- data.frame(ps.cleanest.t0.rel@otu_table)
samdf.rel.t0 <- data.frame(ps.cleanest.t0.rel@sam_data)
ps.cleanest.ps.rel = readRDS("data_files/ps.its2.prestress.rel.RDS")
seqtab.rel.ps <- data.frame(ps.cleanest.ps.rel@otu_table)
samdf.rel.ps <- data.frame(ps.cleanest.ps.rel@sam_data)
## First T0
# change column names to majority its2 sequence
taxa.t0 = read.csv(file = "data_files/symportal_taxa.t0.csv", header = TRUE) %>%
select(-X)
taxa.t0$majority_its2
colnames(seqtab.rel.t0) = c("A4z","A4","B19","B5","B5a","C1.1","C1.2","C1.3","C1.4","C1.5","C1.6","C1.7","C3.1","C1.8","C3.2","C3af",
"C1.9","C1.10","C1.11","C1.12","C1.13","C1.14","C1.15","C1.16","C15","C1.17","C1.18","C1.19",
"D1.1","D1.2","D1.3","D1.4","D1.5","D1.6","D1.7","D1.8","D1.9" )
# make new data frame and sum columns with the same majority its2 sequence
seqtab.rel.t0.new = seqtab.rel.t0 %>%
mutate(A4z_sum = A4z) %>%
mutate(A4_sum = A4) %>%
mutate(B19_sum = B19) %>%
mutate(B5_sum = B5) %>%
mutate(B5a_sum = B5a) %>%
mutate(C1_sum = rowSums(select(., starts_with("C1.")))) %>%
mutate(C3_sum = rowSums(select(., starts_with("C3.")))) %>%
mutate(C3af_sum = C3af) %>%
mutate(C15_sum = C15) %>%
mutate(D1_sum = rowSums(select(., starts_with("D1.")))) %>%
rownames_to_column(var = "frag") %>%
select(frag, contains("_sum"))
its2.rel.t0.combined = left_join(seqtab.rel.t0.new, samdf.rel.t0, by = "frag")
its2.rel.t0.combined = its2.rel.t0.combined %>%
mutate_at(c(2:11), as.numeric)
# convert factors
its2.rel.t0.combined$treat = as.factor(its2.rel.t0.combined$treat)
its2.rel.t0.combined$treat = factor(its2.rel.t0.combined$treat, levels = c("Control", "Low Var","Mod Var","High Var"))
its2.rel.t0.combined$sitename = as.factor(its2.rel.t0.combined$sitename)
its2.rel.t0.combined$lineage = as.factor(its2.rel.t0.combined$lineage)
its2.rel.t0.combined$gen_site = as.factor(its2.rel.t0.combined$gen_site)
its2.rel.t0.combined$reef = as.factor(its2.rel.t0.combined$reef)
# add in dominant and minor distinctions to use in other plots
its2.rel.t0.combined.2 = its2.rel.t0.combined %>%
mutate(dominant_type = case_when(A4z_sum >= 0.5 ~ "A4z",
A4_sum >= 0.5 ~ "A4",
B19_sum >= 0.5 ~ "B19",
B5_sum >= 0.5 ~ "B5",
B5a_sum >= 0.5 ~ "B5a",
C1_sum >= 0.5 ~ "C1",
C3_sum >= 0.5 ~ "C3",
C3af_sum >= 0.5 ~ "C3af",
C15_sum >= 0.5 ~ "C15",
D1_sum >= 0.5 ~ "D1")) %>%
mutate(minor_type = case_when(B19_sum < 0.5 & B19_sum > 0.0 ~ "B19",
B5_sum < 0.5 & B5_sum > 0.0 ~ "B5",
C1_sum < 0.5 & C1_sum > 0.0 ~ "C1",
C3_sum < 0.5 & C3_sum > 0.0 ~ "C3",
C3af_sum < 0.5 & C3af_sum > 0.0 ~ "C3af",
D1_sum < 0.5 & D1_sum > 0.0 ~ "D1"))
write.csv(its2.rel.t0.combined.2, file = "~/Dropbox/BU/TVE/TVE_Github/DielTempVariability/Physiology_Data/data_files/ITS2.dominanttype.T0.csv", row.names = FALSE)
## Now Prestress
# change column names to majority its2 sequence
taxa.ps = read.csv(file = "data_files/symportal_taxa.prestress.csv", header = TRUE) %>%
select(-X)
taxa.ps$majority_its2
colnames(seqtab.rel.ps) = c("A4z","A4","B19","B5","B5a","C1.1","C1.2","C1.3","C1.4","C1.5","C1.6","C1.7","C3.1","C1.8","C3.2","C3af",
"C1.9","C1.10","C1.11","C1.12","C1.13","C1.14","C1.15","C1.16","C15","C1.17","C1.18","C1.19",
"D1.1","D1.2","D1.3","D1.4","D1.5","D1.6","D1.7","D1.8","D1.9" )
# make new data frame and sum columns with the same majority its2 sequence
seqtab.rel.ps.new = seqtab.rel.ps %>%
mutate(A4z_sum = A4z) %>%
mutate(A4_sum = A4) %>%
mutate(B19_sum = B19) %>%
mutate(B5_sum = B5) %>%
mutate(B5a_sum = B5a) %>%
mutate(C1_sum = rowSums(select(., starts_with("C1.")))) %>%
mutate(C3_sum = rowSums(select(., starts_with("C3.")))) %>%
mutate(C3af_sum = C3af) %>%
mutate(C15_sum = C15) %>%
mutate(D1_sum = rowSums(select(., starts_with("D1.")))) %>%
rownames_to_column(var = "frag") %>%
select(frag, contains("_sum"))
its2.rel.ps.combined = left_join(seqtab.rel.ps.new, samdf.rel.ps, by = "frag")
its2.rel.ps.combined = its2.rel.ps.combined %>%
mutate_at(c(2:11), as.numeric)
# convert factors
its2.rel.ps.combined$treat = as.factor(its2.rel.ps.combined$treat)
its2.rel.ps.combined$treat = factor(its2.rel.ps.combined$treat, levels = c("Control", "Low Var","Mod Var","High Var"))
its2.rel.ps.combined$sitename = as.factor(its2.rel.ps.combined$sitename)
its2.rel.ps.combined$lineage = as.factor(its2.rel.ps.combined$lineage)
its2.rel.ps.combined$gen_site = as.factor(its2.rel.ps.combined$gen_site)
its2.rel.ps.combined$reef = as.factor(its2.rel.ps.combined$reef)
# add in dominant and minor distinctions to use in other plots
its2.rel.ps.combined.2 = its2.rel.ps.combined %>%
mutate(dominant_type = case_when(A4z_sum >= 0.5 ~ "A4z",
A4_sum >= 0.5 ~ "A4",
B19_sum >= 0.5 ~ "B19",
B5_sum >= 0.5 ~ "B5",
B5a_sum >= 0.5 ~ "B5a",
C1_sum >= 0.5 ~ "C1",
C3_sum >= 0.5 ~ "C3",
C3af_sum >= 0.5 ~ "C3af",
C15_sum >= 0.5 ~ "C15",
D1_sum >= 0.5 ~ "D1")) %>%
mutate(minor_type = case_when(B19_sum < 0.5 & B19_sum > 0.0 ~ "B19",
B5_sum < 0.5 & B5_sum > 0.0 ~ "B5",
C1_sum < 0.5 & C1_sum > 0.0 ~ "C1",
C3_sum < 0.5 & C3_sum > 0.0 ~ "C3",
C3af_sum < 0.5 & C3af_sum > 0.0 ~ "C3af",
D1_sum < 0.5 & D1_sum > 0.0 ~ "D1"))
its2.rel.combined = rbind(its2.rel.t0.combined.2, its2.rel.ps.combined.2)
#its2.rel.t0.combined.2 %>%
its2.rel.ps.combined.2 %>%
#filter(sitename=="CI") %>%
group_by(lineage) %>%
dplyr::summarize(n = n(), # total sample size
n_gt50D = sum(D1_sum>=0.5), # number of individuals with proportion of D1 > 0.5
p_gt50D = n_gt50D/n) # proportion of individuals with D1 > 0.5
its2.rel.t0.combined.2 %>%
#its2.rel.ps.combined.2 %>%
#filter(sitename=="CI") %>%
group_by(lineage) %>%
dplyr::summarize(n = n(), # total sample size
n_gt50D = sum(D1_sum>=0.5), # number of individuals with proportion of D1 > 0.5
p_gt50D = n_gt50D/n) # proportion of individuals with D1 > 0.5
kruskal.test(D1_sum ~ lineage, data = its2.rel.t0.combined.2)
kruskal.test(D1_sum ~ lineage, data = its2.rel.ps.combined.2)
# Kruskal-Wallis (non-parametric alternative to one-way anova) to see if there is a difference
# in mean proportion D based on lineage
its2.rel.t0.CI = its2.rel.t0.combined.2 %>%
filter(sitename=="CI")
its2.rel.ps.CI = its2.rel.ps.combined.2 %>%
filter(sitename=="CI")
kruskal.test(D1_sum ~ lineage, data = its2.rel.t0.CI)
kruskal.test(D1_sum ~ lineage, data = its2.rel.ps.CI)
its2.rel.t0.combined.2 %>%
#its2.rel.ps.combined.2 %>%
filter(sitename=="CI") %>%
group_by(lineage) %>%
dplyr::summarize(n = n(), # total sample size
n_gt50D = sum(D1_sum>=0.5), # number of individuals with proportion of D1 > 0.5
p_gt50D = n_gt50D/n) # proportion of individuals with D1 > 0.5
#its2.rel.t0.combined.2 %>%
its2.rel.ps.combined.2 %>%
filter(sitename=="CI") %>%
group_by(lineage) %>%
dplyr::summarize(n = n(), # total sample size
n_gt50D = sum(D1_sum>=0.5), # number of individuals with proportion of D1 > 0.5
p_gt50D = n_gt50D/n) # proportion of individuals with D1 > 0.5
#its2.rel.t0.combined.2 %>%
its2.rel.ps.combined.2 %>%
filter(sitename=="CI") %>%
group_by(lineage) %>%
dplyr::summarize(n = n(), # total sample size
n_gt50D = sum(D1_sum>=0.5), # number of individuals with proportion of D1 > 0.5
p_gt50D = n_gt50D/n) # proportion of individuals with D1 > 0.5
its2.rel.t0.combined.2 %>%
#its2.rel.ps.combined.2 %>%
filter(sitename=="CI") %>%
group_by(lineage) %>%
dplyr::summarize(n = n(), # total sample size
n_gt50D = sum(D1_sum>=0.5), # number of individuals with proportion of D1 > 0.5
p_gt50D = n_gt50D/n) # proportion of individuals with D1 > 0.5

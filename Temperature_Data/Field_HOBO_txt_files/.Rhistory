# rename the columns to keep identifying info
colnames(merged) <- c('Cayo.OR3.arr3','Drago.OR4','Punta.IR1','STRI.IR2','Cristo.IR3.arr1')
merged <- as.data.frame(merged)
# merged is still an xts/zoo object. make it a data.table and keep the datetimes as rownames
merged <- setDT(merged, keep.rownames = T)
colnames(merged) <- c('datetime','Cayo.OR3.arr3','Drago.OR4','Punta.IR1','STRI.IR2','Cristo.IR3.arr1')
head(merged)
master.melt<- melt(merged, id.vars = 'datetime', measure.vars = c('Cayo.OR3.arr3','Drago.OR4','Punta.IR1','STRI.IR2','Cristo.IR3.arr1'))
colnames(master.melt) <- c('datetime','logger','temp')
head(master.melt)
# master.melt is now every measurement you have for each site's "main logger" from the period specified in the initial import as zoo/xts files
# when you converted master.melt to a data.table, the datetime became a character string. this is useful because we can pull date and time out individually.
master.melt$time <- substr(master.melt$datetime, 12, 19)
master.melt$date <- as.Date(master.melt$datetime,"%Y-%m-%d" )
# but now put them back in POSIX format so R knows they're dates
# note that when you do this, the time column will be arbitrarily assigned all the same date (current date)
master.melt$datetime <- as.POSIXct(strptime(master.melt$datetime, "%Y-%m-%d %H:%M:%S"))
master.melt$time <- as.POSIXct(strptime(master.melt$time, "%H:%M:%S"))
head(master.melt)
tail(master.melt)
daily.mmm<-setDT(master.melt)[, list(max = max(temp), min = min(temp), mean=mean(temp)), by=list(logger,date)]
# add in range
daily.mmm$range <- (daily.mmm$max - daily.mmm$min)
head(daily.mmm)
mj.temp<-read.csv("/Users/hannahaichelman/Documents/BU/TVE/TemperatureData/ExternalLabs_Hobo_Loggers/MaggieJohnson/FieldParameters_CRandHP_17-18.csv")
mj.temp$Date<-strptime(mj.temp$Date, format="%m/%d/%y %H:%M")
colnames(mj.temp)[2] <- "datetime"
mj.temp$datetime_ct <- as.POSIXct(mj.temp$datetime, format="%Y-%m-%dT%H:%M:%S")
mj.temp$Day<-format(mj.temp$datetime,"%D")
mj.temp$Site <- factor(mj.temp$Site)
str(mj.temp)
nl.temp<-read.csv("/Users/hannahaichelman/Documents/BU/TVE/TemperatureData/ExternalLabs_Hobo_Loggers/NoelleLucey/BTD_Temp_cleaned.csv")
nl.temp$datetime<-paste(nl.temp$date,nl.temp$time,sep=" ")
nl.temp$datetime<-strptime(nl.temp$datetime, format="%m/%d/%y %H:%M:%S")
nl.temp$datetime_ct <- as.POSIXct(nl.temp$datetime, format="%Y-%m-%dT%H:%M:%S")
nl.temp$Day<-format(nl.temp$datetime,"%D")
nl.temp$date<-as.POSIXct(nl.temp$date, format="%m/%d/%y")
nl.temp$site <- factor(nl.temp$site)
str(nl.temp)
# noelle says Tranquilo Bay is new data, so remove any values of 36 or 23
nl.temp = nl.temp %>%
dplyr::filter(temp <= 36, temp >= 23)
summary(nl.temp)
#### Daily Temperature Variation - External Loggers ####
# Calculate daily ranges for Maggie's sites
mj.temp.cayo = mj.temp %>%
subset(Site=="Cayo")
mj.temp.hosp = mj.temp %>%
subset(Site=="Hosp")
# use Dan Barshis' function to calculate dtv for these loggers
mj.temp.cayo.daily<-data.frame("DayRange"=tapply(mj.temp.cayo$Temp, mj.temp.cayo$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(mj.temp.cayo$Temp, mj.temp.cayo$Day, min),"DayMax"=tapply(mj.temp.cayo$Temp, mj.temp.cayo$Day, max), "DayMean"=tapply(mj.temp.cayo$Temp, mj.temp.cayo$Day, mean))
mj.temp.cayo.daily <- tibble::rownames_to_column(mj.temp.cayo.daily, "date")
mj.temp.cayo.daily$site <- "Cayo_Roldan"
head(mj.temp.cayo.daily)
mj.temp.hosp.daily<-data.frame("DayRange"=tapply(mj.temp.hosp$Temp, mj.temp.hosp$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(mj.temp.hosp$Temp, mj.temp.hosp$Day, min),"DayMax"=tapply(mj.temp.hosp$Temp, mj.temp.hosp$Day, max), "DayMean"=tapply(mj.temp.hosp$Temp, mj.temp.hosp$Day, mean))
mj.temp.hosp.daily <- tibble::rownames_to_column(mj.temp.hosp.daily, "date")
mj.temp.hosp.daily$site <- "Hospital_Point"
head(mj.temp.hosp.daily)
# Calculate daily ranges for Noelle's sites
nl.temp.vista = nl.temp %>%
subset(site=="Bella_Vista")
nl.temp.wilson = nl.temp %>%
subset(site=="Cayo_Wilson")
nl.temp.caracol = nl.temp %>%
subset(site=="Punta_Caracol")
nl.temp.bay.spring = nl.temp %>%
subset(site=="Tranquilo_Bay") %>%
dplyr::filter(Day > "04/03/19" & Day < "06/10/19")
nl.temp.bay.summer = nl.temp %>%
subset(site=="Tranquilo_Bay") %>%
dplyr::filter(Day > "06/20/19" & Day < "09/25/19")
# use Dan Barshis' function to calculate dtv for these loggers
nl.temp.vista.daily<-data.frame("DayRange"=tapply(nl.temp.vista$temp, nl.temp.vista$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(nl.temp.vista$temp, nl.temp.vista$Day, min),"DayMax"=tapply(nl.temp.vista$temp, nl.temp.vista$Day, max), "DayMean"=tapply(nl.temp.vista$temp, nl.temp.vista$Day, mean))
nl.temp.vista.daily <- tibble::rownames_to_column(nl.temp.vista.daily, "date")
nl.temp.vista.daily$site <- "Bella_Vista"
head(nl.temp.vista.daily)
nl.temp.wilson.daily<-data.frame("DayRange"=tapply(nl.temp.wilson$temp, nl.temp.wilson$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(nl.temp.wilson$temp, nl.temp.wilson$Day, min),"DayMax"=tapply(nl.temp.wilson$temp, nl.temp.wilson$Day, max), "DayMean"=tapply(nl.temp.wilson$temp, nl.temp.wilson$Day, mean))
nl.temp.wilson.daily <- tibble::rownames_to_column(nl.temp.wilson.daily, "date")
nl.temp.wilson.daily$site <- "Cayo_Wilson"
head(nl.temp.wilson.daily)
nl.temp.caracol.daily<-data.frame("DayRange"=tapply(nl.temp.caracol$temp, nl.temp.caracol$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(nl.temp.caracol$temp, nl.temp.caracol$Day, min),"DayMax"=tapply(nl.temp.caracol$temp, nl.temp.caracol$Day, max), "DayMean"=tapply(nl.temp.caracol$temp, nl.temp.caracol$Day, mean))
nl.temp.caracol.daily <- tibble::rownames_to_column(nl.temp.caracol.daily, "date")
nl.temp.caracol.daily$site <- "Punta_Caracol"
head(nl.temp.caracol.daily)
nl.temp.bay.spring.daily<-data.frame("DayRange"=tapply(nl.temp.bay.spring$temp, nl.temp.bay.spring$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(nl.temp.bay.spring$temp, nl.temp.bay.spring$Day, min),"DayMax"=tapply(nl.temp.bay.spring$temp, nl.temp.bay.spring$Day, max), "DayMean"=tapply(nl.temp.bay.spring$temp, nl.temp.bay.spring$Day, mean))
nl.temp.bay.spring.daily <- tibble::rownames_to_column(nl.temp.bay.spring.daily, "date")
nl.temp.bay.spring.daily$site <- "Tranquilo_Bay_Spring"
head(nl.temp.bay.spring.daily)
nl.temp.bay.summer.daily<-data.frame("DayRange"=tapply(nl.temp.bay.summer$temp, nl.temp.bay.summer$Day, function(x) range(x)[2]-range(x)[1]),"DayMin"=tapply(nl.temp.bay.summer$temp, nl.temp.bay.summer$Day, min),"DayMax"=tapply(nl.temp.bay.summer$temp, nl.temp.bay.summer$Day, max), "DayMean"=tapply(nl.temp.bay.summer$temp, nl.temp.bay.summer$Day, mean))
nl.temp.bay.summer.daily <- tibble::rownames_to_column(nl.temp.bay.summer.daily, "date")
nl.temp.bay.summer.daily$site <- "Tranquilo_Bay_Summer"
head(nl.temp.bay.summer.daily)
# combine all of Maggie and Noelle's data together:
ext.loggers <- rbind(mj.temp.cayo.daily, mj.temp.hosp.daily, nl.temp.vista.daily, nl.temp.wilson.daily, nl.temp.caracol.daily, nl.temp.bay.spring.daily, nl.temp.bay.summer.daily)
str(ext.loggers)
ext.loggers$site <- factor(ext.loggers$site)
head(ext.loggers)
col_order <- c("site", "date", "DayMax", "DayMin", "DayMean", "DayRange")
ext.loggers <- ext.loggers[, col_order]
head(ext.loggers)
newnames <- c('logger', 'date', 'max', 'min', 'mean', 'range')
names(ext.loggers) <- newnames
head(ext.loggers)
str(ext.loggers)
#convert date to same format as our dtv dataframe
ext.loggers$date <- as.Date(ext.loggers$date,"%m/%d/%y")
str(mj.temp.hosp)
str(master.melt)
# want the order to be datetime, logger, temp, date
mj.temp.hosp.tocombine = mj.temp.hosp %>%
select(datetime_ct, Site, Temp, Day) %>%
rename(datetime = datetime_ct, logger = Site, temp = Temp, date = Day)
str(mj.temp.hosp.tocombine)
mj.temp.hosp.tocombine$date <- as.Date(mj.temp.hosp.tocombine$datetime,"%Y-%m-%d" )
master.melt.tocombine = master.melt %>%
select(datetime, logger, temp, date) %>%
dplyr::filter(logger != "Cayo.OR3.arr3") %>%
dplyr::filter(logger != "Drago.OR4")
str(master.melt.tocombine)
all.proposed.sites = rbind(master.melt.tocombine, mj.temp.hosp.tocombine)
str(all.proposed.sites)
colors <- c("#fed976", "#feb24c", "#fc4e2a", "#e31a1c")
# plot daily range as boxplot
dtv_boxplot <- ggplot(all.proposed.sites, aes(x=logger, y=temp)) +
geom_jitter(shape=16,
position=position_jitter(0.2),
alpha=0.1,
aes(color = logger)) +
scale_color_manual(values = colors) + # for jittered points
geom_boxplot(outlier.shape = NA,
alpha = 0.85,
aes(fill = logger))+
scale_fill_manual(values = colors) + # for boxplot
ylab("Temperature (Â°C)") +
xlab("Site") +
theme(axis.text.x = element_text(angle = 45, vjust=0.7, hjust=.6)) +
theme_classic() +
theme(legend.position = "none")
dtv_boxplot
str(ext.loggers)
str(daily.mmm)
combined.loggers <- rbind(daily.mmm, ext.loggers)
head(combined.loggers)
# plot boxplot of daily ranges of all external logger data
ggplot(ext.loggers, aes(x=logger, y=range, fill=logger)) +
geom_boxplot()+
scale_fill_brewer(palette="RdBu") +
geom_jitter(shape=16, position=position_jitter(0.2), color="gray", alpha=0.5) +
theme(axis.text.x = element_text(angle = 45, vjust=0.7, hjust=.6))
# plot boxplot of daily ranges
combined.loggers %>%
dplyr::filter(logger != "Tranquilo_Bay_Summer") %>%
dplyr::filter(logger != "Tranquilo_Bay_Spring") %>%
ggplot(aes(x=logger, y=range, fill=logger)) +
geom_boxplot()+
scale_fill_brewer(palette="RdBu") +
geom_jitter(shape=16, position=position_jitter(0.2), color="gray", alpha=0.5) +
theme(axis.text.x = element_text(angle = 45, vjust=0.7, hjust=.6))
# plot boxplot of daily means
combined.loggers %>%
dplyr::filter(logger != "Tranquilo_Bay_Summer") %>%
dplyr::filter(logger != "Tranquilo_Bay_Spring") %>%
ggplot(aes(x=logger, y=mean, fill=logger)) +
geom_boxplot()+
scale_fill_brewer(palette="RdBu") +
geom_jitter(shape=16, position=position_jitter(0.2), color="gray", alpha=0.5) +
theme(axis.text.x = element_text(angle = 45, vjust=0.7, hjust=.6))
# plot boxplot of daily max
combined.loggers %>%
dplyr::filter(logger != "Tranquilo_Bay_Summer") %>%
dplyr::filter(logger != "Tranquilo_Bay_Spring") %>%
ggplot(aes(x=logger, y=max, fill=logger)) +
geom_boxplot()+
scale_fill_brewer(palette="RdBu") +
geom_jitter(shape=16, position=position_jitter(0.2), color="gray", alpha=0.5) +
theme(axis.text.x = element_text(angle = 45, vjust=0.7, hjust=.6))
propsites <- combined.loggers %>%
dplyr::filter(logger != "Cayo.OR3.arr3") %>%
dplyr::filter(logger != "Drago.OR4") %>%
dplyr::filter(logger != "Bella_Vista") %>%
dplyr::filter(logger != "Cayo_Roldan") %>%
dplyr::filter(logger != "Cayo_Wilson") %>%
dplyr::filter(logger != "Punta_Caracol") %>%
dplyr::filter(logger != "Tranquilo_Bay_Spring") %>%
dplyr::filter(logger != "Tranquilo_Bay_Summer")
levels(propsites$logger) <- c("Cayo de Agua", "Drago Mar", "Punta Donato", "STRI Point", "Cristobal", "Bella Vista",
"Cayo Roldan", "Cayo Wilson", "Hospital Point", "Punta Caracol", "Tranquilo Bay Spring", "Tranquilo Bay Summer")
#brewer.pal(10, "RdBu")
#colors <- c("#F4A582", "#FDDBC7", "#67001F","#B2182B") # used above code to get these hex codes
brewer.pal(4, "YlOrRd")
??brewer.pal()
lirary(colorspace)
library(colorspace)
colors <- c("#fed976", "#feb24c", "#fc4e2a", "#e31a1c")
# plot daily range as boxplot
dtv_boxplot <- ggplot(propsites, aes(x=logger, y=range)) +
geom_jitter(shape=16,
position=position_jitter(0.2),
alpha=0.99,
aes(color = logger)) +
scale_color_manual(values = colors) + # for jittered points
geom_boxplot(outlier.shape = NA,
alpha = 0.85,
aes(fill = logger))+
scale_fill_manual(values = colors) + # for boxplot
ylab("Daily Temperature Range (Â°C)") +
xlab("Site") +
theme(axis.text.x = element_text(angle = 45, vjust=0.7, hjust=.6)) +
theme_classic() +
theme(legend.position = "none")
dtv_boxplot
# summary SE of daily ranges
dtv_means = summarySE(data = propsites, measurevar = "range", groupvars = "logger")
dtv_means
head(propsites)
# find maximum DTV for each site
max(propsites$range)
# find maximum DTV for each site
library(dplyr)
# find maximum DTV for each site
propsites %>%
group_by(logger) %>%
summarise_each(funs(max))
# find maximum DTV for each site
propsites %>%
group_by(logger) %>%
across(funs(max))
# find maximum DTV for each site
propsites %>%
x
# find maximum DTV for each site
propsites %>%
group_by(logger) %>%
summarise(across(2:5, max))
# find maximum DTV for each site
propsites %>%
group_by(logger) %>%
summarise_each(funs(max))
# plot daily mean as boxplot
mean_boxplot <- ggplot(propsites, aes(x=logger, y=mean)) +
geom_jitter(shape=16,
position=position_jitter(0.2),
alpha=0.99,
aes(color = logger)) +
scale_color_manual(values = colors) + # for jittered points
geom_boxplot(outlier.shape = NA,
alpha = 0.85,
aes(fill = logger))+
scale_fill_manual(values = colors) + # for boxplot
ylab("Daily Mean Temperature (Â°C)") +
xlab("Site") +
theme(axis.text.x = element_text(angle = 45, vjust=0.7, hjust=.6)) +
theme_classic() +
theme(legend.position = "none")
mean_boxplot
# some quick and dirty stats
aov2 = aov(mean ~ logger, data = propsites)
summary(aov2)
TukeyHSD(aov2)
propsites_spring_hp = propsites %>%
dplyr::filter(logger == "Hospital Point" & date >= "2018-01-01" & date <= "2018-04-30")
propsites_spring_hp
propsites_dry_hp = propsites %>%
dplyr::filter(logger == "Hospital Point" & date >= "2018-01-01" & date <= "2018-04-31")
propsites_spring_hp = propsites %>%
dplyr::filter(logger == "Hospital Point" & date >= "2018-03-01" & date <= "2018-06-02")
propsites_dry_hp = propsites %>%
dplyr::filter(logger == "Hospital Point" & date >= "2018-01-01" & date <= "2018-04-30")
propsites_dry_others = propsites %>%
dplyr::filter(date >= "2016-01-01" & date <= "2016-04-30")
propsites_dry = rbind(propsites_dry_hp, propsites_dry_others)
mean_boxplot_dry <- ggplot(propsites_dry, aes(x=logger, y=mean)) +
geom_jitter(shape=16,
position=position_jitter(0.2),
alpha=0.99,
aes(color = logger)) +
scale_color_manual(values = colors) + # for jittered points
geom_boxplot(outlier.shape = NA,
alpha = 0.85,
aes(fill = logger))+
scale_fill_manual(values = colors) + # for boxplot
ylab("Dry Season Daily Mean Temperature (Â°C)") +
xlab("Site") +
theme(axis.text.x = element_text(angle = 45, vjust=0.7, hjust=.6)) +
theme_classic() +
theme(legend.position = "none")
mean_boxplot_dry
# some quick and dirty stats
aov3 = aov(mean ~ logger, data = propsites_dry)
summary(aov3)
TukeyHSD(aov3)
# plot daily mean as boxplot
mean_boxplot <- ggplot(propsites, aes(x=logger, y=mean)) +
geom_jitter(shape=16,
position=position_jitter(0.2),
alpha=0.99,
aes(color = logger)) +
scale_color_manual(values = colors) + # for jittered points
geom_boxplot(outlier.shape = NA,
alpha = 0.85,
aes(fill = logger))+
scale_fill_manual(values = colors) + # for boxplot
ylab("Daily Mean Temperature (Â°C)") +
xlab("Site") +
theme(axis.text.x = element_text(angle = 45, vjust=0.7, hjust=.6)) +
theme_classic() +
theme(legend.position = "none")
mean_boxplot
aov2 = aov(mean ~ logger, data = propsites)
summary(aov2)
TukeyHSD(aov2)
head(propsites)
# find maximum DTV for each site
propsites %>%
group_by(logger) %>%
summarise_each(funs(min))
propsites_mean = propsites %>%
filter(mean >= 27)
propsites_mean = propsites %>%
dplyr::filter(mean >= 27)
propsites_mean
# plot daily mean as boxplot
mean_boxplot <- ggplot(propsites_mean, aes(x=logger, y=mean)) +
geom_jitter(shape=16,
position=position_jitter(0.2),
alpha=0.99,
aes(color = logger)) +
scale_color_manual(values = colors) + # for jittered points
geom_boxplot(outlier.shape = NA,
alpha = 0.85,
aes(fill = logger))+
scale_fill_manual(values = colors) + # for boxplot
ylab("Daily Mean Temperature (Â°C)") +
xlab("Site") +
theme(axis.text.x = element_text(angle = 45, vjust=0.7, hjust=.6)) +
theme_classic() +
theme(legend.position = "none")
mean_boxplot
aov2 = aov(mean ~ logger, data = propsites)
summary(aov2)
TukeyHSD(aov2)
# some quick and dirty stats
aov2 = aov(mean ~ logger, data = propsites_mean)
summary(aov2)
TukeyHSD(aov2)
# some quick and dirty stats
aov2 = aov(mean ~ logger, data = propsites)
summary(aov2)
TukeyHSD(aov2)
propsites_mean = propsites %>%
dplyr::filter(mean <= 32)
# plot daily mean as boxplot
mean_boxplot <- ggplot(propsites_mean, aes(x=logger, y=mean)) +
geom_jitter(shape=16,
position=position_jitter(0.2),
alpha=0.99,
aes(color = logger)) +
scale_color_manual(values = colors) + # for jittered points
geom_boxplot(outlier.shape = NA,
alpha = 0.85,
aes(fill = logger))+
scale_fill_manual(values = colors) + # for boxplot
ylab("Daily Mean Temperature (Â°C)") +
xlab("Site") +
theme(axis.text.x = element_text(angle = 45, vjust=0.7, hjust=.6)) +
theme_classic() +
theme(legend.position = "none")
mean_boxplot
# some quick and dirty stats
aov2 = aov(mean ~ logger, data = propsites_mean)
summary(aov2)
TukeyHSD(aov2)
mean_boxplot
ggsave(mean_boxplot, filename = "/Users/hannahaichelman/Documents/BU/TVE/TemperatureData/Proposed_Sites/DailyMeanTemp_boxplot_newcolors_narrow.pdf", width=3.5, height=4, units=c("in"), useDingbats=FALSE)
library(mapproj)
library(dplyr)
library(ggplot2)
library(ggmap)
detach("package:ggmap", unload=TRUE)
library(rgeos)
library(rgdal)
library(maps)
library(mapdata)
library(maptools)
library(cowplot)
library(tidyverse)
# find maximum DTV for each site
propsites %>%
group_by(logger) %>%
summarise_each(funs(mean))
# find maximum DTV for each site
propsites %>%
#group_by(logger) %>%
summarise_each(funs(mean))
# find maximum DTV for each site
propsites %>%
group_by(logger) %>%
summarise_each(funs(mean))
#You will need to download, gunzip, and place the gshhs_f.b.gz file from NOAA in your working directory.
#The file can be found here: https://www.ngdc.noaa.gov/mgg/shorelines/data/gshhs/oldversions/version1.2/
#clip gshhs_f.b to the broader area that you want to include in your map. gshhs_f.b is the high definition noaa coastline layer
if (!rgeosStatus()) gpclibPermit()
gshhs.f.b <- "/Users/hannahaichelman/Documents/BU/TVE/TemperatureData/ExternalLabs_Hobo_Loggers/Map/gshhs_f.b"
#Crop global map layer to desired extent
sf1 <- getRgshhsMap(gshhs.f.b, xlim = c(-110, -55), ylim = c(0, 35)) %>%
fortify()
#Read in coordinates of sampling sites
a=read.csv('/Users/hannahaichelman/Documents/BU/TVE/TemperatureData/ExternalLabs_Hobo_Loggers/Map/GPSCoords.csv')
a_propsites <- a %>%
dplyr::filter(Site != "Wilson_Reef") %>%
dplyr::filter(Site != "Bella_Vista") %>%
dplyr::filter(Site != "Punta_Caracol") %>%
dplyr::filter(Site != "Tranquilo_Bay") %>%
dplyr::filter(Site != "Cayo.OR3") %>%
dplyr::filter(Site != "Drago.OR4")
str(a_propsites)
a_propsites$Site <- as.factor(a_propsites$Site)
levels(a_propsites$Site)
# find maximum DTV for each site
propsites %>%
group_by(logger) %>%
summarise_each(funs(max))
# find maximum DTV for each site
propsites %>%
group_by(logger) %>%
summarise_each(funs(min))
map_zoom <- ggplot() +
geom_polygon(data=sf1, aes(x=long, y=lat, group = group), fill = "grey70", color='black', lwd = 0.4)+
geom_point(data=a_propsites[c(1:3)], aes(x=site_long, y=site_lat, shape = Site,), size=5, fill=colors, alpha = 0.9) +
scale_shape_manual(values=c("Cristo.IR3"=21,"Hospital_Point"=21,"Punta.IR1"=21,"STRI.IR2"=21))+
#ggrepel::geom_text_repel(data=a[c(1:3)], aes(x=site_long, y=site_lat, label = Site))+
xlab("Longitude")+
ylab("Latitude")+
theme_cowplot()+
theme(legend.position = "none")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), panel.border=element_blank())+
panel_border(size=1.8, colour="black",remove=FALSE)+
coord_fixed(ratio=1, xlim = c(-82.4,-82.0), ylim = c(9.13,9.45))+
scale_y_continuous(breaks=seq(9.1,9.5, 0.1))
map_zoom
colors <- c("#feb24c","#fc4e2a", "#e31a1c", "#fed976")
map_zoom <- ggplot() +
geom_polygon(data=sf1, aes(x=long, y=lat, group = group), fill = "grey70", color='black', lwd = 0.4)+
geom_point(data=a_propsites[c(1:3)], aes(x=site_long, y=site_lat, shape = Site,), size=5, fill=colors, alpha = 0.9) +
scale_shape_manual(values=c("Cristo.IR3"=21,"Hospital_Point"=21,"Punta.IR1"=21,"STRI.IR2"=21))+
#ggrepel::geom_text_repel(data=a[c(1:3)], aes(x=site_long, y=site_lat, label = Site))+
xlab("Longitude")+
ylab("Latitude")+
theme_cowplot()+
theme(legend.position = "none")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), panel.border=element_blank())+
panel_border(size=1.8, colour="black",remove=FALSE)+
coord_fixed(ratio=1, xlim = c(-82.4,-82.0), ylim = c(9.13,9.45))+
scale_y_continuous(breaks=seq(9.1,9.5, 0.1))
map_zoom
levels(a_propsites$Site)
colors <- c("#fc4e2a","#feb24c", "#e31a1c", "#fed976")
map_zoom <- ggplot() +
geom_polygon(data=sf1, aes(x=long, y=lat, group = group), fill = "grey70", color='black', lwd = 0.4)+
geom_point(data=a_propsites[c(1:3)], aes(x=site_long, y=site_lat, shape = Site,), size=5, fill=colors, alpha = 0.9) +
scale_shape_manual(values=c("Cristo.IR3"=21,"Hospital_Point"=21,"Punta.IR1"=21,"STRI.IR2"=21))+
#ggrepel::geom_text_repel(data=a[c(1:3)], aes(x=site_long, y=site_lat, label = Site))+
xlab("Longitude")+
ylab("Latitude")+
theme_cowplot()+
theme(legend.position = "none")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), panel.border=element_blank())+
panel_border(size=1.8, colour="black",remove=FALSE)+
coord_fixed(ratio=1, xlim = c(-82.4,-82.0), ylim = c(9.13,9.45))+
scale_y_continuous(breaks=seq(9.1,9.5, 0.1))
map_zoom
"#feb24c"
colors <- c("#feb24c","#fc4e2a", "#e31a1c", "#fed976")
map_zoom <- ggplot() +
geom_polygon(data=sf1, aes(x=long, y=lat, group = group), fill = "grey70", color='black', lwd = 0.4)+
geom_point(data=a_propsites[c(1:3)], aes(x=site_long, y=site_lat, shape = Site,), size=5, fill=colors, alpha = 0.9) +
scale_shape_manual(values=c("Cristo.IR3"=21,"Hospital_Point"=21,"Punta.IR1"=21,"STRI.IR2"=21))+
#ggrepel::geom_text_repel(data=a[c(1:3)], aes(x=site_long, y=site_lat, label = Site))+
xlab("Longitude")+
ylab("Latitude")+
theme_cowplot()+
theme(legend.position = "none")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), panel.border=element_blank())+
panel_border(size=1.8, colour="black",remove=FALSE)+
coord_fixed(ratio=1, xlim = c(-82.4,-82.0), ylim = c(9.13,9.45))+
scale_y_continuous(breaks=seq(9.1,9.5, 0.1))
map_zoom
levels(a_propsites$Site)
colors <- c("#e31a1c","#fc4e2a","#fed976","#feb24c")
SP = #feb24c
PD = #fed976
CI = #fc4e2a
HP = #e31a1c
map_zoom <- ggplot() +
geom_polygon(data=sf1, aes(x=long, y=lat, group = group), fill = "grey70", color='black', lwd = 0.4)+
geom_point(data=a_propsites[c(1:3)], aes(x=site_long, y=site_lat, shape = Site,), size=5, fill=colors, alpha = 0.9) +
scale_shape_manual(values=c("Cristo.IR3"=21,"Hospital_Point"=21,"Punta.IR1"=21,"STRI.IR2"=21))+
#ggrepel::geom_text_repel(data=a[c(1:3)], aes(x=site_long, y=site_lat, label = Site))+
xlab("Longitude")+
ylab("Latitude")+
theme_cowplot()+
theme(legend.position = "none")+
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(), panel.border=element_blank())+
panel_border(size=1.8, colour="black",remove=FALSE)+
coord_fixed(ratio=1, xlim = c(-82.4,-82.0), ylim = c(9.13,9.45))+
scale_y_continuous(breaks=seq(9.1,9.5, 0.1))
map_zoom
# save ggplot figure
ggsave(file="/Users/hannahaichelman/Documents/BU/TVE/TemperatureData/Proposed_Sites/map_zoom_proposedsites.pdf", map_zoom, width = 4, height = 4, units = c("in"), useDingbats=FALSE)
aov2 = aov(mean ~ logger, data = propsites_mean)
summary(aov2)
TukeyHSD(aov2)
